%token SPACES // [ \t]+
%token NEWLINES // (\n|\r\n)+

%token COMMENT // //-style or /**/-style comment

%token BOOL_LITERAL INTEGER_LITERAL FLOAT_LITERAL RUNE_LITERAL STRING_LITERAL

%token LBRACE RBRACE LPAREN RPAREN LBRACKET RBRACKET
%token GENERIC_LBRACE // $[
%token DOT COMMA QUESTION SEMICOLON DOTDOTDOT

%token IDENTIFIER
%token IF ELSE MATCH CASE DEFAULT FOR
%token RETURN BREAK CONTINUE

%token TYPE STRUCT ENUM
%token FUNC ASYNC

%token LABEL_DECL JUMP_LABEL

%token ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN
%token ADD_ONE_ASSIGN SUB_ONE_ASSIGN
%token BIT_NEG_ASSIGN BIT_AND_ASSIGN BIT_OR_ASSIGN BIT_XOR_ASSIGN
%token BIT_LSHIFT_ASSIGN BIT_RSHIFT_ASSIGN

%token NOT AND OR
%token ADD SUB MUL DIV MOD
%token BIT_NEG BIT_AND BIT_XOR BIT_OR BIT_LSHIFT BIT_RSHIFT
%token EQUAL NOT_EQUAL LESS LESS_OR_EQUAL GREATER GREATER_OR_EQUAL

%token LEX_ERROR

%type optional_label_decl optional_jump_label

%type literal

%type expression
%type block_body block_expr
%type sequence_expr if_expr match_expr loop_expr

%type anonymous_func_expr anonymous_struct_expr

%type call_expr

// expression in decreasing precedence
%type atom_expr access_expr
%type unary_expr
%type mul_expr add_expr cmp_expr and_expr or_expr

%type jump_type
%type statement statement_body
%type statements

%type unary_op  // - ~ not * &
%type mul_op // * / % & << >>
%type add_op // + - | ^
%type cmp_op // == != < <= > >=

%type op_one_assign  // ++ --
%type binary_op_assign // += -= etc.

%type generic_parameters optional_generic_parameters
%type generic_arguments

%type parameter_decl
%type parameters non_empty_parameters vararg optional_vararg optional_receiver

%type arguments
%type expression_or_implicit_struct optional_expression_or_implicit_struct

%type lex_internal_tokens

%type type_decl
%type value_type atom_type
%type explicit_struct_type implicit_struct_type
%type explicit_enum_type implicit_enum_type

%type func_def func_decl implicit_func_type explicit_func_type

%start type_decl func_def expression lex_internal_tokens

literal ->
  BOOL_LITERAL |
  INTEGER_LITERAL |
  FLOAT_LITERAL |
  RUNE_LITERAL |
  STRING_LITERAL

anonymous_func_expr -> explicit_func_type block_body

anonymous_struct_expr ->
  // post parse analysis should ensure there are no generic parameters in
  // struct def
  explicit: explicit_struct_type LPAREN arguments RPAREN |
  implicit: LPAREN arguments RPAREN

// TODO cast
// TODO type isa check
// TODO is check
atom_expr ->
  literal |
  IDENTIFIER |
  block_expr |
  // post-parse analysis pass should check for valid anonymous definition
  anonymous_func_expr |
  anonymous_struct_expr |
  LEX_ERROR

// TODO
generic_arguments ->

// TODO
arguments ->

call_expr ->
  concrete: access_expr LPAREN arguments RPAREN |
  generic: access_expr GENERIC_LBRACE generic_arguments RBRACE LPAREN arguments RPAREN

access_expr ->
  atom_expr |
  access: access_expr DOT IDENTIFIER |
  call_expr |
  // TODO allow ranged lookup? e.g., x[:]
  index: access_expr LBRACKET expression RBRACKET

unary_op ->
  NOT |
  BIT_NEG |
  SUB |
  // "deref" copies an lvalue object.  The reference can be either mutable or
  // immutable.
  MUL |
  // "ref" returns a mutable reference to the lvalue object.  ref-ing can be
  // applied on either mutable or immutable referenced location.
  BIT_AND

unary_expr ->
  access_expr |
  op: unary_op unary_expr

mul_op ->
  MUL |
  DIV |
  MOD |
  BIT_AND |
  BIT_LSHIFT |
  BIT_RSHIFT

mul_expr ->
  unary_expr |
  op: mul_expr mul_op unary_expr

add_op ->
  ADD |
  SUB |
  BIT_OR |
  BIT_XOR

add_expr ->
  mul_expr |
  op: add_expr add_op mul_expr

cmp_op ->
  EQUAL |
  NOT_EQUAL |
  LESS |
  LESS_OR_EQUAL |
  GREATER |
  GREATER_OR_EQUAL

cmp_expr ->
  add_expr |
  op: cmp_expr cmp_op add_expr

and_expr ->
  cmp_expr |
  op: and_expr AND cmp_expr

or_expr ->
  and_expr |
  op: or_expr OR and_expr

sequence_expr -> or_expr

optional_jump_label ->
  JUMP_LABEL |
  unlabelled:

optional_expression_or_implicit_struct ->
  expression_or_implicit_struct |
  nil:

jump_type ->
  RETURN |
  BREAK |
  CONTINUE

op_one_assign ->
  ADD_ONE_ASSIGN |
  SUB_ONE_ASSIGN

binary_op_assign ->
  ADD_ASSIGN |
  SUB_ASSIGN |
  MUL_ASSIGN |
  DIV_ASSIGN |
  MOD_ASSIGN |
  BIT_NEG_ASSIGN |
  BIT_AND_ASSIGN |
  BIT_OR_ASSIGN |
  BIT_XOR_ASSIGN |
  BIT_LSHIFT_ASSIGN |
  BIT_RSHIFT_ASSIGN

expression_or_implicit_struct ->
  expression |
  implicit_struct: expression_or_implicit_struct COMMA expression

statement_body ->
  expression_or_implicit_struct |

  async: ASYNC call_expr |  // returns an await handler
  // - compiler should optimize away the await handler if it's not used.

  jump: jump_type optional_jump_label optional_expression_or_implicit_struct |

  // TODO assignment. something like
  // let <variable pattern> = [optional ASYNC] expression
  //
  // let fixed x = 5
  // x is not reassignable after initial assignment.
  // if x behaves like a constant if the object reference is immutable, and no
  // field are publically accessible.

  // NOTE: both op_one_assign and binary_op_assign can only operate on
  // proper address values.  Additional checks are applied during reduction or
  // post parse analysis.
  op_one_assign: access_expr op_one_assign |
  binary_op_assign: access_expr binary_op_assign expression

statement ->
  implicit: statement_body NEWLINES |
  explicit: statement_body SEMICOLON

statements ->
  empty_list: |
  add: statements statement

optional_label_decl ->
  LABEL_DECL |
  unlabelled:

block_body -> LBRACE statements RBRACE
block_expr -> optional_label_decl block_body

// NOTE: label is applied to the entire if expression rather than individual
// branches.
if_expr ->
  no_else: IF sequence_expr block_body |
  if_else: IF sequence_expr block_body ELSE block_body |
  multi_if_else: IF sequence_expr block_body ELSE if_expr

// TODO
match_expr -> MATCH CASE DEFAULT

loop_expr ->
  infinite: FOR block_expr |
  while: FOR sequence_expr block_expr
  // TODO: FOR optional_let_assignment SEMICOLON sequence_expr SEMICOLON sequence_expr block_expr
  // TODO FOR let_decl IN sequence_expr block_expr

// TODO
expression ->
  sequence_expr |
  if_expr: optional_label_decl if_expr |
  match_expr: optional_label_decl match_expr |
  loop_expr: optional_label_decl loop_expr

// TODO
generic_parameters ->

optional_generic_parameters ->
  generic: GENERIC_LBRACE generic_parameters RBRACE |
  nil:

atom_type ->
  named: IDENTIFIER optional_generic_parameters |
  explicit_struct_type |
  implicit_struct_type |
  explicit_enum_type

// TODO
implicit_struct_type -> LPAREN /* TODO */ RPAREN

explicit_struct_type ->
  STRUCT implicit_struct_type

// TODO
explicit_enum_type -> ENUM LPAREN /* TODO */ RPAREN

implicit_enum_type ->
  pair: atom_type BIT_OR atom_type |
  add: implicit_enum_type BIT_OR atom_type

value_type ->
  atom_type |
  implicit_enum_type

type_decl ->
  definition: TYPE IDENTIFIER optional_generic_parameters value_type |
  alias: TYPE IDENTIFIER EQUAL value_type

parameter_decl ->
  explicit: IDENTIFIER value_type |
  implicit: value_type |
  inferred: IDENTIFIER QUESTION

non_empty_parameters ->
  parameter_decl |
  add: non_empty_parameters COMMA parameter_decl

vararg ->
  explicit: IDENTIFIER DOTDOTDOT value_type |
  implicit: DOTDOTDOT value_type |
  inferred: IDENTIFIER DOTDOTDOT QUESTION

optional_vararg ->
  vararg |
  vararg2: vararg COMMA |
  nil:

parameters ->
  non_empty_parameters |
  mixed: non_empty_parameters COMMA optional_vararg |
  optional_vararg

implicit_func_type ->
  typed: LPAREN parameters RPAREN value_type |
  inferred: LPAREN parameters RPAREN QUESTION

explicit_func_type -> FUNC implicit_func_type

optional_receiver ->
  receiver: LPAREN parameter_decl RPAREN |
  nil:

func_decl ->
  FUNC optional_receiver IDENTIFIER optional_generic_parameters implicit_func_type

func_def -> func_decl block_body

// Note: auxillary tokens that are consumed by the lexer internally
lex_internal_tokens ->
  SPACES |
  COMMENT

%%lang_specs{
go:
  package: parser
}%%
