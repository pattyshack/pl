var i, var j
var k

(x, ..., >y+z, (nested, >(a(), {b}, c[i]), ...)) = blah

for var (i, j); i < j; var k, var (l, (m, n)) do {}

for i in iter do {}

if case x,y,z = blah {
} else if case .enum1(), .enum2(x,y,z, >(a, (b, c())), var (d, e)) = blah {
}

select {
case <-sender:
case receiver<-value:
case var x = <-sender:
case var x, var y = receiver<-value:
case (var x, y) = receiver<-value:
}

{
  return var i
}

{
  return var i, var j
}

switch x {
case .enumValue1(x, >y, var z, (let more, ..., >stuff), ...), .enumValue2(), .enumValue3:
case (i+1, named=>(x, y()), named=var (i, j)), j(), k[x]:
case .():
case .(i, >j, var k):
}

