// Auto-generated from source: grammar.lr

package lr

import (
	fmt "fmt"
	lexutil "github.com/pattyshack/gt/lexutil"
	ast "github.com/pattyshack/pl/ast"
	io "io"
)

type SymbolId int

const (
	NewlinesToken        = SymbolId(256)
	CommentGroupsToken   = SymbolId(257)
	IntegerLiteralToken  = SymbolId(258)
	FloatLiteralToken    = SymbolId(259)
	RuneLiteralToken     = SymbolId(260)
	StringLiteralToken   = SymbolId(261)
	IdentifierToken      = SymbolId(262)
	UnderscoreToken      = SymbolId(263)
	TrueToken            = SymbolId(264)
	FalseToken           = SymbolId(265)
	IfToken              = SymbolId(266)
	ElseToken            = SymbolId(267)
	SwitchToken          = SymbolId(268)
	CaseToken            = SymbolId(269)
	DefaultToken         = SymbolId(270)
	ForToken             = SymbolId(271)
	DoToken              = SymbolId(272)
	InToken              = SymbolId(273)
	SelectToken          = SymbolId(274)
	ReturnToken          = SymbolId(275)
	BreakToken           = SymbolId(276)
	ContinueToken        = SymbolId(277)
	FallthroughToken     = SymbolId(278)
	ImportToken          = SymbolId(279)
	UnsafeToken          = SymbolId(280)
	TypeToken            = SymbolId(281)
	ImplementsToken      = SymbolId(282)
	AliasToken           = SymbolId(283)
	StructToken          = SymbolId(284)
	EnumToken            = SymbolId(285)
	TraitToken           = SymbolId(286)
	FuncToken            = SymbolId(287)
	AsyncToken           = SymbolId(288)
	DeferToken           = SymbolId(289)
	VarToken             = SymbolId(290)
	LetToken             = SymbolId(291)
	AsToken              = SymbolId(292)
	MakeToken            = SymbolId(293)
	NotToken             = SymbolId(294)
	AndToken             = SymbolId(295)
	OrToken              = SymbolId(296)
	PoundToken           = SymbolId(297)
	AtToken              = SymbolId(298)
	LbraceToken          = SymbolId(299)
	RbraceToken          = SymbolId(300)
	LparenToken          = SymbolId(301)
	RparenToken          = SymbolId(302)
	LbracketToken        = SymbolId(303)
	RbracketToken        = SymbolId(304)
	DotToken             = SymbolId(305)
	CommaToken           = SymbolId(306)
	QuestionToken        = SymbolId(307)
	SemicolonToken       = SymbolId(308)
	ColonToken           = SymbolId(309)
	ExclaimToken         = SymbolId(310)
	DollarToken          = SymbolId(311)
	EllipsisToken        = SymbolId(312)
	TildeToken           = SymbolId(313)
	TildeTildeToken      = SymbolId(314)
	AssignToken          = SymbolId(315)
	ArrowToken           = SymbolId(316)
	AddAssignToken       = SymbolId(317)
	SubAssignToken       = SymbolId(318)
	MulAssignToken       = SymbolId(319)
	DivAssignToken       = SymbolId(320)
	ModAssignToken       = SymbolId(321)
	AddOneAssignToken    = SymbolId(322)
	SubOneAssignToken    = SymbolId(323)
	BitAndAssignToken    = SymbolId(324)
	BitOrAssignToken     = SymbolId(325)
	BitXorAssignToken    = SymbolId(326)
	BitLshiftAssignToken = SymbolId(327)
	BitRshiftAssignToken = SymbolId(328)
	AddToken             = SymbolId(329)
	SubToken             = SymbolId(330)
	MulToken             = SymbolId(331)
	DivToken             = SymbolId(332)
	ModToken             = SymbolId(333)
	BitAndToken          = SymbolId(334)
	BitXorToken          = SymbolId(335)
	BitOrToken           = SymbolId(336)
	BitLshiftToken       = SymbolId(337)
	BitRshiftToken       = SymbolId(338)
	EqualToken           = SymbolId(339)
	NotEqualToken        = SymbolId(340)
	LessToken            = SymbolId(341)
	LessOrEqualToken     = SymbolId(342)
	GreaterToken         = SymbolId(343)
	GreaterOrEqualToken  = SymbolId(344)
	ParseErrorToken      = SymbolId(345)
)

type DirectivesDeclarationReducer interface {
	// 79:42: directives_declaration -> ...
	ToDirectivesDeclaration(Pound_ *TokenValue, Lbracket_ *TokenValue, Directives_ *ast.DirectiveList, Rbracket_ *TokenValue) (*ast.DirectivesDecl, error)
}

type DirectivesReducer interface {
	// 82:2: directives -> directive: ...
	DirectiveToDirectives(Directive_ *ast.Directive) (*ast.DirectiveList, error)

	// 83:2: directives -> add: ...
	AddToDirectives(Directives_ *ast.DirectiveList, Semicolon_ *TokenValue, Directive_ *ast.Directive) (*ast.DirectiveList, error)
}

type DirectiveReducer interface {
	// 86:2: directive -> named: ...
	NamedToDirective(Identifier_ *TokenValue, DirectiveExprs_ *ast.DirectiveExpressionList) (*ast.Directive, error)

	// 87:2: directive -> compound_named: ...
	CompoundNamedToDirective(Identifier_ *TokenValue, Colon_ *TokenValue, Identifier_2 *TokenValue, DirectiveExprs_ *ast.DirectiveExpressionList) (*ast.Directive, error)
}

type DirectiveExprsReducer interface {

	// 91:2: directive_exprs -> nil: ...
	NilToDirectiveExprs() (*ast.DirectiveExpressionList, error)
}

type ProperDirectiveExprsReducer interface {
	// 94:2: proper_directive_exprs -> directive_expr: ...
	DirectiveExprToProperDirectiveExprs(DirectiveExpr_ ast.DirectiveExpression) (*ast.DirectiveExpressionList, error)

	// 95:2: proper_directive_exprs -> add: ...
	AddToProperDirectiveExprs(DirectiveExprs_ *ast.DirectiveExpressionList, Comma_ *TokenValue, DirectiveExpr_ ast.DirectiveExpression) (*ast.DirectiveExpressionList, error)
}

type DirectiveExprReducer interface {

	// 99:2: directive_expr -> or: ...
	OrToDirectiveExpr(DirectiveExpr_ ast.DirectiveExpression, Or_ *TokenValue, DirectiveAndExpr_ ast.DirectiveExpression) (ast.DirectiveExpression, error)
}

type DirectiveAndExprReducer interface {

	// 103:2: directive_and_expr -> and: ...
	AndToDirectiveAndExpr(DirectiveAndExpr_ ast.DirectiveExpression, And_ *TokenValue, DirectiveNotExpr_ ast.DirectiveExpression) (ast.DirectiveExpression, error)
}

type DirectiveNotExprReducer interface {

	// 107:2: directive_not_expr -> not: ...
	NotToDirectiveNotExpr(Not_ *TokenValue, DirectiveAtomExpr_ ast.DirectiveExpression) (ast.DirectiveExpression, error)
}

type DirectiveAtomExprReducer interface {

	// 111:2: directive_atom_expr -> group: ...
	GroupToDirectiveAtomExpr(Lparen_ *TokenValue, DirectiveExpr_ ast.DirectiveExpression, Rparen_ *TokenValue) (ast.DirectiveExpression, error)
}

type DirectiveValueExprReducer interface {
	// 113:39: directive_value_expr -> ...
	ToDirectiveValueExpr(DirectiveValue_ *TokenValue) (ast.DirectiveExpression, error)
}

type FloatingCommentReducer interface {
	// 158:31: floating_comment -> ...
	ToFloatingComment(CommentGroups_ CommentGroupsTok) (ast.Statement, error)
}

type BranchStmtReducer interface {
	// 170:2: branch_stmt -> case_branch: ...
	CaseBranchToBranchStmt(Case_ *TokenValue, CasePatterns_ *ast.ExpressionList, Colon_ *TokenValue, OptionalStatement_ ast.Statement) (ast.Statement, error)

	// 171:2: branch_stmt -> default_branch: ...
	DefaultBranchToBranchStmt(Default_ *TokenValue, Colon_ *TokenValue, OptionalStatement_ ast.Statement) (ast.Statement, error)
}

type OptionalStatementReducer interface {

	// 175:2: optional_statement -> nil: ...
	NilToOptionalStatement() (ast.Statement, error)
}

type UnsafeStmtReducer interface {
	// 184:2: unsafe_stmt -> ...
	ToUnsafeStmt(Unsafe_ *TokenValue, Less_ *TokenValue, Identifier_ *TokenValue, Greater_ *TokenValue, StringLiteral_ *TokenValue) (*ast.UnsafeStmt, error)
}

type JumpStmtReducer interface {
	// 191:2: jump_stmt -> unlabeled_no_value: ...
	UnlabeledNoValueToJumpStmt(JumpOp_ *TokenValue) (ast.Statement, error)

	// 192:2: jump_stmt -> unlabeled_valued: ...
	UnlabeledValuedToJumpStmt(JumpOp_ *TokenValue, ReturnableExpr_ ast.Expression) (ast.Statement, error)

	// 193:2: jump_stmt -> labeled_no_value: ...
	LabeledNoValueToJumpStmt(JumpOp_ *TokenValue, At_ *TokenValue, Identifier_ *TokenValue) (ast.Statement, error)

	// 194:2: jump_stmt -> labeled_valued: ...
	LabeledValuedToJumpStmt(JumpOp_ *TokenValue, At_ *TokenValue, Identifier_ *TokenValue, ReturnableExpr_ ast.Expression) (ast.Statement, error)

	// 197:2: jump_stmt -> FALLTHROUGH: ...
	FallthroughToJumpStmt(Fallthrough_ *TokenValue) (ast.Statement, error)
}

type AssignStmtReducer interface {
	// 212:26: assign_stmt -> ...
	ToAssignStmt(ReturnableExpr_ ast.Expression, Assign_ *TokenValue, ReturnableExpr_2 ast.Expression) (ast.Statement, error)
}

type ImportStmtReducer interface {
	// 219:2: import_stmt -> single: ...
	SingleToImportStmt(Import_ *TokenValue, ImportClause_ *ast.ImportClause) (ast.Statement, error)

	// 220:2: import_stmt -> multiple: ...
	MultipleToImportStmt(Import_ *TokenValue, Lparen_ *TokenValue, ImportClauses_ *ast.ImportClauseList, Rparen_ *TokenValue) (ast.Statement, error)
}

type ProperImportClausesReducer interface {
	// 223:2: proper_import_clauses -> add_implicit: ...
	AddImplicitToProperImportClauses(ProperImportClauses_ *ast.ImportClauseList, Newlines_ *TokenCount, ImportClause_ *ast.ImportClause) (*ast.ImportClauseList, error)

	// 224:2: proper_import_clauses -> add_explicit: ...
	AddExplicitToProperImportClauses(ProperImportClauses_ *ast.ImportClauseList, Comma_ *TokenValue, ImportClause_ *ast.ImportClause) (*ast.ImportClauseList, error)

	// 225:2: proper_import_clauses -> import_clause: ...
	ImportClauseToProperImportClauses(ImportClause_ *ast.ImportClause) (*ast.ImportClauseList, error)
}

type ImportClausesReducer interface {

	// 229:2: import_clauses -> implicit: ...
	ImplicitToImportClauses(ProperImportClauses_ *ast.ImportClauseList, Newlines_ *TokenCount) (*ast.ImportClauseList, error)

	// 230:2: import_clauses -> explicit: ...
	ExplicitToImportClauses(ProperImportClauses_ *ast.ImportClauseList, Comma_ *TokenValue) (*ast.ImportClauseList, error)
}

type ImportClauseReducer interface {
	// 233:2: import_clause -> STRING_LITERAL: ...
	StringLiteralToImportClause(StringLiteral_ *TokenValue) (*ast.ImportClause, error)

	// 234:2: import_clause -> alias: ...
	AliasToImportClause(Identifier_ *TokenValue, StringLiteral_ *TokenValue) (*ast.ImportClause, error)

	// 235:2: import_clause -> unusable_import: ...
	UnusableImportToImportClause(Underscore_ *TokenValue, StringLiteral_ *TokenValue) (*ast.ImportClause, error)

	// 236:2: import_clause -> import_to_local: ...
	ImportToLocalToImportClause(Dot_ *TokenValue, StringLiteral_ *TokenValue) (*ast.ImportClause, error)
}

type BlockAddrDeclStmtReducer interface {
	// 243:2: block_addr_decl_stmt -> ...
	ToBlockAddrDeclStmt(VarType_ *TokenValue, Dollar_ *TokenValue, Lparen_ *TokenValue, BlockAddrDeclList_ *ast.ExpressionList, Rparen_ *TokenValue) (ast.Statement, error)
}

type BlockAddrDeclListReducer interface {

	// 247:2: block_addr_decl_list -> improper_implicit: ...
	ImproperImplicitToBlockAddrDeclList(ProperBlockAddrDeclList_ *ast.ExpressionList, Newlines_ *TokenCount) (*ast.ExpressionList, error)

	// 248:2: block_addr_decl_list -> improper_explicit: ...
	ImproperExplicitToBlockAddrDeclList(ProperBlockAddrDeclList_ *ast.ExpressionList, Comma_ *TokenValue) (*ast.ExpressionList, error)

	// 249:2: block_addr_decl_list -> nil: ...
	NilToBlockAddrDeclList() (*ast.ExpressionList, error)
}

type ProperBlockAddrDeclListReducer interface {
	// 252:2: proper_block_addr_decl_list -> block_addr_decl_item: ...
	BlockAddrDeclItemToProperBlockAddrDeclList(BlockAddrDeclItem_ ast.Expression) (*ast.ExpressionList, error)

	// 253:2: proper_block_addr_decl_list -> add_implicit: ...
	AddImplicitToProperBlockAddrDeclList(ProperBlockAddrDeclList_ *ast.ExpressionList, Newlines_ *TokenCount, BlockAddrDeclItem_ ast.Expression) (*ast.ExpressionList, error)

	// 254:2: proper_block_addr_decl_list -> add_explicit: ...
	AddExplicitToProperBlockAddrDeclList(ProperBlockAddrDeclList_ *ast.ExpressionList, Comma_ *TokenValue, BlockAddrDeclItem_ ast.Expression) (*ast.ExpressionList, error)
}

type BlockAddrDeclItemReducer interface {
	// 257:2: block_addr_decl_item -> decl: ...
	DeclToBlockAddrDeclItem(NewAddressable_ ast.Expression, TypeExpr_ ast.TypeExpression) (ast.Expression, error)

	// 258:2: block_addr_decl_item -> inferred_assign: ...
	InferredAssignToBlockAddrDeclItem(NewAddressable_ ast.Expression, Assign_ *TokenValue, Expr_ ast.Expression) (ast.Expression, error)

	// 259:2: block_addr_decl_item -> typed_assign: ...
	TypedAssignToBlockAddrDeclItem(NewAddressable_ ast.Expression, TypeExpr_ ast.TypeExpression, Assign_ *TokenValue, Expr_ ast.Expression) (ast.Expression, error)
}

type AddrDeclPatternReducer interface {
	// 265:2: addr_decl_pattern -> new_inferred: ...
	NewInferredToAddrDeclPattern(VarType_ *TokenValue, NewAddressable_ ast.Expression) (ast.Expression, error)

	// 266:2: addr_decl_pattern -> new_typed: ...
	NewTypedToAddrDeclPattern(VarType_ *TokenValue, NewAddressable_ ast.Expression, TypeExpr_ ast.TypeExpression) (ast.Expression, error)
}

type AssignToAddrPatternReducer interface {
	// 268:38: assign_to_addr_pattern -> ...
	ToAssignToAddrPattern(Greater_ *TokenValue, Expr_ ast.Expression) (ast.Expression, error)
}

type CasePatternsReducer interface {

	// 281:2: case_patterns -> ...
	ToCasePatterns(AssignSelectablePattern_ ast.Expression) (*ast.ExpressionList, error)
}

type AssignSelectablePatternReducer interface {
	// 287:2: assign_selectable_pattern -> ...
	ToAssignSelectablePattern(SwitchableCasePatterns_ *ast.ExpressionList, Assign_ *TokenValue, Expr_ ast.Expression) (ast.Expression, error)
}

type SwitchableCasePatternsReducer interface {
	// 290:2: switchable_case_patterns -> switchable_case_pattern: ...
	SwitchableCasePatternToSwitchableCasePatterns(SwitchableCasePattern_ ast.Expression) (*ast.ExpressionList, error)

	// 291:2: switchable_case_patterns -> add: ...
	AddToSwitchableCasePatterns(SwitchableCasePatterns_ *ast.ExpressionList, Comma_ *TokenValue, SwitchableCasePattern_ ast.Expression) (*ast.ExpressionList, error)
}

type EnumPatternReducer interface {
	// 323:2: enum_pattern -> match_any_data: ...
	MatchAnyDataToEnumPattern(Dot_ *TokenValue, Underscore_ *TokenValue, ImplicitStructExpr_ ast.Expression) (ast.Expression, error)

	// 324:2: enum_pattern -> named: ...
	NamedToEnumPattern(Dot_ *TokenValue, Identifier_ *TokenValue, ImplicitStructExpr_ ast.Expression) (ast.Expression, error)

	// 325:2: enum_pattern -> match_any_unit: ...
	MatchAnyUnitToEnumPattern(Dot_ *TokenValue, Underscore_ *TokenValue) (ast.Expression, error)

	// 326:2: enum_pattern -> named_unit: ...
	NamedUnitToEnumPattern(Dot_ *TokenValue, Identifier_ *TokenValue) (ast.Expression, error)

	// 327:2: enum_pattern -> unnamed_struct: ...
	UnnamedStructToEnumPattern(Dot_ *TokenValue, ImplicitStructExpr_ ast.Expression) (ast.Expression, error)
}

type ParseErrorExprReducer interface {
	// 345:32: parse_error_expr -> ...
	ToParseErrorExpr(ParseError_ *ParseErrorSymbol) (ast.Expression, error)
}

type LiteralExprReducer interface {
	// 348:2: literal_expr -> TRUE: ...
	TrueToLiteralExpr(True_ *TokenValue) (ast.Expression, error)

	// 349:2: literal_expr -> FALSE: ...
	FalseToLiteralExpr(False_ *TokenValue) (ast.Expression, error)

	// 350:2: literal_expr -> INTEGER_LITERAL: ...
	IntegerLiteralToLiteralExpr(IntegerLiteral_ *TokenValue) (ast.Expression, error)

	// 351:2: literal_expr -> FLOAT_LITERAL: ...
	FloatLiteralToLiteralExpr(FloatLiteral_ *TokenValue) (ast.Expression, error)

	// 352:2: literal_expr -> RUNE_LITERAL: ...
	RuneLiteralToLiteralExpr(RuneLiteral_ *TokenValue) (ast.Expression, error)

	// 353:2: literal_expr -> STRING_LITERAL: ...
	StringLiteralToLiteralExpr(StringLiteral_ *TokenValue) (ast.Expression, error)
}

type NamedExprReducer interface {
	// 356:2: named_expr -> IDENTIFIER: ...
	IdentifierToNamedExpr(Identifier_ *TokenValue) (ast.Expression, error)

	// 357:2: named_expr -> UNDERSCORE: ...
	UnderscoreToNamedExpr(Underscore_ *TokenValue) (ast.Expression, error)
}

type InitializeExprReducer interface {
	// 359:31: initialize_expr -> ...
	ToInitializeExpr(InitializableTypeExpr_ ast.TypeExpression, Lparen_ *TokenValue, Arguments_ *ast.ArgumentList, Rparen_ *TokenValue) (ast.Expression, error)
}

type ImplicitStructExprReducer interface {
	// 361:36: implicit_struct_expr -> ...
	ToImplicitStructExpr(Lparen_ *TokenValue, Arguments_ *ast.ArgumentList, Rparen_ *TokenValue) (ast.Expression, error)
}

type AccessExprReducer interface {
	// 376:27: access_expr -> ...
	ToAccessExpr(AccessibleExpr_ ast.Expression, Dot_ *TokenValue, Identifier_ *TokenValue) (ast.Expression, error)
}

type IndexExprReducer interface {
	// 380:26: index_expr -> ...
	ToIndexExpr(AccessibleExpr_ ast.Expression, Lbracket_ *TokenValue, Index_ ast.Expression, Rbracket_ *TokenValue) (ast.Expression, error)
}

type AsExprReducer interface {
	// 387:23: as_expr -> ...
	ToAsExpr(AccessibleExpr_ ast.Expression, Dot_ *TokenValue, As_ *TokenValue, Lparen_ *TokenValue, TypeExpr_ ast.TypeExpression, Rparen_ *TokenValue) (ast.Expression, error)
}

type ParameterizedExprReducer interface {
	// 396:34: parameterized_expr -> ...
	ToParameterizedExpr(AccessibleExpr_ ast.Expression, GenericArguments_ *ast.TypeExpressionList) (ast.Expression, error)
}

type CallExprReducer interface {
	// 400:25: call_expr -> ...
	ToCallExpr(AccessibleExpr_ ast.Expression, Lparen_ *TokenValue, Arguments_ *ast.ArgumentList, Rparen_ *TokenValue) (ast.Expression, error)
}

type MakeExprReducer interface {
	// 407:2: make_expr -> size_proper: ...
	SizeProperToMakeExpr(MakeExprSize_ *ast.MakeExpr, Rparen_ *TokenValue) (*ast.MakeExpr, error)

	// 408:2: make_expr -> size_improper: ...
	SizeImproperToMakeExpr(MakeExprSize_ *ast.MakeExpr, Comma_ *TokenValue, Rparen_ *TokenValue) (*ast.MakeExpr, error)

	// 409:2: make_expr -> value_proper: ...
	ValueProperToMakeExpr(MakeExprSize_ *ast.MakeExpr, Comma_ *TokenValue, Expr_ ast.Expression, Rparen_ *TokenValue) (*ast.MakeExpr, error)

	// 410:2: make_expr -> value_improper: ...
	ValueImproperToMakeExpr(MakeExprSize_ *ast.MakeExpr, Comma_ *TokenValue, Expr_ ast.Expression, Comma_2 *TokenValue, Rparen_ *TokenValue) (*ast.MakeExpr, error)
}

type MakeExprSizeReducer interface {
	// 413:2: make_expr_size -> size: ...
	SizeToMakeExprSize(MakeExprHead_ *ast.MakeExpr, Expr_ ast.Expression) (*ast.MakeExpr, error)

	// 414:2: make_expr_size -> size_capacity: ...
	SizeCapacityToMakeExprSize(MakeExprHead_ *ast.MakeExpr, Expr_ ast.Expression, Colon_ *TokenValue, Expr_2 ast.Expression) (*ast.MakeExpr, error)
}

type MakeExprHeadReducer interface {
	// 416:28: make_expr_head -> ...
	ToMakeExprHead(Make_ *TokenValue, Lparen_ *TokenValue, VariableSizedTypeExpr_ ast.TypeExpression, Comma_ *TokenValue) (*ast.MakeExpr, error)
}

type ProperArgumentsReducer interface {
	// 419:2: proper_arguments -> add: ...
	AddToProperArguments(ProperArguments_ *ast.ArgumentList, Comma_ *TokenValue, Argument_ *ast.Argument) (*ast.ArgumentList, error)

	// 420:2: proper_arguments -> argument: ...
	ArgumentToProperArguments(Argument_ *ast.Argument) (*ast.ArgumentList, error)
}

type ArgumentsReducer interface {

	// 424:2: arguments -> improper_implicit: ...
	ImproperImplicitToArguments(ProperArguments_ *ast.ArgumentList, Newlines_ *TokenCount) (*ast.ArgumentList, error)

	// 425:2: arguments -> improper_explicit: ...
	ImproperExplicitToArguments(ProperArguments_ *ast.ArgumentList, Comma_ *TokenValue) (*ast.ArgumentList, error)

	// 426:2: arguments -> nil: ...
	NilToArguments() (*ast.ArgumentList, error)
}

type ArgumentReducer interface {
	// 429:2: argument -> positional: ...
	PositionalToArgument(Expr_ ast.Expression) (*ast.Argument, error)

	// 430:2: argument -> colon_expr: ...
	ColonExprToArgument(ColonExpr_ *ast.ImplicitStructExpr) (*ast.Argument, error)

	// 431:2: argument -> named_assignment: ...
	NamedAssignmentToArgument(Identifier_ *TokenValue, Assign_ *TokenValue, Expr_ ast.Expression) (*ast.Argument, error)

	// 435:2: argument -> vararg_assignment: ...
	VarargAssignmentToArgument(Expr_ ast.Expression, Ellipsis_ *TokenValue) (*ast.Argument, error)

	// 438:2: argument -> skip_pattern: ...
	SkipPatternToArgument(Ellipsis_ *TokenValue) (*ast.Argument, error)
}

type ColonExprReducer interface {
	// 442:2: colon_expr -> unit_unit_pair: ...
	UnitUnitPairToColonExpr(Colon_ *TokenValue) (*ast.ImplicitStructExpr, error)

	// 443:2: colon_expr -> expr_unit_pair: ...
	ExprUnitPairToColonExpr(Expr_ ast.Expression, Colon_ *TokenValue) (*ast.ImplicitStructExpr, error)

	// 444:2: colon_expr -> unit_expr_pair: ...
	UnitExprPairToColonExpr(Colon_ *TokenValue, Expr_ ast.Expression) (*ast.ImplicitStructExpr, error)

	// 445:2: colon_expr -> expr_expr_pair: ...
	ExprExprPairToColonExpr(Expr_ ast.Expression, Colon_ *TokenValue, Expr_2 ast.Expression) (*ast.ImplicitStructExpr, error)

	// 446:2: colon_expr -> colon_expr_unit_tuple: ...
	ColonExprUnitTupleToColonExpr(ColonExpr_ *ast.ImplicitStructExpr, Colon_ *TokenValue) (*ast.ImplicitStructExpr, error)

	// 447:2: colon_expr -> colon_expr_expr_tuple: ...
	ColonExprExprTupleToColonExpr(ColonExpr_ *ast.ImplicitStructExpr, Colon_ *TokenValue, Expr_ ast.Expression) (*ast.ImplicitStructExpr, error)
}

type PostfixUnaryExprReducer interface {
	// 457:34: postfix_unary_expr -> ...
	ToPostfixUnaryExpr(AccessibleExpr_ ast.Expression, PostfixUnaryOp_ *TokenValue) (ast.Expression, error)
}

type PrefixUnaryExprReducer interface {
	// 476:33: prefix_unary_expr -> ...
	ToPrefixUnaryExpr(PrefixUnaryOp_ *TokenValue, PrefixableExpr_ ast.Expression) (ast.Expression, error)
}

type BinaryMulExprReducer interface {
	// 517:31: binary_mul_expr -> ...
	ToBinaryMulExpr(MulExpr_ ast.Expression, MulOp_ *TokenValue, PrefixableExpr_ ast.Expression) (ast.Expression, error)
}

type BinaryAddExprReducer interface {
	// 535:31: binary_add_expr -> ...
	ToBinaryAddExpr(AddExpr_ ast.Expression, AddOp_ *TokenValue, MulExpr_ ast.Expression) (ast.Expression, error)
}

type BinaryCmpExprReducer interface {
	// 551:31: binary_cmp_expr -> ...
	ToBinaryCmpExpr(CmpExpr_ ast.Expression, CmpOp_ *TokenValue, AddExpr_ ast.Expression) (ast.Expression, error)
}

type BinaryAndExprReducer interface {
	// 569:31: binary_and_expr -> ...
	ToBinaryAndExpr(AndExpr_ ast.Expression, And_ *TokenValue, CmpExpr_ ast.Expression) (ast.Expression, error)
}

type BinaryOrExprReducer interface {
	// 579:30: binary_or_expr -> ...
	ToBinaryOrExpr(OrExpr_ ast.Expression, Or_ *TokenValue, AndExpr_ ast.Expression) (ast.Expression, error)
}

type SendExprReducer interface {
	// 590:25: send_expr -> ...
	ToSendExpr(SendRecvExpr_ ast.Expression, Arrow_ *TokenValue, OrExpr_ ast.Expression) (ast.Expression, error)
}

type RecvExprReducer interface {
	// 592:25: recv_expr -> ...
	ToRecvExpr(Arrow_ *TokenValue, OrExpr_ ast.Expression) (ast.Expression, error)
}

type BinaryAssignOpExprReducer interface {
	// 605:2: binary_assign_op_expr -> ...
	ToBinaryAssignOpExpr(SendRecvExpr_ ast.Expression, BinaryAssignOp_ *TokenValue, SendRecvExpr_2 ast.Expression) (ast.Expression, error)
}

type ControlFlowExprReducer interface {

	// 632:2: control_flow_expr -> labelled: ...
	LabelledToControlFlowExpr(Identifier_ *TokenValue, At_ *TokenValue, UnlabelledControlFlowExpr_ ast.ControlFlowExpr) (ast.ControlFlowExpr, error)
}

type StatementsReducer interface {
	// 657:30: statements -> ...
	ToStatements(Lbrace_ *TokenValue, StatementList_ *ast.StatementList, Rbrace_ *TokenValue) (*ast.StatementsExpr, error)
}

type ProperStatementListReducer interface {
	// 660:2: proper_statement_list -> add_implicit: ...
	AddImplicitToProperStatementList(ProperStatementList_ *ast.StatementList, Newlines_ *TokenCount, Statement_ ast.Statement) (*ast.StatementList, error)

	// 661:2: proper_statement_list -> add_explicit: ...
	AddExplicitToProperStatementList(ProperStatementList_ *ast.StatementList, Semicolon_ *TokenValue, Statement_ ast.Statement) (*ast.StatementList, error)

	// 662:2: proper_statement_list -> statement: ...
	StatementToProperStatementList(Statement_ ast.Statement) (*ast.StatementList, error)
}

type StatementListReducer interface {

	// 666:2: statement_list -> improper_implicit: ...
	ImproperImplicitToStatementList(ProperStatementList_ *ast.StatementList, Newlines_ *TokenCount) (*ast.StatementList, error)

	// 667:2: statement_list -> improper_explicit: ...
	ImproperExplicitToStatementList(ProperStatementList_ *ast.StatementList, Semicolon_ *TokenValue) (*ast.StatementList, error)

	// 668:2: statement_list -> nil: ...
	NilToStatementList() (*ast.StatementList, error)
}

type IfElseExprReducer interface {

	// 672:2: if_else_expr -> else: ...
	ElseToIfElseExpr(IfElifExpr_ *ast.IfExpr, Else_ *TokenValue, Statements_ *ast.StatementsExpr) (*ast.IfExpr, error)
}

type IfElifExprReducer interface {

	// 676:2: if_elif_expr -> elif: ...
	ElifToIfElifExpr(IfElifExpr_ *ast.IfExpr, Else_ *TokenValue, If_ *TokenValue, Condition_ ast.Expression, Statements_ *ast.StatementsExpr) (*ast.IfExpr, error)
}

type IfOnlyExprReducer interface {
	// 679:2: if_only_expr -> ...
	ToIfOnlyExpr(If_ *TokenValue, Condition_ ast.Expression, Statements_ *ast.StatementsExpr) (*ast.IfExpr, error)
}

type CasePatternExprReducer interface {
	// 685:33: case_pattern_expr -> ...
	ToCasePatternExpr(Case_ *TokenValue, SwitchableCasePatterns_ *ast.ExpressionList, Assign_ *TokenValue, Expr_ ast.Expression) (ast.Expression, error)
}

type SwitchExprBodyReducer interface {
	// 704:37: switch_expr_body -> ...
	ToSwitchExprBody(Switch_ *TokenValue, Expr_ ast.Expression, Statements_ *ast.StatementsExpr) (ast.ControlFlowExpr, error)
}

type SelectExprBodyReducer interface {
	// 706:37: select_expr_body -> ...
	ToSelectExprBody(Select_ *TokenValue, Statements_ *ast.StatementsExpr) (ast.ControlFlowExpr, error)
}

type LoopExprBodyReducer interface {
	// 709:2: loop_expr_body -> infinite: ...
	InfiniteToLoopExprBody(LoopBody_ *ast.StatementsExpr) (ast.ControlFlowExpr, error)

	// 710:2: loop_expr_body -> do_while: ...
	DoWhileToLoopExprBody(LoopBody_ *ast.StatementsExpr, For_ *TokenValue, Expr_ ast.Expression) (ast.ControlFlowExpr, error)

	// 711:2: loop_expr_body -> while: ...
	WhileToLoopExprBody(For_ *TokenValue, Expr_ ast.Expression, LoopBody_ *ast.StatementsExpr) (ast.ControlFlowExpr, error)

	// 712:2: loop_expr_body -> iterator: ...
	IteratorToLoopExprBody(For_ *TokenValue, ReturnableExpr_ ast.Expression, In_ *TokenValue, Expr_ ast.Expression, LoopBody_ *ast.StatementsExpr) (ast.ControlFlowExpr, error)

	// 717:2: loop_expr_body -> for: ...
	ForToLoopExprBody(For_ *TokenValue, Expr_ ast.Expression, Semicolon_ *TokenValue, ReturnableExpr_ ast.Expression, LoopBody_ *ast.StatementsExpr) (ast.ControlFlowExpr, error)
}

type LoopBodyReducer interface {
	// 719:29: loop_body -> ...
	ToLoopBody(Do_ *TokenValue, Statements_ *ast.StatementsExpr) (*ast.StatementsExpr, error)
}

type ImproperExprStructReducer interface {
	// 731:2: improper_expr_struct -> pair: ...
	PairToImproperExprStruct(Expr_ ast.Expression, Comma_ *TokenValue, Expr_2 ast.Expression) (*ast.ImplicitStructExpr, error)

	// 732:2: improper_expr_struct -> add: ...
	AddToImproperExprStruct(ImproperExprStruct_ *ast.ImplicitStructExpr, Comma_ *TokenValue, Expr_ ast.Expression) (*ast.ImplicitStructExpr, error)
}

type SliceTypeExprReducer interface {
	// 750:35: slice_type_expr -> ...
	ToSliceTypeExpr(Lbracket_ *TokenValue, TypeExpr_ ast.TypeExpression, Rbracket_ *TokenValue) (ast.TypeExpression, error)
}

type ArrayTypeExprReducer interface {
	// 753:2: array_type_expr -> ...
	ToArrayTypeExpr(Lbracket_ *TokenValue, TypeExpr_ ast.TypeExpression, Comma_ *TokenValue, IntegerLiteral_ *TokenValue, Rbracket_ *TokenValue) (ast.TypeExpression, error)
}

type MapTypeExprReducer interface {
	// 756:33: map_type_expr -> ...
	ToMapTypeExpr(Lbracket_ *TokenValue, TypeExpr_ ast.TypeExpression, Colon_ *TokenValue, TypeExpr_2 ast.TypeExpression, Rbracket_ *TokenValue) (ast.TypeExpression, error)
}

type NamedTypeExprReducer interface {
	// 767:2: named_type_expr -> local: ...
	LocalToNamedTypeExpr(Identifier_ *TokenValue, OptionalGenericArguments_ *ast.TypeExpressionList) (ast.TypeExpression, error)

	// 768:2: named_type_expr -> external: ...
	ExternalToNamedTypeExpr(Identifier_ *TokenValue, Dot_ *TokenValue, Identifier_2 *TokenValue, OptionalGenericArguments_ *ast.TypeExpressionList) (ast.TypeExpression, error)
}

type InferredTypeExprReducer interface {
	// 770:38: inferred_type_expr -> ...
	ToInferredTypeExpr(Underscore_ *TokenValue) (ast.TypeExpression, error)
}

type RefTypeExprReducer interface {
	// 781:33: ref_type_expr -> ...
	ToRefTypeExpr(BitAnd_ *TokenValue, ReturnableTypeExpr_ ast.TypeExpression) (ast.TypeExpression, error)
}

type DefaultEnumOpTypeExprReducer interface {
	// 784:2: default_enum_op_type_expr -> ...
	ToDefaultEnumOpTypeExpr(DefaultEnumOp_ *TokenValue, ReturnableTypeExpr_ ast.TypeExpression) (ast.TypeExpression, error)
}

type UnaryTraitOpTypeExprReducer interface {
	// 791:2: unary_trait_op_type_expr -> ...
	ToUnaryTraitOpTypeExpr(UnaryTraitOp_ *TokenValue, ReturnableTypeExpr_ ast.TypeExpression) (ast.TypeExpression, error)
}

type BinaryTraitOpTypeExprReducer interface {
	// 804:2: binary_trait_op_type_expr -> ...
	ToBinaryTraitOpTypeExpr(TypeExpr_ ast.TypeExpression, BinaryTraitOp_ *TokenValue, ReturnableTypeExpr_ ast.TypeExpression) (ast.TypeExpression, error)
}

type TypeDefReducer interface {
	// 812:2: type_def -> definition: ...
	DefinitionToTypeDef(Type_ *TokenValue, Identifier_ *TokenValue, GenericParameters_ *ast.GenericParameterList, TypeExpr_ ast.TypeExpression) (ast.Statement, error)

	// 813:2: type_def -> constrained_def: ...
	ConstrainedDefToTypeDef(Type_ *TokenValue, Identifier_ *TokenValue, GenericParameters_ *ast.GenericParameterList, TypeExpr_ ast.TypeExpression, Implements_ *TokenValue, TypeExpr_2 ast.TypeExpression) (ast.Statement, error)
}

type AliasDefReducer interface {
	// 817:24: alias_def -> ...
	ToAliasDef(Alias_ *TokenValue, Identifier_ *TokenValue, GenericParameters_ *ast.GenericParameterList, TypeExpr_ ast.TypeExpression) (ast.Statement, error)
}

type GenericParameterReducer interface {
	// 825:2: generic_parameter -> unconstrained: ...
	UnconstrainedToGenericParameter(Identifier_ *TokenValue) (*ast.GenericParameter, error)

	// 826:2: generic_parameter -> constrained: ...
	ConstrainedToGenericParameter(Identifier_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.GenericParameter, error)
}

type GenericParametersReducer interface {
	// 829:2: generic_parameters -> generic: ...
	GenericToGenericParameters(Dollar_ *TokenValue, Lbracket_ *TokenValue, GenericParameterList_ *ast.GenericParameterList, Rbracket_ *TokenValue) (*ast.GenericParameterList, error)

	// 830:2: generic_parameters -> nil: ...
	NilToGenericParameters() (*ast.GenericParameterList, error)
}

type ProperGenericParameterListReducer interface {
	// 833:2: proper_generic_parameter_list -> add: ...
	AddToProperGenericParameterList(ProperGenericParameterList_ *ast.GenericParameterList, Comma_ *TokenValue, GenericParameter_ *ast.GenericParameter) (*ast.GenericParameterList, error)

	// 834:2: proper_generic_parameter_list -> generic_parameter: ...
	GenericParameterToProperGenericParameterList(GenericParameter_ *ast.GenericParameter) (*ast.GenericParameterList, error)
}

type GenericParameterListReducer interface {

	// 838:2: generic_parameter_list -> improper_implicit: ...
	ImproperImplicitToGenericParameterList(ProperGenericParameterList_ *ast.GenericParameterList, Newlines_ *TokenCount) (*ast.GenericParameterList, error)

	// 839:2: generic_parameter_list -> improper_explicit: ...
	ImproperExplicitToGenericParameterList(ProperGenericParameterList_ *ast.GenericParameterList, Comma_ *TokenValue) (*ast.GenericParameterList, error)

	// 840:2: generic_parameter_list -> nil: ...
	NilToGenericParameterList() (*ast.GenericParameterList, error)
}

type GenericArgumentsReducer interface {
	// 843:2: generic_arguments -> ...
	ToGenericArguments(Dollar_ *TokenValue, Lbracket_ *TokenValue, GenericArgumentList_ *ast.TypeExpressionList, Rbracket_ *TokenValue) (*ast.TypeExpressionList, error)
}

type OptionalGenericArgumentsReducer interface {

	// 847:2: optional_generic_arguments -> nil: ...
	NilToOptionalGenericArguments() (*ast.TypeExpressionList, error)
}

type ProperGenericArgumentListReducer interface {
	// 850:2: proper_generic_argument_list -> add: ...
	AddToProperGenericArgumentList(ProperGenericArgumentList_ *ast.TypeExpressionList, Comma_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.TypeExpressionList, error)

	// 851:2: proper_generic_argument_list -> type_expr: ...
	TypeExprToProperGenericArgumentList(TypeExpr_ ast.TypeExpression) (*ast.TypeExpressionList, error)
}

type GenericArgumentListReducer interface {

	// 855:2: generic_argument_list -> improper_implicit: ...
	ImproperImplicitToGenericArgumentList(ProperGenericArgumentList_ *ast.TypeExpressionList, Newlines_ *TokenCount) (*ast.TypeExpressionList, error)

	// 856:2: generic_argument_list -> improper_explicit: ...
	ImproperExplicitToGenericArgumentList(ProperGenericArgumentList_ *ast.TypeExpressionList, Comma_ *TokenValue) (*ast.TypeExpressionList, error)

	// 857:2: generic_argument_list -> nil: ...
	NilToGenericArgumentList() (*ast.TypeExpressionList, error)
}

type TypePropertyReducer interface {
	// 870:2: type_property -> unnamed_field: ...
	UnnamedFieldToTypeProperty(TypeExpr_ ast.TypeExpression) (ast.TypeProperty, error)

	// 871:2: type_property -> named_field: ...
	NamedFieldToTypeProperty(Identifier_ *TokenValue, TypeExpr_ ast.TypeExpression) (ast.TypeProperty, error)

	// 872:2: type_property -> padding_field: ...
	PaddingFieldToTypeProperty(Underscore_ *TokenValue, TypeExpr_ ast.TypeExpression) (ast.TypeProperty, error)

	// 873:2: type_property -> var_type_unnamed_field: ...
	VarTypeUnnamedFieldToTypeProperty(VarType_ *TokenValue, TypeExpr_ ast.TypeExpression) (ast.TypeProperty, error)

	// 874:2: type_property -> var_type_named_field: ...
	VarTypeNamedFieldToTypeProperty(VarType_ *TokenValue, Identifier_ *TokenValue, TypeExpr_ ast.TypeExpression) (ast.TypeProperty, error)

	// 875:2: type_property -> default_named_enum_field: ...
	DefaultNamedEnumFieldToTypeProperty(Default_ *TokenValue, Identifier_ *TokenValue, TypeExpr_ ast.TypeExpression) (ast.TypeProperty, error)

	// 876:2: type_property -> default_unnamed_enum_field: ...
	DefaultUnnamedEnumFieldToTypeProperty(Default_ *TokenValue, TypeExpr_ ast.TypeExpression) (ast.TypeProperty, error)
}

type ProperImplicitTypePropertiesReducer interface {
	// 880:2: proper_implicit_type_properties -> add: ...
	AddToProperImplicitTypeProperties(ProperImplicitTypeProperties_ *ast.TypePropertyList, Comma_ *TokenValue, TypeProperty_ ast.TypeProperty) (*ast.TypePropertyList, error)

	// 881:2: proper_implicit_type_properties -> type_property: ...
	TypePropertyToProperImplicitTypeProperties(TypeProperty_ ast.TypeProperty) (*ast.TypePropertyList, error)
}

type ImplicitTypePropertiesReducer interface {

	// 885:2: implicit_type_properties -> improper_implicit: ...
	ImproperImplicitToImplicitTypeProperties(ProperImplicitTypeProperties_ *ast.TypePropertyList, Newlines_ *TokenCount) (*ast.TypePropertyList, error)

	// 886:2: implicit_type_properties -> improper_explicit: ...
	ImproperExplicitToImplicitTypeProperties(ProperImplicitTypeProperties_ *ast.TypePropertyList, Comma_ *TokenValue) (*ast.TypePropertyList, error)

	// 887:2: implicit_type_properties -> nil: ...
	NilToImplicitTypeProperties() (*ast.TypePropertyList, error)
}

type ImplicitStructTypeExprReducer interface {
	// 890:2: implicit_struct_type_expr -> ...
	ToImplicitStructTypeExpr(Lparen_ *TokenValue, ImplicitTypeProperties_ *ast.TypePropertyList, Rparen_ *TokenValue) (ast.TypeExpression, error)
}

type ProperImplicitEnumTypePropertiesReducer interface {
	// 901:2: proper_implicit_enum_type_properties -> pair: ...
	PairToProperImplicitEnumTypeProperties(TypeProperty_ ast.TypeProperty, Or_ *TokenValue, TypeProperty_2 ast.TypeProperty) (*ast.TypePropertyList, error)

	// 902:2: proper_implicit_enum_type_properties -> add: ...
	AddToProperImplicitEnumTypeProperties(ProperImplicitEnumTypeProperties_ *ast.TypePropertyList, Or_ *TokenValue, TypeProperty_ ast.TypeProperty) (*ast.TypePropertyList, error)
}

type ImplicitEnumTypePropertiesReducer interface {

	// 907:2: implicit_enum_type_properties -> improper: ...
	ImproperToImplicitEnumTypeProperties(ProperImplicitEnumTypeProperties_ *ast.TypePropertyList, Newlines_ *TokenCount) (*ast.TypePropertyList, error)
}

type ImplicitEnumTypeExprReducer interface {
	// 910:2: implicit_enum_type_expr -> ...
	ToImplicitEnumTypeExpr(Lparen_ *TokenValue, ImplicitEnumTypeProperties_ *ast.TypePropertyList, Rparen_ *TokenValue) (ast.TypeExpression, error)
}

type ProperExplicitTypePropertiesReducer interface {
	// 913:2: proper_explicit_type_properties -> add_implicit: ...
	AddImplicitToProperExplicitTypeProperties(ProperExplicitTypeProperties_ *ast.TypePropertyList, Newlines_ *TokenCount, TypeProperty_ ast.TypeProperty) (*ast.TypePropertyList, error)

	// 914:2: proper_explicit_type_properties -> add_explicit: ...
	AddExplicitToProperExplicitTypeProperties(ProperExplicitTypeProperties_ *ast.TypePropertyList, Comma_ *TokenValue, TypeProperty_ ast.TypeProperty) (*ast.TypePropertyList, error)

	// 915:2: proper_explicit_type_properties -> type_property: ...
	TypePropertyToProperExplicitTypeProperties(TypeProperty_ ast.TypeProperty) (*ast.TypePropertyList, error)
}

type ExplicitTypePropertiesReducer interface {

	// 919:2: explicit_type_properties -> improper_implicit: ...
	ImproperImplicitToExplicitTypeProperties(ProperExplicitTypeProperties_ *ast.TypePropertyList, Newlines_ *TokenCount) (*ast.TypePropertyList, error)

	// 920:2: explicit_type_properties -> improper_explicit: ...
	ImproperExplicitToExplicitTypeProperties(ProperExplicitTypeProperties_ *ast.TypePropertyList, Comma_ *TokenValue) (*ast.TypePropertyList, error)

	// 921:2: explicit_type_properties -> nil: ...
	NilToExplicitTypeProperties() (*ast.TypePropertyList, error)
}

type PropertiesTypeExprReducer interface {
	// 924:2: properties_type_expr -> ...
	ToPropertiesTypeExpr(PropertiesKind_ *TokenValue, Lparen_ *TokenValue, ExplicitTypeProperties_ *ast.TypePropertyList, Rparen_ *TokenValue) (ast.TypeExpression, error)
}

type ReturnTypeReducer interface {

	// 938:2: return_type -> nil: ...
	NilToReturnType() (ast.TypeExpression, error)
}

type ParameterReducer interface {
	// 943:2: parameter -> named_arg: ...
	NamedArgToParameter(Identifier_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)

	// 944:2: parameter -> named_receiver: ...
	NamedReceiverToParameter(Identifier_ *TokenValue, Greater_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)

	// 945:2: parameter -> named_vararg: ...
	NamedVarargToParameter(Identifier_ *TokenValue, Ellipsis_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)

	// 946:2: parameter -> ignore_arg: ...
	IgnoreArgToParameter(Underscore_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)

	// 947:2: parameter -> ignore_receiver: ...
	IgnoreReceiverToParameter(Underscore_ *TokenValue, Greater_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)

	// 948:2: parameter -> ignore_vararg: ...
	IgnoreVarargToParameter(Underscore_ *TokenValue, Ellipsis_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)

	// 949:2: parameter -> unnamed_arg: ...
	UnnamedArgToParameter(TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)

	// 950:2: parameter -> unnamed_receiver: ...
	UnnamedReceiverToParameter(Greater_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)

	// 951:2: parameter -> unnamed_vararg: ...
	UnnamedVarargToParameter(Ellipsis_ *TokenValue, TypeExpr_ ast.TypeExpression) (*ast.Parameter, error)
}

type ProperParameterListReducer interface {
	// 954:2: proper_parameter_list -> add: ...
	AddToProperParameterList(ProperParameterList_ *ast.ParameterList, Comma_ *TokenValue, Parameter_ *ast.Parameter) (*ast.ParameterList, error)

	// 955:2: proper_parameter_list -> parameter: ...
	ParameterToProperParameterList(Parameter_ *ast.Parameter) (*ast.ParameterList, error)
}

type ParameterListReducer interface {

	// 959:2: parameter_list -> improper_implicit: ...
	ImproperImplicitToParameterList(ProperParameterList_ *ast.ParameterList, Newlines_ *TokenCount) (*ast.ParameterList, error)

	// 960:2: parameter_list -> improper_explicit: ...
	ImproperExplicitToParameterList(ProperParameterList_ *ast.ParameterList, Comma_ *TokenValue) (*ast.ParameterList, error)

	// 961:2: parameter_list -> nil: ...
	NilToParameterList() (*ast.ParameterList, error)
}

type ParametersReducer interface {
	// 963:26: parameters -> ...
	ToParameters(Lparen_ *TokenValue, ParameterList_ *ast.ParameterList, Rparen_ *TokenValue) (*ast.ParameterList, error)
}

type FuncSignatureReducer interface {
	// 970:2: func_signature -> anonymous: ...
	AnonymousToFuncSignature(Func_ *TokenValue, Parameters_ *ast.ParameterList, ReturnType_ ast.TypeExpression) (*ast.FuncSignature, error)

	// 971:2: func_signature -> named: ...
	NamedToFuncSignature(Func_ *TokenValue, Identifier_ *TokenValue, GenericParameters_ *ast.GenericParameterList, Parameters_ *ast.ParameterList, ReturnType_ ast.TypeExpression) (*ast.FuncSignature, error)
}

type FuncDefReducer interface {
	// 973:28: func_def -> ...
	ToFuncDef(FuncSignature_ *ast.FuncSignature, Statements_ *ast.StatementsExpr) (*ast.FuncDefinition, error)
}

type Reducer interface {
	DirectivesDeclarationReducer
	DirectivesReducer
	DirectiveReducer
	DirectiveExprsReducer
	ProperDirectiveExprsReducer
	DirectiveExprReducer
	DirectiveAndExprReducer
	DirectiveNotExprReducer
	DirectiveAtomExprReducer
	DirectiveValueExprReducer
	FloatingCommentReducer
	BranchStmtReducer
	OptionalStatementReducer
	UnsafeStmtReducer
	JumpStmtReducer
	AssignStmtReducer
	ImportStmtReducer
	ProperImportClausesReducer
	ImportClausesReducer
	ImportClauseReducer
	BlockAddrDeclStmtReducer
	BlockAddrDeclListReducer
	ProperBlockAddrDeclListReducer
	BlockAddrDeclItemReducer
	AddrDeclPatternReducer
	AssignToAddrPatternReducer
	CasePatternsReducer
	AssignSelectablePatternReducer
	SwitchableCasePatternsReducer
	EnumPatternReducer
	ParseErrorExprReducer
	LiteralExprReducer
	NamedExprReducer
	InitializeExprReducer
	ImplicitStructExprReducer
	AccessExprReducer
	IndexExprReducer
	AsExprReducer
	ParameterizedExprReducer
	CallExprReducer
	MakeExprReducer
	MakeExprSizeReducer
	MakeExprHeadReducer
	ProperArgumentsReducer
	ArgumentsReducer
	ArgumentReducer
	ColonExprReducer
	PostfixUnaryExprReducer
	PrefixUnaryExprReducer
	BinaryMulExprReducer
	BinaryAddExprReducer
	BinaryCmpExprReducer
	BinaryAndExprReducer
	BinaryOrExprReducer
	SendExprReducer
	RecvExprReducer
	BinaryAssignOpExprReducer
	ControlFlowExprReducer
	StatementsReducer
	ProperStatementListReducer
	StatementListReducer
	IfElseExprReducer
	IfElifExprReducer
	IfOnlyExprReducer
	CasePatternExprReducer
	SwitchExprBodyReducer
	SelectExprBodyReducer
	LoopExprBodyReducer
	LoopBodyReducer
	ImproperExprStructReducer
	SliceTypeExprReducer
	ArrayTypeExprReducer
	MapTypeExprReducer
	NamedTypeExprReducer
	InferredTypeExprReducer
	RefTypeExprReducer
	DefaultEnumOpTypeExprReducer
	UnaryTraitOpTypeExprReducer
	BinaryTraitOpTypeExprReducer
	TypeDefReducer
	AliasDefReducer
	GenericParameterReducer
	GenericParametersReducer
	ProperGenericParameterListReducer
	GenericParameterListReducer
	GenericArgumentsReducer
	OptionalGenericArgumentsReducer
	ProperGenericArgumentListReducer
	GenericArgumentListReducer
	TypePropertyReducer
	ProperImplicitTypePropertiesReducer
	ImplicitTypePropertiesReducer
	ImplicitStructTypeExprReducer
	ProperImplicitEnumTypePropertiesReducer
	ImplicitEnumTypePropertiesReducer
	ImplicitEnumTypeExprReducer
	ProperExplicitTypePropertiesReducer
	ExplicitTypePropertiesReducer
	PropertiesTypeExprReducer
	ReturnTypeReducer
	ParameterReducer
	ProperParameterListReducer
	ParameterListReducer
	ParametersReducer
	FuncSignatureReducer
	FuncDefReducer
}

type ParseErrorHandler interface {
	Error(nextToken lexutil.Token[SymbolId], parseStack _Stack) error
}

type DefaultParseErrorHandler struct{}

func (DefaultParseErrorHandler) Error(nextToken lexutil.Token[SymbolId], stack _Stack) error {
	return lexutil.NewLocationError(
		nextToken.Loc(),
		"syntax error: unexpected symbol %s. expecting %v",
		nextToken.Id(),
		ExpectedTerminals(stack[len(stack)-1].StateId))
}

func ExpectedTerminals(id _StateId) []SymbolId {
	switch id {
	case _State2:
		return []SymbolId{CommentGroupsToken, IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, CaseToken, DefaultToken, ForToken, DoToken, SelectToken, ReturnToken, BreakToken, ContinueToken, FallthroughToken, ImportToken, UnsafeToken, TypeToken, AliasToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, PoundToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State3:
		return []SymbolId{LbraceToken}
	case _State4:
		return []SymbolId{_EndMarker}
	case _State5:
		return []SymbolId{_EndMarker}
	case _State6:
		return []SymbolId{_EndMarker}
	case _State7:
		return []SymbolId{IdentifierToken}
	case _State8:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State9:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, DotToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State10:
		return []SymbolId{ColonToken}
	case _State11:
		return []SymbolId{LbraceToken}
	case _State12:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State13:
		return []SymbolId{IdentifierToken, LparenToken}
	case _State14:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State16:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, CaseToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State17:
		return []SymbolId{StringLiteralToken, IdentifierToken, UnderscoreToken, LparenToken, DotToken}
	case _State19:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State21:
		return []SymbolId{LparenToken}
	case _State22:
		return []SymbolId{LbracketToken}
	case _State23:
		return []SymbolId{LbraceToken}
	case _State24:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State25:
		return []SymbolId{IdentifierToken}
	case _State26:
		return []SymbolId{LessToken}
	case _State32:
		return []SymbolId{LbraceToken}
	case _State35:
		return []SymbolId{LparenToken}
	case _State38:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State39:
		return []SymbolId{RparenToken, CommaToken}
	case _State42:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State44:
		return []SymbolId{LparenToken}
	case _State47:
		return []SymbolId{IdentifierToken, UnderscoreToken, LparenToken, DollarToken}
	case _State50:
		return []SymbolId{IdentifierToken, UnderscoreToken, LparenToken}
	case _State51:
		return []SymbolId{ColonToken}
	case _State53:
		return []SymbolId{IdentifierToken, UnderscoreToken, LparenToken}
	case _State56:
		return []SymbolId{InToken}
	case _State60:
		return []SymbolId{IfToken, SwitchToken, ForToken, DoToken, SelectToken, LbraceToken}
	case _State61:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, DotToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State62:
		return []SymbolId{LbraceToken}
	case _State63:
		return []SymbolId{StringLiteralToken}
	case _State64:
		return []SymbolId{StringLiteralToken}
	case _State65:
		return []SymbolId{StringLiteralToken, IdentifierToken, UnderscoreToken, DotToken}
	case _State66:
		return []SymbolId{StringLiteralToken}
	case _State67:
		return []SymbolId{RbraceToken}
	case _State68:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State71:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State72:
		return []SymbolId{RbracketToken, CommaToken, ColonToken, AddToken, SubToken, MulToken}
	case _State73:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State76:
		return []SymbolId{RparenToken}
	case _State80:
		return []SymbolId{LbracketToken}
	case _State81:
		return []SymbolId{IdentifierToken}
	case _State82:
		return []SymbolId{LbraceToken}
	case _State84:
		return []SymbolId{IdentifierToken}
	case _State85:
		return []SymbolId{LbracketToken}
	case _State86:
		return []SymbolId{IdentifierToken, AsToken}
	case _State87:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ColonToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State89:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State90:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State91:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State92:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State93:
		return []SymbolId{IfToken, LbraceToken}
	case _State94:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State96:
		return []SymbolId{IdentifierToken}
	case _State97:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State99:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, RparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State100:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State101:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State105:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State106:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State107:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, MakeToken, NotToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, ParseErrorToken}
	case _State108:
		return []SymbolId{LparenToken}
	case _State110:
		return []SymbolId{LbracketToken}
	case _State111:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State115:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State116:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, DotToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State117:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State118:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State119:
		return []SymbolId{LparenToken}
	case _State120:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State121:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State124:
		return []SymbolId{RparenToken}
	case _State127:
		return []SymbolId{CommaToken, AssignToken}
	case _State128:
		return []SymbolId{RparenToken}
	case _State130:
		return []SymbolId{IdentifierToken}
	case _State131:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State135:
		return []SymbolId{RparenToken}
	case _State136:
		return []SymbolId{RparenToken}
	case _State141:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State142:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State143:
		return []SymbolId{IntegerLiteralToken}
	case _State144:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State145:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State149:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State150:
		return []SymbolId{CommaToken}
	case _State152:
		return []SymbolId{RbracketToken, SemicolonToken}
	case _State153:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State154:
		return []SymbolId{GreaterToken}
	case _State156:
		return []SymbolId{LparenToken}
	case _State159:
		return []SymbolId{RbracketToken}
	case _State160:
		return []SymbolId{RparenToken}
	case _State164:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, CaseToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State165:
		return []SymbolId{RparenToken}
	case _State167:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State168:
		return []SymbolId{RparenToken, CommaToken}
	case _State170:
		return []SymbolId{RparenToken}
	case _State178:
		return []SymbolId{DoToken}
	case _State179:
		return []SymbolId{DoToken}
	case _State183:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State184:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State186:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State187:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State190:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State198:
		return []SymbolId{IdentifierToken, UnderscoreToken, DefaultToken, StructToken, EnumToken, TraitToken, FuncToken, VarToken, LetToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State200:
		return []SymbolId{IdentifierToken, UnderscoreToken, DefaultToken, StructToken, EnumToken, TraitToken, FuncToken, VarToken, LetToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State203:
		return []SymbolId{RbracketToken, AddToken, SubToken, MulToken}
	case _State204:
		return []SymbolId{RbracketToken}
	case _State205:
		return []SymbolId{RbracketToken, ColonToken, AddToken, SubToken, MulToken}
	case _State206:
		return []SymbolId{IdentifierToken}
	case _State207:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, NotToken, LparenToken}
	case _State208:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, LparenToken}
	case _State212:
		return []SymbolId{IdentifierToken}
	case _State214:
		return []SymbolId{StringLiteralToken}
	case _State215:
		return []SymbolId{RbracketToken}
	case _State218:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State219:
		return []SymbolId{LbraceToken}
	case _State220:
		return []SymbolId{RparenToken}
	case _State223:
		return []SymbolId{RparenToken}
	case _State224:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, AssignToken, BitAndToken}
	case _State227:
		return []SymbolId{RbracketToken}
	case _State236:
		return []SymbolId{OrToken, RparenToken}
	case _State237:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, NotToken, LparenToken}
	case _State238:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, NotToken, LparenToken}
	case _State239:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, NotToken, LparenToken}
	case _State240:
		return []SymbolId{IdentifierToken, UnderscoreToken, StructToken, EnumToken, TraitToken, FuncToken, LparenToken, LbracketToken, QuestionToken, ExclaimToken, TildeToken, TildeTildeToken, BitAndToken}
	case _State242:
		return []SymbolId{RparenToken, AddToken, SubToken, MulToken}
	case _State243:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	case _State254:
		return []SymbolId{IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, SwitchToken, ForToken, DoToken, SelectToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, MakeToken, NotToken, LbraceToken, LparenToken, LbracketToken, ArrowToken, AddToken, SubToken, MulToken, BitAndToken, BitXorToken, GreaterToken, ParseErrorToken}
	}

	return nil
}

func ParseSource(lexer lexutil.Lexer[lexutil.Token[SymbolId]], reducer Reducer) (*ast.StatementList, error) {

	return ParseSourceWithCustomErrorHandler(
		lexer,
		reducer,
		DefaultParseErrorHandler{})
}

func ParseSourceWithCustomErrorHandler(
	lexer lexutil.Lexer[lexutil.Token[SymbolId]],
	reducer Reducer,
	errHandler ParseErrorHandler,
) (
	*ast.StatementList,
	error,
) {
	item, err := _Parse(lexer, reducer, errHandler, _State1)
	if err != nil {
		var errRetVal *ast.StatementList
		return errRetVal, err
	}
	return item.StatementList, nil
}

func ParseStatement(lexer lexutil.Lexer[lexutil.Token[SymbolId]], reducer Reducer) (ast.Statement, error) {

	return ParseStatementWithCustomErrorHandler(
		lexer,
		reducer,
		DefaultParseErrorHandler{})
}

func ParseStatementWithCustomErrorHandler(
	lexer lexutil.Lexer[lexutil.Token[SymbolId]],
	reducer Reducer,
	errHandler ParseErrorHandler,
) (
	ast.Statement,
	error,
) {
	item, err := _Parse(lexer, reducer, errHandler, _State2)
	if err != nil {
		var errRetVal ast.Statement
		return errRetVal, err
	}
	return item.Statement, nil
}

func ParseStatements(lexer lexutil.Lexer[lexutil.Token[SymbolId]], reducer Reducer) (*ast.StatementsExpr, error) {

	return ParseStatementsWithCustomErrorHandler(
		lexer,
		reducer,
		DefaultParseErrorHandler{})
}

func ParseStatementsWithCustomErrorHandler(
	lexer lexutil.Lexer[lexutil.Token[SymbolId]],
	reducer Reducer,
	errHandler ParseErrorHandler,
) (
	*ast.StatementsExpr,
	error,
) {
	item, err := _Parse(lexer, reducer, errHandler, _State3)
	if err != nil {
		var errRetVal *ast.StatementsExpr
		return errRetVal, err
	}
	return item.StatementsExpr, nil
}

// ================================================================
// Parser internal implementation
// User should normally avoid directly accessing the following code
// ================================================================

func _Parse(
	lexer lexutil.Lexer[lexutil.Token[SymbolId]],
	reducer Reducer,
	errHandler ParseErrorHandler,
	startState _StateId,
) (
	*_StackItem,
	error,
) {
	stateStack := _Stack{
		// Note: we don't have to populate the start symbol since its value
		// is never accessed.
		&_StackItem{startState, nil},
	}

	symbolStack := &_PseudoSymbolStack{lexer: lexer}

	for {
		nextSymbol, err := symbolStack.Top()
		if err != nil {
			return nil, err
		}

		action, ok := _ActionTable.Get(
			stateStack[len(stateStack)-1].StateId,
			nextSymbol.Id())
		if !ok {
			return nil, errHandler.Error(nextSymbol, stateStack)
		}

		if action.ActionType == _ShiftAction {
			stateStack = append(stateStack, action.ShiftItem(nextSymbol))

			_, err = symbolStack.Pop()
			if err != nil {
				return nil, err
			}
		} else if action.ActionType == _ReduceAction {
			var reduceSymbol *Symbol
			stateStack, reduceSymbol, err = action.ReduceSymbol(
				reducer,
				stateStack)
			if err != nil {
				return nil, err
			}

			symbolStack.Push(reduceSymbol)
		} else if action.ActionType == _ShiftAndReduceAction {
			stateStack = append(stateStack, action.ShiftItem(nextSymbol))

			_, err = symbolStack.Pop()
			if err != nil {
				return nil, err
			}

			var reduceSymbol *Symbol
			stateStack, reduceSymbol, err = action.ReduceSymbol(
				reducer,
				stateStack)
			if err != nil {
				return nil, err
			}

			symbolStack.Push(reduceSymbol)
		} else if action.ActionType == _AcceptAction {
			if len(stateStack) != 2 {
				panic("This should never happen")
			}
			return stateStack[1], nil
		} else {
			panic("Unknown action type: " + action.ActionType.String())
		}
	}
}

func (i SymbolId) String() string {
	switch i {
	case _EndMarker:
		return "$"
	case _WildcardMarker:
		return "*"
	case NewlinesToken:
		return "NEWLINES"
	case CommentGroupsToken:
		return "COMMENT_GROUPS"
	case IntegerLiteralToken:
		return "INTEGER_LITERAL"
	case FloatLiteralToken:
		return "FLOAT_LITERAL"
	case RuneLiteralToken:
		return "RUNE_LITERAL"
	case StringLiteralToken:
		return "STRING_LITERAL"
	case IdentifierToken:
		return "IDENTIFIER"
	case UnderscoreToken:
		return "UNDERSCORE"
	case TrueToken:
		return "TRUE"
	case FalseToken:
		return "FALSE"
	case IfToken:
		return "IF"
	case ElseToken:
		return "ELSE"
	case SwitchToken:
		return "SWITCH"
	case CaseToken:
		return "CASE"
	case DefaultToken:
		return "DEFAULT"
	case ForToken:
		return "FOR"
	case DoToken:
		return "DO"
	case InToken:
		return "IN"
	case SelectToken:
		return "SELECT"
	case ReturnToken:
		return "RETURN"
	case BreakToken:
		return "BREAK"
	case ContinueToken:
		return "CONTINUE"
	case FallthroughToken:
		return "FALLTHROUGH"
	case ImportToken:
		return "IMPORT"
	case UnsafeToken:
		return "UNSAFE"
	case TypeToken:
		return "TYPE"
	case ImplementsToken:
		return "IMPLEMENTS"
	case AliasToken:
		return "ALIAS"
	case StructToken:
		return "STRUCT"
	case EnumToken:
		return "ENUM"
	case TraitToken:
		return "TRAIT"
	case FuncToken:
		return "FUNC"
	case AsyncToken:
		return "ASYNC"
	case DeferToken:
		return "DEFER"
	case VarToken:
		return "VAR"
	case LetToken:
		return "LET"
	case AsToken:
		return "AS"
	case MakeToken:
		return "MAKE"
	case NotToken:
		return "NOT"
	case AndToken:
		return "AND"
	case OrToken:
		return "OR"
	case PoundToken:
		return "POUND"
	case AtToken:
		return "AT"
	case LbraceToken:
		return "LBRACE"
	case RbraceToken:
		return "RBRACE"
	case LparenToken:
		return "LPAREN"
	case RparenToken:
		return "RPAREN"
	case LbracketToken:
		return "LBRACKET"
	case RbracketToken:
		return "RBRACKET"
	case DotToken:
		return "DOT"
	case CommaToken:
		return "COMMA"
	case QuestionToken:
		return "QUESTION"
	case SemicolonToken:
		return "SEMICOLON"
	case ColonToken:
		return "COLON"
	case ExclaimToken:
		return "EXCLAIM"
	case DollarToken:
		return "DOLLAR"
	case EllipsisToken:
		return "ELLIPSIS"
	case TildeToken:
		return "TILDE"
	case TildeTildeToken:
		return "TILDE_TILDE"
	case AssignToken:
		return "ASSIGN"
	case ArrowToken:
		return "ARROW"
	case AddAssignToken:
		return "ADD_ASSIGN"
	case SubAssignToken:
		return "SUB_ASSIGN"
	case MulAssignToken:
		return "MUL_ASSIGN"
	case DivAssignToken:
		return "DIV_ASSIGN"
	case ModAssignToken:
		return "MOD_ASSIGN"
	case AddOneAssignToken:
		return "ADD_ONE_ASSIGN"
	case SubOneAssignToken:
		return "SUB_ONE_ASSIGN"
	case BitAndAssignToken:
		return "BIT_AND_ASSIGN"
	case BitOrAssignToken:
		return "BIT_OR_ASSIGN"
	case BitXorAssignToken:
		return "BIT_XOR_ASSIGN"
	case BitLshiftAssignToken:
		return "BIT_LSHIFT_ASSIGN"
	case BitRshiftAssignToken:
		return "BIT_RSHIFT_ASSIGN"
	case AddToken:
		return "ADD"
	case SubToken:
		return "SUB"
	case MulToken:
		return "MUL"
	case DivToken:
		return "DIV"
	case ModToken:
		return "MOD"
	case BitAndToken:
		return "BIT_AND"
	case BitXorToken:
		return "BIT_XOR"
	case BitOrToken:
		return "BIT_OR"
	case BitLshiftToken:
		return "BIT_LSHIFT"
	case BitRshiftToken:
		return "BIT_RSHIFT"
	case EqualToken:
		return "EQUAL"
	case NotEqualToken:
		return "NOT_EQUAL"
	case LessToken:
		return "LESS"
	case LessOrEqualToken:
		return "LESS_OR_EQUAL"
	case GreaterToken:
		return "GREATER"
	case GreaterOrEqualToken:
		return "GREATER_OR_EQUAL"
	case ParseErrorToken:
		return "PARSE_ERROR"
	case SourceType:
		return "source"
	case DirectivesDeclarationType:
		return "directives_declaration"
	case DirectivesType:
		return "directives"
	case DirectiveType:
		return "directive"
	case DirectiveExprsType:
		return "directive_exprs"
	case ProperDirectiveExprsType:
		return "proper_directive_exprs"
	case DirectiveExprType:
		return "directive_expr"
	case DirectiveAndExprType:
		return "directive_and_expr"
	case DirectiveNotExprType:
		return "directive_not_expr"
	case DirectiveAtomExprType:
		return "directive_atom_expr"
	case DirectiveValueExprType:
		return "directive_value_expr"
	case DirectiveValueType:
		return "directive_value"
	case StatementType:
		return "statement"
	case FloatingCommentType:
		return "floating_comment"
	case BranchStmtType:
		return "branch_stmt"
	case OptionalStatementType:
		return "optional_statement"
	case UnsafeStmtType:
		return "unsafe_stmt"
	case JumpStmtType:
		return "jump_stmt"
	case JumpOpType:
		return "jump_op"
	case AssignStmtType:
		return "assign_stmt"
	case ImportStmtType:
		return "import_stmt"
	case ProperImportClausesType:
		return "proper_import_clauses"
	case ImportClausesType:
		return "import_clauses"
	case ImportClauseType:
		return "import_clause"
	case BlockAddrDeclStmtType:
		return "block_addr_decl_stmt"
	case BlockAddrDeclListType:
		return "block_addr_decl_list"
	case ProperBlockAddrDeclListType:
		return "proper_block_addr_decl_list"
	case BlockAddrDeclItemType:
		return "block_addr_decl_item"
	case AddrDeclPatternType:
		return "addr_decl_pattern"
	case AssignToAddrPatternType:
		return "assign_to_addr_pattern"
	case VarTypeType:
		return "var_type"
	case NewAddressableType:
		return "new_addressable"
	case CasePatternsType:
		return "case_patterns"
	case AssignSelectablePatternType:
		return "assign_selectable_pattern"
	case SwitchableCasePatternsType:
		return "switchable_case_patterns"
	case SwitchableCasePatternType:
		return "switchable_case_pattern"
	case EnumPatternType:
		return "enum_pattern"
	case AtomExprType:
		return "atom_expr"
	case ParseErrorExprType:
		return "parse_error_expr"
	case LiteralExprType:
		return "literal_expr"
	case NamedExprType:
		return "named_expr"
	case InitializeExprType:
		return "initialize_expr"
	case ImplicitStructExprType:
		return "implicit_struct_expr"
	case AccessibleExprType:
		return "accessible_expr"
	case AccessExprType:
		return "access_expr"
	case IndexExprType:
		return "index_expr"
	case IndexType:
		return "index"
	case AsExprType:
		return "as_expr"
	case ParameterizedExprType:
		return "parameterized_expr"
	case CallExprType:
		return "call_expr"
	case MakeExprType:
		return "make_expr"
	case MakeExprSizeType:
		return "make_expr_size"
	case MakeExprHeadType:
		return "make_expr_head"
	case ProperArgumentsType:
		return "proper_arguments"
	case ArgumentsType:
		return "arguments"
	case ArgumentType:
		return "argument"
	case ColonExprType:
		return "colon_expr"
	case PostfixableExprType:
		return "postfixable_expr"
	case PostfixUnaryExprType:
		return "postfix_unary_expr"
	case PostfixUnaryOpType:
		return "postfix_unary_op"
	case PrefixableExprType:
		return "prefixable_expr"
	case PrefixUnaryExprType:
		return "prefix_unary_expr"
	case PrefixUnaryOpType:
		return "prefix_unary_op"
	case MulExprType:
		return "mul_expr"
	case BinaryMulExprType:
		return "binary_mul_expr"
	case MulOpType:
		return "mul_op"
	case AddExprType:
		return "add_expr"
	case BinaryAddExprType:
		return "binary_add_expr"
	case AddOpType:
		return "add_op"
	case CmpExprType:
		return "cmp_expr"
	case BinaryCmpExprType:
		return "binary_cmp_expr"
	case CmpOpType:
		return "cmp_op"
	case AndExprType:
		return "and_expr"
	case BinaryAndExprType:
		return "binary_and_expr"
	case OrExprType:
		return "or_expr"
	case BinaryOrExprType:
		return "binary_or_expr"
	case SendRecvExprType:
		return "send_recv_expr"
	case SendExprType:
		return "send_expr"
	case RecvExprType:
		return "recv_expr"
	case AssignOpExprType:
		return "assign_op_expr"
	case BinaryAssignOpExprType:
		return "binary_assign_op_expr"
	case BinaryAssignOpType:
		return "binary_assign_op"
	case UnlabelledControlFlowExprType:
		return "unlabelled_control_flow_expr"
	case ControlFlowExprType:
		return "control_flow_expr"
	case ExprType:
		return "expr"
	case StatementsType:
		return "statements"
	case ProperStatementListType:
		return "proper_statement_list"
	case StatementListType:
		return "statement_list"
	case IfElseExprType:
		return "if_else_expr"
	case IfElifExprType:
		return "if_elif_expr"
	case IfOnlyExprType:
		return "if_only_expr"
	case ConditionType:
		return "condition"
	case CasePatternExprType:
		return "case_pattern_expr"
	case SwitchExprBodyType:
		return "switch_expr_body"
	case SelectExprBodyType:
		return "select_expr_body"
	case LoopExprBodyType:
		return "loop_expr_body"
	case LoopBodyType:
		return "loop_body"
	case ReturnableExprType:
		return "returnable_expr"
	case ImproperExprStructType:
		return "improper_expr_struct"
	case VariableSizedTypeExprType:
		return "variable_sized_type_expr"
	case InitializableTypeExprType:
		return "initializable_type_expr"
	case SliceTypeExprType:
		return "slice_type_expr"
	case ArrayTypeExprType:
		return "array_type_expr"
	case MapTypeExprType:
		return "map_type_expr"
	case AtomTypeExprType:
		return "atom_type_expr"
	case NamedTypeExprType:
		return "named_type_expr"
	case InferredTypeExprType:
		return "inferred_type_expr"
	case ReturnableTypeExprType:
		return "returnable_type_expr"
	case RefTypeExprType:
		return "ref_type_expr"
	case DefaultEnumOpTypeExprType:
		return "default_enum_op_type_expr"
	case DefaultEnumOpType:
		return "default_enum_op"
	case UnaryTraitOpTypeExprType:
		return "unary_trait_op_type_expr"
	case UnaryTraitOpType:
		return "unary_trait_op"
	case TypeExprType:
		return "type_expr"
	case BinaryTraitOpTypeExprType:
		return "binary_trait_op_type_expr"
	case BinaryTraitOpType:
		return "binary_trait_op"
	case TypeDefType:
		return "type_def"
	case AliasDefType:
		return "alias_def"
	case GenericParameterType:
		return "generic_parameter"
	case GenericParametersType:
		return "generic_parameters"
	case ProperGenericParameterListType:
		return "proper_generic_parameter_list"
	case GenericParameterListType:
		return "generic_parameter_list"
	case GenericArgumentsType:
		return "generic_arguments"
	case OptionalGenericArgumentsType:
		return "optional_generic_arguments"
	case ProperGenericArgumentListType:
		return "proper_generic_argument_list"
	case GenericArgumentListType:
		return "generic_argument_list"
	case TypePropertyType:
		return "type_property"
	case ProperImplicitTypePropertiesType:
		return "proper_implicit_type_properties"
	case ImplicitTypePropertiesType:
		return "implicit_type_properties"
	case ImplicitStructTypeExprType:
		return "implicit_struct_type_expr"
	case ProperImplicitEnumTypePropertiesType:
		return "proper_implicit_enum_type_properties"
	case ImplicitEnumTypePropertiesType:
		return "implicit_enum_type_properties"
	case ImplicitEnumTypeExprType:
		return "implicit_enum_type_expr"
	case ProperExplicitTypePropertiesType:
		return "proper_explicit_type_properties"
	case ExplicitTypePropertiesType:
		return "explicit_type_properties"
	case PropertiesTypeExprType:
		return "properties_type_expr"
	case PropertiesKindType:
		return "properties_kind"
	case ReturnTypeType:
		return "return_type"
	case ParameterType:
		return "parameter"
	case ProperParameterListType:
		return "proper_parameter_list"
	case ParameterListType:
		return "parameter_list"
	case ParametersType:
		return "parameters"
	case FuncSignatureType:
		return "func_signature"
	case FuncDefType:
		return "func_def"
	default:
		return fmt.Sprintf("?unknown symbol %d?", int(i))
	}
}

const (
	_EndMarker      = SymbolId(0)
	_WildcardMarker = SymbolId(-1)

	SourceType                           = SymbolId(346)
	DirectivesDeclarationType            = SymbolId(347)
	DirectivesType                       = SymbolId(348)
	DirectiveType                        = SymbolId(349)
	DirectiveExprsType                   = SymbolId(350)
	ProperDirectiveExprsType             = SymbolId(351)
	DirectiveExprType                    = SymbolId(352)
	DirectiveAndExprType                 = SymbolId(353)
	DirectiveNotExprType                 = SymbolId(354)
	DirectiveAtomExprType                = SymbolId(355)
	DirectiveValueExprType               = SymbolId(356)
	DirectiveValueType                   = SymbolId(357)
	StatementType                        = SymbolId(358)
	FloatingCommentType                  = SymbolId(359)
	BranchStmtType                       = SymbolId(360)
	OptionalStatementType                = SymbolId(361)
	UnsafeStmtType                       = SymbolId(362)
	JumpStmtType                         = SymbolId(363)
	JumpOpType                           = SymbolId(364)
	AssignStmtType                       = SymbolId(365)
	ImportStmtType                       = SymbolId(366)
	ProperImportClausesType              = SymbolId(367)
	ImportClausesType                    = SymbolId(368)
	ImportClauseType                     = SymbolId(369)
	BlockAddrDeclStmtType                = SymbolId(370)
	BlockAddrDeclListType                = SymbolId(371)
	ProperBlockAddrDeclListType          = SymbolId(372)
	BlockAddrDeclItemType                = SymbolId(373)
	AddrDeclPatternType                  = SymbolId(374)
	AssignToAddrPatternType              = SymbolId(375)
	VarTypeType                          = SymbolId(376)
	NewAddressableType                   = SymbolId(377)
	CasePatternsType                     = SymbolId(378)
	AssignSelectablePatternType          = SymbolId(379)
	SwitchableCasePatternsType           = SymbolId(380)
	SwitchableCasePatternType            = SymbolId(381)
	EnumPatternType                      = SymbolId(382)
	AtomExprType                         = SymbolId(383)
	ParseErrorExprType                   = SymbolId(384)
	LiteralExprType                      = SymbolId(385)
	NamedExprType                        = SymbolId(386)
	InitializeExprType                   = SymbolId(387)
	ImplicitStructExprType               = SymbolId(388)
	AccessibleExprType                   = SymbolId(389)
	AccessExprType                       = SymbolId(390)
	IndexExprType                        = SymbolId(391)
	IndexType                            = SymbolId(392)
	AsExprType                           = SymbolId(393)
	ParameterizedExprType                = SymbolId(394)
	CallExprType                         = SymbolId(395)
	MakeExprType                         = SymbolId(396)
	MakeExprSizeType                     = SymbolId(397)
	MakeExprHeadType                     = SymbolId(398)
	ProperArgumentsType                  = SymbolId(399)
	ArgumentsType                        = SymbolId(400)
	ArgumentType                         = SymbolId(401)
	ColonExprType                        = SymbolId(402)
	PostfixableExprType                  = SymbolId(403)
	PostfixUnaryExprType                 = SymbolId(404)
	PostfixUnaryOpType                   = SymbolId(405)
	PrefixableExprType                   = SymbolId(406)
	PrefixUnaryExprType                  = SymbolId(407)
	PrefixUnaryOpType                    = SymbolId(408)
	MulExprType                          = SymbolId(409)
	BinaryMulExprType                    = SymbolId(410)
	MulOpType                            = SymbolId(411)
	AddExprType                          = SymbolId(412)
	BinaryAddExprType                    = SymbolId(413)
	AddOpType                            = SymbolId(414)
	CmpExprType                          = SymbolId(415)
	BinaryCmpExprType                    = SymbolId(416)
	CmpOpType                            = SymbolId(417)
	AndExprType                          = SymbolId(418)
	BinaryAndExprType                    = SymbolId(419)
	OrExprType                           = SymbolId(420)
	BinaryOrExprType                     = SymbolId(421)
	SendRecvExprType                     = SymbolId(422)
	SendExprType                         = SymbolId(423)
	RecvExprType                         = SymbolId(424)
	AssignOpExprType                     = SymbolId(425)
	BinaryAssignOpExprType               = SymbolId(426)
	BinaryAssignOpType                   = SymbolId(427)
	UnlabelledControlFlowExprType        = SymbolId(428)
	ControlFlowExprType                  = SymbolId(429)
	ExprType                             = SymbolId(430)
	StatementsType                       = SymbolId(431)
	ProperStatementListType              = SymbolId(432)
	StatementListType                    = SymbolId(433)
	IfElseExprType                       = SymbolId(434)
	IfElifExprType                       = SymbolId(435)
	IfOnlyExprType                       = SymbolId(436)
	ConditionType                        = SymbolId(437)
	CasePatternExprType                  = SymbolId(438)
	SwitchExprBodyType                   = SymbolId(439)
	SelectExprBodyType                   = SymbolId(440)
	LoopExprBodyType                     = SymbolId(441)
	LoopBodyType                         = SymbolId(442)
	ReturnableExprType                   = SymbolId(443)
	ImproperExprStructType               = SymbolId(444)
	VariableSizedTypeExprType            = SymbolId(445)
	InitializableTypeExprType            = SymbolId(446)
	SliceTypeExprType                    = SymbolId(447)
	ArrayTypeExprType                    = SymbolId(448)
	MapTypeExprType                      = SymbolId(449)
	AtomTypeExprType                     = SymbolId(450)
	NamedTypeExprType                    = SymbolId(451)
	InferredTypeExprType                 = SymbolId(452)
	ReturnableTypeExprType               = SymbolId(453)
	RefTypeExprType                      = SymbolId(454)
	DefaultEnumOpTypeExprType            = SymbolId(455)
	DefaultEnumOpType                    = SymbolId(456)
	UnaryTraitOpTypeExprType             = SymbolId(457)
	UnaryTraitOpType                     = SymbolId(458)
	TypeExprType                         = SymbolId(459)
	BinaryTraitOpTypeExprType            = SymbolId(460)
	BinaryTraitOpType                    = SymbolId(461)
	TypeDefType                          = SymbolId(462)
	AliasDefType                         = SymbolId(463)
	GenericParameterType                 = SymbolId(464)
	GenericParametersType                = SymbolId(465)
	ProperGenericParameterListType       = SymbolId(466)
	GenericParameterListType             = SymbolId(467)
	GenericArgumentsType                 = SymbolId(468)
	OptionalGenericArgumentsType         = SymbolId(469)
	ProperGenericArgumentListType        = SymbolId(470)
	GenericArgumentListType              = SymbolId(471)
	TypePropertyType                     = SymbolId(472)
	ProperImplicitTypePropertiesType     = SymbolId(473)
	ImplicitTypePropertiesType           = SymbolId(474)
	ImplicitStructTypeExprType           = SymbolId(475)
	ProperImplicitEnumTypePropertiesType = SymbolId(476)
	ImplicitEnumTypePropertiesType       = SymbolId(477)
	ImplicitEnumTypeExprType             = SymbolId(478)
	ProperExplicitTypePropertiesType     = SymbolId(479)
	ExplicitTypePropertiesType           = SymbolId(480)
	PropertiesTypeExprType               = SymbolId(481)
	PropertiesKindType                   = SymbolId(482)
	ReturnTypeType                       = SymbolId(483)
	ParameterType                        = SymbolId(484)
	ProperParameterListType              = SymbolId(485)
	ParameterListType                    = SymbolId(486)
	ParametersType                       = SymbolId(487)
	FuncSignatureType                    = SymbolId(488)
	FuncDefType                          = SymbolId(489)
)

type _ActionType int

const (
	// NOTE: error action is implicit
	_ShiftAction          = _ActionType(0)
	_ReduceAction         = _ActionType(1)
	_ShiftAndReduceAction = _ActionType(2)
	_AcceptAction         = _ActionType(3)
)

func (i _ActionType) String() string {
	switch i {
	case _ShiftAction:
		return "shift"
	case _ReduceAction:
		return "reduce"
	case _ShiftAndReduceAction:
		return "shift-and-reduce"
	case _AcceptAction:
		return "accept"
	default:
		return fmt.Sprintf("?Unknown action %d?", int(i))
	}
}

type _ReduceType int

const (
	_ReduceStatementListToSource                                        = _ReduceType(1)
	_ReduceToDirectivesDeclaration                                      = _ReduceType(2)
	_ReduceDirectiveToDirectives                                        = _ReduceType(3)
	_ReduceAddToDirectives                                              = _ReduceType(4)
	_ReduceNamedToDirective                                             = _ReduceType(5)
	_ReduceCompoundNamedToDirective                                     = _ReduceType(6)
	_ReduceProperDirectiveExprsToDirectiveExprs                         = _ReduceType(7)
	_ReduceNilToDirectiveExprs                                          = _ReduceType(8)
	_ReduceDirectiveExprToProperDirectiveExprs                          = _ReduceType(9)
	_ReduceAddToProperDirectiveExprs                                    = _ReduceType(10)
	_ReduceDirectiveAndExprToDirectiveExpr                              = _ReduceType(11)
	_ReduceOrToDirectiveExpr                                            = _ReduceType(12)
	_ReduceDirectiveNotExprToDirectiveAndExpr                           = _ReduceType(13)
	_ReduceAndToDirectiveAndExpr                                        = _ReduceType(14)
	_ReduceDirectiveAtomExprToDirectiveNotExpr                          = _ReduceType(15)
	_ReduceNotToDirectiveNotExpr                                        = _ReduceType(16)
	_ReduceDirectiveValueExprToDirectiveAtomExpr                        = _ReduceType(17)
	_ReduceGroupToDirectiveAtomExpr                                     = _ReduceType(18)
	_ReduceToDirectiveValueExpr                                         = _ReduceType(19)
	_ReduceIdentifierToDirectiveValue                                   = _ReduceType(20)
	_ReduceUnderscoreToDirectiveValue                                   = _ReduceType(21)
	_ReduceTrueToDirectiveValue                                         = _ReduceType(22)
	_ReduceFalseToDirectiveValue                                        = _ReduceType(23)
	_ReduceIntegerLiteralToDirectiveValue                               = _ReduceType(24)
	_ReduceFloatLiteralToDirectiveValue                                 = _ReduceType(25)
	_ReduceRuneLiteralToDirectiveValue                                  = _ReduceType(26)
	_ReduceStringLiteralToDirectiveValue                                = _ReduceType(27)
	_ReduceUnsafeStmtToStatement                                        = _ReduceType(28)
	_ReduceDirectivesDeclarationToStatement                             = _ReduceType(29)
	_ReduceImportStmtToStatement                                        = _ReduceType(30)
	_ReduceFloatingCommentToStatement                                   = _ReduceType(31)
	_ReduceTypeDefToStatement                                           = _ReduceType(32)
	_ReduceAliasDefToStatement                                          = _ReduceType(33)
	_ReduceBranchStmtToStatement                                        = _ReduceType(34)
	_ReduceReturnableExprToStatement                                    = _ReduceType(35)
	_ReduceJumpStmtToStatement                                          = _ReduceType(36)
	_ReduceAssignStmtToStatement                                        = _ReduceType(37)
	_ReduceBlockAddrDeclStmtToStatement                                 = _ReduceType(38)
	_ReduceToFloatingComment                                            = _ReduceType(39)
	_ReduceCaseBranchToBranchStmt                                       = _ReduceType(40)
	_ReduceDefaultBranchToBranchStmt                                    = _ReduceType(41)
	_ReduceStatementToOptionalStatement                                 = _ReduceType(42)
	_ReduceNilToOptionalStatement                                       = _ReduceType(43)
	_ReduceToUnsafeStmt                                                 = _ReduceType(44)
	_ReduceUnlabeledNoValueToJumpStmt                                   = _ReduceType(45)
	_ReduceUnlabeledValuedToJumpStmt                                    = _ReduceType(46)
	_ReduceLabeledNoValueToJumpStmt                                     = _ReduceType(47)
	_ReduceLabeledValuedToJumpStmt                                      = _ReduceType(48)
	_ReduceFallthroughToJumpStmt                                        = _ReduceType(49)
	_ReduceReturnToJumpOp                                               = _ReduceType(50)
	_ReduceBreakToJumpOp                                                = _ReduceType(51)
	_ReduceContinueToJumpOp                                             = _ReduceType(52)
	_ReduceToAssignStmt                                                 = _ReduceType(53)
	_ReduceSingleToImportStmt                                           = _ReduceType(54)
	_ReduceMultipleToImportStmt                                         = _ReduceType(55)
	_ReduceAddImplicitToProperImportClauses                             = _ReduceType(56)
	_ReduceAddExplicitToProperImportClauses                             = _ReduceType(57)
	_ReduceImportClauseToProperImportClauses                            = _ReduceType(58)
	_ReduceProperImportClausesToImportClauses                           = _ReduceType(59)
	_ReduceImplicitToImportClauses                                      = _ReduceType(60)
	_ReduceExplicitToImportClauses                                      = _ReduceType(61)
	_ReduceStringLiteralToImportClause                                  = _ReduceType(62)
	_ReduceAliasToImportClause                                          = _ReduceType(63)
	_ReduceUnusableImportToImportClause                                 = _ReduceType(64)
	_ReduceImportToLocalToImportClause                                  = _ReduceType(65)
	_ReduceToBlockAddrDeclStmt                                          = _ReduceType(66)
	_ReduceProperBlockAddrDeclListToBlockAddrDeclList                   = _ReduceType(67)
	_ReduceImproperImplicitToBlockAddrDeclList                          = _ReduceType(68)
	_ReduceImproperExplicitToBlockAddrDeclList                          = _ReduceType(69)
	_ReduceNilToBlockAddrDeclList                                       = _ReduceType(70)
	_ReduceBlockAddrDeclItemToProperBlockAddrDeclList                   = _ReduceType(71)
	_ReduceAddImplicitToProperBlockAddrDeclList                         = _ReduceType(72)
	_ReduceAddExplicitToProperBlockAddrDeclList                         = _ReduceType(73)
	_ReduceDeclToBlockAddrDeclItem                                      = _ReduceType(74)
	_ReduceInferredAssignToBlockAddrDeclItem                            = _ReduceType(75)
	_ReduceTypedAssignToBlockAddrDeclItem                               = _ReduceType(76)
	_ReduceNewInferredToAddrDeclPattern                                 = _ReduceType(77)
	_ReduceNewTypedToAddrDeclPattern                                    = _ReduceType(78)
	_ReduceToAssignToAddrPattern                                        = _ReduceType(79)
	_ReduceVarToVarType                                                 = _ReduceType(80)
	_ReduceLetToVarType                                                 = _ReduceType(81)
	_ReduceNamedExprToNewAddressable                                    = _ReduceType(82)
	_ReduceImplicitStructExprToNewAddressable                           = _ReduceType(83)
	_ReduceSwitchableCasePatternsToCasePatterns                         = _ReduceType(84)
	_ReduceToCasePatterns                                               = _ReduceType(85)
	_ReduceToAssignSelectablePattern                                    = _ReduceType(86)
	_ReduceSwitchableCasePatternToSwitchableCasePatterns                = _ReduceType(87)
	_ReduceAddToSwitchableCasePatterns                                  = _ReduceType(88)
	_ReduceExprToSwitchableCasePattern                                  = _ReduceType(89)
	_ReduceEnumPatternToSwitchableCasePattern                           = _ReduceType(90)
	_ReduceMatchAnyDataToEnumPattern                                    = _ReduceType(91)
	_ReduceNamedToEnumPattern                                           = _ReduceType(92)
	_ReduceMatchAnyUnitToEnumPattern                                    = _ReduceType(93)
	_ReduceNamedUnitToEnumPattern                                       = _ReduceType(94)
	_ReduceUnnamedStructToEnumPattern                                   = _ReduceType(95)
	_ReduceParseErrorExprToAtomExpr                                     = _ReduceType(96)
	_ReduceLiteralExprToAtomExpr                                        = _ReduceType(97)
	_ReduceNamedExprToAtomExpr                                          = _ReduceType(98)
	_ReduceFuncDefToAtomExpr                                            = _ReduceType(99)
	_ReduceInitializeExprToAtomExpr                                     = _ReduceType(100)
	_ReduceImplicitStructExprToAtomExpr                                 = _ReduceType(101)
	_ReduceToParseErrorExpr                                             = _ReduceType(102)
	_ReduceTrueToLiteralExpr                                            = _ReduceType(103)
	_ReduceFalseToLiteralExpr                                           = _ReduceType(104)
	_ReduceIntegerLiteralToLiteralExpr                                  = _ReduceType(105)
	_ReduceFloatLiteralToLiteralExpr                                    = _ReduceType(106)
	_ReduceRuneLiteralToLiteralExpr                                     = _ReduceType(107)
	_ReduceStringLiteralToLiteralExpr                                   = _ReduceType(108)
	_ReduceIdentifierToNamedExpr                                        = _ReduceType(109)
	_ReduceUnderscoreToNamedExpr                                        = _ReduceType(110)
	_ReduceToInitializeExpr                                             = _ReduceType(111)
	_ReduceToImplicitStructExpr                                         = _ReduceType(112)
	_ReduceAtomExprToAccessibleExpr                                     = _ReduceType(113)
	_ReduceAccessExprToAccessibleExpr                                   = _ReduceType(114)
	_ReduceParameterizedExprToAccessibleExpr                            = _ReduceType(115)
	_ReduceCallExprToAccessibleExpr                                     = _ReduceType(116)
	_ReduceIndexExprToAccessibleExpr                                    = _ReduceType(117)
	_ReduceAsExprToAccessibleExpr                                       = _ReduceType(118)
	_ReduceMakeExprToAccessibleExpr                                     = _ReduceType(119)
	_ReduceToAccessExpr                                                 = _ReduceType(120)
	_ReduceToIndexExpr                                                  = _ReduceType(121)
	_ReduceExprToIndex                                                  = _ReduceType(122)
	_ReduceColonExprToIndex                                             = _ReduceType(123)
	_ReduceToAsExpr                                                     = _ReduceType(124)
	_ReduceToParameterizedExpr                                          = _ReduceType(125)
	_ReduceToCallExpr                                                   = _ReduceType(126)
	_ReduceSizeProperToMakeExpr                                         = _ReduceType(127)
	_ReduceSizeImproperToMakeExpr                                       = _ReduceType(128)
	_ReduceValueProperToMakeExpr                                        = _ReduceType(129)
	_ReduceValueImproperToMakeExpr                                      = _ReduceType(130)
	_ReduceSizeToMakeExprSize                                           = _ReduceType(131)
	_ReduceSizeCapacityToMakeExprSize                                   = _ReduceType(132)
	_ReduceToMakeExprHead                                               = _ReduceType(133)
	_ReduceAddToProperArguments                                         = _ReduceType(134)
	_ReduceArgumentToProperArguments                                    = _ReduceType(135)
	_ReduceProperArgumentsToArguments                                   = _ReduceType(136)
	_ReduceImproperImplicitToArguments                                  = _ReduceType(137)
	_ReduceImproperExplicitToArguments                                  = _ReduceType(138)
	_ReduceNilToArguments                                               = _ReduceType(139)
	_ReducePositionalToArgument                                         = _ReduceType(140)
	_ReduceColonExprToArgument                                          = _ReduceType(141)
	_ReduceNamedAssignmentToArgument                                    = _ReduceType(142)
	_ReduceVarargAssignmentToArgument                                   = _ReduceType(143)
	_ReduceSkipPatternToArgument                                        = _ReduceType(144)
	_ReduceUnitUnitPairToColonExpr                                      = _ReduceType(145)
	_ReduceExprUnitPairToColonExpr                                      = _ReduceType(146)
	_ReduceUnitExprPairToColonExpr                                      = _ReduceType(147)
	_ReduceExprExprPairToColonExpr                                      = _ReduceType(148)
	_ReduceColonExprUnitTupleToColonExpr                                = _ReduceType(149)
	_ReduceColonExprExprTupleToColonExpr                                = _ReduceType(150)
	_ReduceAccessibleExprToPostfixableExpr                              = _ReduceType(151)
	_ReducePostfixUnaryExprToPostfixableExpr                            = _ReduceType(152)
	_ReduceToPostfixUnaryExpr                                           = _ReduceType(153)
	_ReduceQuestionToPostfixUnaryOp                                     = _ReduceType(154)
	_ReduceExclaimToPostfixUnaryOp                                      = _ReduceType(155)
	_ReduceAddOneAssignToPostfixUnaryOp                                 = _ReduceType(156)
	_ReduceSubOneAssignToPostfixUnaryOp                                 = _ReduceType(157)
	_ReducePostfixableExprToPrefixableExpr                              = _ReduceType(158)
	_ReducePrefixUnaryExprToPrefixableExpr                              = _ReduceType(159)
	_ReduceToPrefixUnaryExpr                                            = _ReduceType(160)
	_ReduceNotToPrefixUnaryOp                                           = _ReduceType(161)
	_ReduceBitXorToPrefixUnaryOp                                        = _ReduceType(162)
	_ReduceAddToPrefixUnaryOp                                           = _ReduceType(163)
	_ReduceSubToPrefixUnaryOp                                           = _ReduceType(164)
	_ReduceMulToPrefixUnaryOp                                           = _ReduceType(165)
	_ReduceBitAndToPrefixUnaryOp                                        = _ReduceType(166)
	_ReduceAsyncToPrefixUnaryOp                                         = _ReduceType(167)
	_ReduceDeferToPrefixUnaryOp                                         = _ReduceType(168)
	_ReducePrefixableExprToMulExpr                                      = _ReduceType(169)
	_ReduceBinaryMulExprToMulExpr                                       = _ReduceType(170)
	_ReduceToBinaryMulExpr                                              = _ReduceType(171)
	_ReduceMulToMulOp                                                   = _ReduceType(172)
	_ReduceDivToMulOp                                                   = _ReduceType(173)
	_ReduceModToMulOp                                                   = _ReduceType(174)
	_ReduceBitAndToMulOp                                                = _ReduceType(175)
	_ReduceBitLshiftToMulOp                                             = _ReduceType(176)
	_ReduceBitRshiftToMulOp                                             = _ReduceType(177)
	_ReduceMulExprToAddExpr                                             = _ReduceType(178)
	_ReduceBinaryAddExprToAddExpr                                       = _ReduceType(179)
	_ReduceToBinaryAddExpr                                              = _ReduceType(180)
	_ReduceAddToAddOp                                                   = _ReduceType(181)
	_ReduceSubToAddOp                                                   = _ReduceType(182)
	_ReduceBitOrToAddOp                                                 = _ReduceType(183)
	_ReduceBitXorToAddOp                                                = _ReduceType(184)
	_ReduceAddExprToCmpExpr                                             = _ReduceType(185)
	_ReduceBinaryCmpExprToCmpExpr                                       = _ReduceType(186)
	_ReduceToBinaryCmpExpr                                              = _ReduceType(187)
	_ReduceEqualToCmpOp                                                 = _ReduceType(188)
	_ReduceNotEqualToCmpOp                                              = _ReduceType(189)
	_ReduceLessToCmpOp                                                  = _ReduceType(190)
	_ReduceLessOrEqualToCmpOp                                           = _ReduceType(191)
	_ReduceGreaterToCmpOp                                               = _ReduceType(192)
	_ReduceGreaterOrEqualToCmpOp                                        = _ReduceType(193)
	_ReduceCmpExprToAndExpr                                             = _ReduceType(194)
	_ReduceBinaryAndExprToAndExpr                                       = _ReduceType(195)
	_ReduceToBinaryAndExpr                                              = _ReduceType(196)
	_ReduceAndExprToOrExpr                                              = _ReduceType(197)
	_ReduceBinaryOrExprToOrExpr                                         = _ReduceType(198)
	_ReduceToBinaryOrExpr                                               = _ReduceType(199)
	_ReduceOrExprToSendRecvExpr                                         = _ReduceType(200)
	_ReduceSendExprToSendRecvExpr                                       = _ReduceType(201)
	_ReduceRecvExprToSendRecvExpr                                       = _ReduceType(202)
	_ReduceToSendExpr                                                   = _ReduceType(203)
	_ReduceToRecvExpr                                                   = _ReduceType(204)
	_ReduceSendRecvExprToAssignOpExpr                                   = _ReduceType(205)
	_ReduceBinaryAssignOpExprToAssignOpExpr                             = _ReduceType(206)
	_ReduceToBinaryAssignOpExpr                                         = _ReduceType(207)
	_ReduceAddAssignToBinaryAssignOp                                    = _ReduceType(208)
	_ReduceSubAssignToBinaryAssignOp                                    = _ReduceType(209)
	_ReduceMulAssignToBinaryAssignOp                                    = _ReduceType(210)
	_ReduceDivAssignToBinaryAssignOp                                    = _ReduceType(211)
	_ReduceModAssignToBinaryAssignOp                                    = _ReduceType(212)
	_ReduceBitAndAssignToBinaryAssignOp                                 = _ReduceType(213)
	_ReduceBitOrAssignToBinaryAssignOp                                  = _ReduceType(214)
	_ReduceBitXorAssignToBinaryAssignOp                                 = _ReduceType(215)
	_ReduceBitLshiftAssignToBinaryAssignOp                              = _ReduceType(216)
	_ReduceBitRshiftAssignToBinaryAssignOp                              = _ReduceType(217)
	_ReduceStatementsToUnlabelledControlFlowExpr                        = _ReduceType(218)
	_ReduceIfElseExprToUnlabelledControlFlowExpr                        = _ReduceType(219)
	_ReduceSwitchExprBodyToUnlabelledControlFlowExpr                    = _ReduceType(220)
	_ReduceSelectExprBodyToUnlabelledControlFlowExpr                    = _ReduceType(221)
	_ReduceLoopExprBodyToUnlabelledControlFlowExpr                      = _ReduceType(222)
	_ReduceUnlabelledControlFlowExprToControlFlowExpr                   = _ReduceType(223)
	_ReduceLabelledToControlFlowExpr                                    = _ReduceType(224)
	_ReduceAssignOpExprToExpr                                           = _ReduceType(225)
	_ReduceControlFlowExprToExpr                                        = _ReduceType(226)
	_ReduceAddrDeclPatternToExpr                                        = _ReduceType(227)
	_ReduceAssignToAddrPatternToExpr                                    = _ReduceType(228)
	_ReduceToStatements                                                 = _ReduceType(229)
	_ReduceAddImplicitToProperStatementList                             = _ReduceType(230)
	_ReduceAddExplicitToProperStatementList                             = _ReduceType(231)
	_ReduceStatementToProperStatementList                               = _ReduceType(232)
	_ReduceProperStatementListToStatementList                           = _ReduceType(233)
	_ReduceImproperImplicitToStatementList                              = _ReduceType(234)
	_ReduceImproperExplicitToStatementList                              = _ReduceType(235)
	_ReduceNilToStatementList                                           = _ReduceType(236)
	_ReduceIfElifExprToIfElseExpr                                       = _ReduceType(237)
	_ReduceElseToIfElseExpr                                             = _ReduceType(238)
	_ReduceIfOnlyExprToIfElifExpr                                       = _ReduceType(239)
	_ReduceElifToIfElifExpr                                             = _ReduceType(240)
	_ReduceToIfOnlyExpr                                                 = _ReduceType(241)
	_ReduceExprToCondition                                              = _ReduceType(242)
	_ReduceCasePatternExprToCondition                                   = _ReduceType(243)
	_ReduceToCasePatternExpr                                            = _ReduceType(244)
	_ReduceToSwitchExprBody                                             = _ReduceType(245)
	_ReduceToSelectExprBody                                             = _ReduceType(246)
	_ReduceInfiniteToLoopExprBody                                       = _ReduceType(247)
	_ReduceDoWhileToLoopExprBody                                        = _ReduceType(248)
	_ReduceWhileToLoopExprBody                                          = _ReduceType(249)
	_ReduceIteratorToLoopExprBody                                       = _ReduceType(250)
	_ReduceForToLoopExprBody                                            = _ReduceType(251)
	_ReduceToLoopBody                                                   = _ReduceType(252)
	_ReduceExprToReturnableExpr                                         = _ReduceType(253)
	_ReduceImproperExprStructToReturnableExpr                           = _ReduceType(254)
	_ReducePairToImproperExprStruct                                     = _ReduceType(255)
	_ReduceAddToImproperExprStruct                                      = _ReduceType(256)
	_ReduceSliceTypeExprToVariableSizedTypeExpr                         = _ReduceType(257)
	_ReduceMapTypeExprToVariableSizedTypeExpr                           = _ReduceType(258)
	_ReducePropertiesTypeExprToInitializableTypeExpr                    = _ReduceType(259)
	_ReduceArrayTypeExprToInitializableTypeExpr                         = _ReduceType(260)
	_ReduceVariableSizedTypeExprToInitializableTypeExpr                 = _ReduceType(261)
	_ReduceToSliceTypeExpr                                              = _ReduceType(262)
	_ReduceToArrayTypeExpr                                              = _ReduceType(263)
	_ReduceToMapTypeExpr                                                = _ReduceType(264)
	_ReduceInitializableTypeExprToAtomTypeExpr                          = _ReduceType(265)
	_ReduceNamedTypeExprToAtomTypeExpr                                  = _ReduceType(266)
	_ReduceInferredTypeExprToAtomTypeExpr                               = _ReduceType(267)
	_ReduceImplicitStructTypeExprToAtomTypeExpr                         = _ReduceType(268)
	_ReduceImplicitEnumTypeExprToAtomTypeExpr                           = _ReduceType(269)
	_ReduceFuncSignatureToAtomTypeExpr                                  = _ReduceType(270)
	_ReduceLocalToNamedTypeExpr                                         = _ReduceType(271)
	_ReduceExternalToNamedTypeExpr                                      = _ReduceType(272)
	_ReduceToInferredTypeExpr                                           = _ReduceType(273)
	_ReduceAtomTypeExprToReturnableTypeExpr                             = _ReduceType(274)
	_ReduceRefTypeExprToReturnableTypeExpr                              = _ReduceType(275)
	_ReduceDefaultEnumOpTypeExprToReturnableTypeExpr                    = _ReduceType(276)
	_ReduceUnaryTraitOpTypeExprToReturnableTypeExpr                     = _ReduceType(277)
	_ReduceToRefTypeExpr                                                = _ReduceType(278)
	_ReduceToDefaultEnumOpTypeExpr                                      = _ReduceType(279)
	_ReduceQuestionToDefaultEnumOp                                      = _ReduceType(280)
	_ReduceExclaimToDefaultEnumOp                                       = _ReduceType(281)
	_ReduceToUnaryTraitOpTypeExpr                                       = _ReduceType(282)
	_ReduceTildeToUnaryTraitOp                                          = _ReduceType(283)
	_ReduceTildeTildeToUnaryTraitOp                                     = _ReduceType(284)
	_ReduceReturnableTypeExprToTypeExpr                                 = _ReduceType(285)
	_ReduceBinaryTraitOpTypeExprToTypeExpr                              = _ReduceType(286)
	_ReduceToBinaryTraitOpTypeExpr                                      = _ReduceType(287)
	_ReduceMulToBinaryTraitOp                                           = _ReduceType(288)
	_ReduceAddToBinaryTraitOp                                           = _ReduceType(289)
	_ReduceSubToBinaryTraitOp                                           = _ReduceType(290)
	_ReduceDefinitionToTypeDef                                          = _ReduceType(291)
	_ReduceConstrainedDefToTypeDef                                      = _ReduceType(292)
	_ReduceToAliasDef                                                   = _ReduceType(293)
	_ReduceUnconstrainedToGenericParameter                              = _ReduceType(294)
	_ReduceConstrainedToGenericParameter                                = _ReduceType(295)
	_ReduceGenericToGenericParameters                                   = _ReduceType(296)
	_ReduceNilToGenericParameters                                       = _ReduceType(297)
	_ReduceAddToProperGenericParameterList                              = _ReduceType(298)
	_ReduceGenericParameterToProperGenericParameterList                 = _ReduceType(299)
	_ReduceProperGenericParameterListToGenericParameterList             = _ReduceType(300)
	_ReduceImproperImplicitToGenericParameterList                       = _ReduceType(301)
	_ReduceImproperExplicitToGenericParameterList                       = _ReduceType(302)
	_ReduceNilToGenericParameterList                                    = _ReduceType(303)
	_ReduceToGenericArguments                                           = _ReduceType(304)
	_ReduceGenericArgumentsToOptionalGenericArguments                   = _ReduceType(305)
	_ReduceNilToOptionalGenericArguments                                = _ReduceType(306)
	_ReduceAddToProperGenericArgumentList                               = _ReduceType(307)
	_ReduceTypeExprToProperGenericArgumentList                          = _ReduceType(308)
	_ReduceProperGenericArgumentListToGenericArgumentList               = _ReduceType(309)
	_ReduceImproperImplicitToGenericArgumentList                        = _ReduceType(310)
	_ReduceImproperExplicitToGenericArgumentList                        = _ReduceType(311)
	_ReduceNilToGenericArgumentList                                     = _ReduceType(312)
	_ReduceUnnamedFieldToTypeProperty                                   = _ReduceType(313)
	_ReduceNamedFieldToTypeProperty                                     = _ReduceType(314)
	_ReducePaddingFieldToTypeProperty                                   = _ReduceType(315)
	_ReduceVarTypeUnnamedFieldToTypeProperty                            = _ReduceType(316)
	_ReduceVarTypeNamedFieldToTypeProperty                              = _ReduceType(317)
	_ReduceDefaultNamedEnumFieldToTypeProperty                          = _ReduceType(318)
	_ReduceDefaultUnnamedEnumFieldToTypeProperty                        = _ReduceType(319)
	_ReduceFuncDefToTypeProperty                                        = _ReduceType(320)
	_ReduceAddToProperImplicitTypeProperties                            = _ReduceType(321)
	_ReduceTypePropertyToProperImplicitTypeProperties                   = _ReduceType(322)
	_ReduceProperImplicitTypePropertiesToImplicitTypeProperties         = _ReduceType(323)
	_ReduceImproperImplicitToImplicitTypeProperties                     = _ReduceType(324)
	_ReduceImproperExplicitToImplicitTypeProperties                     = _ReduceType(325)
	_ReduceNilToImplicitTypeProperties                                  = _ReduceType(326)
	_ReduceToImplicitStructTypeExpr                                     = _ReduceType(327)
	_ReducePairToProperImplicitEnumTypeProperties                       = _ReduceType(328)
	_ReduceAddToProperImplicitEnumTypeProperties                        = _ReduceType(329)
	_ReduceProperImplicitEnumTypePropertiesToImplicitEnumTypeProperties = _ReduceType(330)
	_ReduceImproperToImplicitEnumTypeProperties                         = _ReduceType(331)
	_ReduceToImplicitEnumTypeExpr                                       = _ReduceType(332)
	_ReduceAddImplicitToProperExplicitTypeProperties                    = _ReduceType(333)
	_ReduceAddExplicitToProperExplicitTypeProperties                    = _ReduceType(334)
	_ReduceTypePropertyToProperExplicitTypeProperties                   = _ReduceType(335)
	_ReduceProperExplicitTypePropertiesToExplicitTypeProperties         = _ReduceType(336)
	_ReduceImproperImplicitToExplicitTypeProperties                     = _ReduceType(337)
	_ReduceImproperExplicitToExplicitTypeProperties                     = _ReduceType(338)
	_ReduceNilToExplicitTypeProperties                                  = _ReduceType(339)
	_ReduceToPropertiesTypeExpr                                         = _ReduceType(340)
	_ReduceStructToPropertiesKind                                       = _ReduceType(341)
	_ReduceTraitToPropertiesKind                                        = _ReduceType(342)
	_ReduceEnumToPropertiesKind                                         = _ReduceType(343)
	_ReduceReturnableTypeExprToReturnType                               = _ReduceType(344)
	_ReduceNilToReturnType                                              = _ReduceType(345)
	_ReduceNamedArgToParameter                                          = _ReduceType(346)
	_ReduceNamedReceiverToParameter                                     = _ReduceType(347)
	_ReduceNamedVarargToParameter                                       = _ReduceType(348)
	_ReduceIgnoreArgToParameter                                         = _ReduceType(349)
	_ReduceIgnoreReceiverToParameter                                    = _ReduceType(350)
	_ReduceIgnoreVarargToParameter                                      = _ReduceType(351)
	_ReduceUnnamedArgToParameter                                        = _ReduceType(352)
	_ReduceUnnamedReceiverToParameter                                   = _ReduceType(353)
	_ReduceUnnamedVarargToParameter                                     = _ReduceType(354)
	_ReduceAddToProperParameterList                                     = _ReduceType(355)
	_ReduceParameterToProperParameterList                               = _ReduceType(356)
	_ReduceProperParameterListToParameterList                           = _ReduceType(357)
	_ReduceImproperImplicitToParameterList                              = _ReduceType(358)
	_ReduceImproperExplicitToParameterList                              = _ReduceType(359)
	_ReduceNilToParameterList                                           = _ReduceType(360)
	_ReduceToParameters                                                 = _ReduceType(361)
	_ReduceAnonymousToFuncSignature                                     = _ReduceType(362)
	_ReduceNamedToFuncSignature                                         = _ReduceType(363)
	_ReduceToFuncDef                                                    = _ReduceType(364)
)

func (i _ReduceType) String() string {
	switch i {
	case _ReduceStatementListToSource:
		return "StatementListToSource"
	case _ReduceToDirectivesDeclaration:
		return "ToDirectivesDeclaration"
	case _ReduceDirectiveToDirectives:
		return "DirectiveToDirectives"
	case _ReduceAddToDirectives:
		return "AddToDirectives"
	case _ReduceNamedToDirective:
		return "NamedToDirective"
	case _ReduceCompoundNamedToDirective:
		return "CompoundNamedToDirective"
	case _ReduceProperDirectiveExprsToDirectiveExprs:
		return "ProperDirectiveExprsToDirectiveExprs"
	case _ReduceNilToDirectiveExprs:
		return "NilToDirectiveExprs"
	case _ReduceDirectiveExprToProperDirectiveExprs:
		return "DirectiveExprToProperDirectiveExprs"
	case _ReduceAddToProperDirectiveExprs:
		return "AddToProperDirectiveExprs"
	case _ReduceDirectiveAndExprToDirectiveExpr:
		return "DirectiveAndExprToDirectiveExpr"
	case _ReduceOrToDirectiveExpr:
		return "OrToDirectiveExpr"
	case _ReduceDirectiveNotExprToDirectiveAndExpr:
		return "DirectiveNotExprToDirectiveAndExpr"
	case _ReduceAndToDirectiveAndExpr:
		return "AndToDirectiveAndExpr"
	case _ReduceDirectiveAtomExprToDirectiveNotExpr:
		return "DirectiveAtomExprToDirectiveNotExpr"
	case _ReduceNotToDirectiveNotExpr:
		return "NotToDirectiveNotExpr"
	case _ReduceDirectiveValueExprToDirectiveAtomExpr:
		return "DirectiveValueExprToDirectiveAtomExpr"
	case _ReduceGroupToDirectiveAtomExpr:
		return "GroupToDirectiveAtomExpr"
	case _ReduceToDirectiveValueExpr:
		return "ToDirectiveValueExpr"
	case _ReduceIdentifierToDirectiveValue:
		return "IdentifierToDirectiveValue"
	case _ReduceUnderscoreToDirectiveValue:
		return "UnderscoreToDirectiveValue"
	case _ReduceTrueToDirectiveValue:
		return "TrueToDirectiveValue"
	case _ReduceFalseToDirectiveValue:
		return "FalseToDirectiveValue"
	case _ReduceIntegerLiteralToDirectiveValue:
		return "IntegerLiteralToDirectiveValue"
	case _ReduceFloatLiteralToDirectiveValue:
		return "FloatLiteralToDirectiveValue"
	case _ReduceRuneLiteralToDirectiveValue:
		return "RuneLiteralToDirectiveValue"
	case _ReduceStringLiteralToDirectiveValue:
		return "StringLiteralToDirectiveValue"
	case _ReduceUnsafeStmtToStatement:
		return "UnsafeStmtToStatement"
	case _ReduceDirectivesDeclarationToStatement:
		return "DirectivesDeclarationToStatement"
	case _ReduceImportStmtToStatement:
		return "ImportStmtToStatement"
	case _ReduceFloatingCommentToStatement:
		return "FloatingCommentToStatement"
	case _ReduceTypeDefToStatement:
		return "TypeDefToStatement"
	case _ReduceAliasDefToStatement:
		return "AliasDefToStatement"
	case _ReduceBranchStmtToStatement:
		return "BranchStmtToStatement"
	case _ReduceReturnableExprToStatement:
		return "ReturnableExprToStatement"
	case _ReduceJumpStmtToStatement:
		return "JumpStmtToStatement"
	case _ReduceAssignStmtToStatement:
		return "AssignStmtToStatement"
	case _ReduceBlockAddrDeclStmtToStatement:
		return "BlockAddrDeclStmtToStatement"
	case _ReduceToFloatingComment:
		return "ToFloatingComment"
	case _ReduceCaseBranchToBranchStmt:
		return "CaseBranchToBranchStmt"
	case _ReduceDefaultBranchToBranchStmt:
		return "DefaultBranchToBranchStmt"
	case _ReduceStatementToOptionalStatement:
		return "StatementToOptionalStatement"
	case _ReduceNilToOptionalStatement:
		return "NilToOptionalStatement"
	case _ReduceToUnsafeStmt:
		return "ToUnsafeStmt"
	case _ReduceUnlabeledNoValueToJumpStmt:
		return "UnlabeledNoValueToJumpStmt"
	case _ReduceUnlabeledValuedToJumpStmt:
		return "UnlabeledValuedToJumpStmt"
	case _ReduceLabeledNoValueToJumpStmt:
		return "LabeledNoValueToJumpStmt"
	case _ReduceLabeledValuedToJumpStmt:
		return "LabeledValuedToJumpStmt"
	case _ReduceFallthroughToJumpStmt:
		return "FallthroughToJumpStmt"
	case _ReduceReturnToJumpOp:
		return "ReturnToJumpOp"
	case _ReduceBreakToJumpOp:
		return "BreakToJumpOp"
	case _ReduceContinueToJumpOp:
		return "ContinueToJumpOp"
	case _ReduceToAssignStmt:
		return "ToAssignStmt"
	case _ReduceSingleToImportStmt:
		return "SingleToImportStmt"
	case _ReduceMultipleToImportStmt:
		return "MultipleToImportStmt"
	case _ReduceAddImplicitToProperImportClauses:
		return "AddImplicitToProperImportClauses"
	case _ReduceAddExplicitToProperImportClauses:
		return "AddExplicitToProperImportClauses"
	case _ReduceImportClauseToProperImportClauses:
		return "ImportClauseToProperImportClauses"
	case _ReduceProperImportClausesToImportClauses:
		return "ProperImportClausesToImportClauses"
	case _ReduceImplicitToImportClauses:
		return "ImplicitToImportClauses"
	case _ReduceExplicitToImportClauses:
		return "ExplicitToImportClauses"
	case _ReduceStringLiteralToImportClause:
		return "StringLiteralToImportClause"
	case _ReduceAliasToImportClause:
		return "AliasToImportClause"
	case _ReduceUnusableImportToImportClause:
		return "UnusableImportToImportClause"
	case _ReduceImportToLocalToImportClause:
		return "ImportToLocalToImportClause"
	case _ReduceToBlockAddrDeclStmt:
		return "ToBlockAddrDeclStmt"
	case _ReduceProperBlockAddrDeclListToBlockAddrDeclList:
		return "ProperBlockAddrDeclListToBlockAddrDeclList"
	case _ReduceImproperImplicitToBlockAddrDeclList:
		return "ImproperImplicitToBlockAddrDeclList"
	case _ReduceImproperExplicitToBlockAddrDeclList:
		return "ImproperExplicitToBlockAddrDeclList"
	case _ReduceNilToBlockAddrDeclList:
		return "NilToBlockAddrDeclList"
	case _ReduceBlockAddrDeclItemToProperBlockAddrDeclList:
		return "BlockAddrDeclItemToProperBlockAddrDeclList"
	case _ReduceAddImplicitToProperBlockAddrDeclList:
		return "AddImplicitToProperBlockAddrDeclList"
	case _ReduceAddExplicitToProperBlockAddrDeclList:
		return "AddExplicitToProperBlockAddrDeclList"
	case _ReduceDeclToBlockAddrDeclItem:
		return "DeclToBlockAddrDeclItem"
	case _ReduceInferredAssignToBlockAddrDeclItem:
		return "InferredAssignToBlockAddrDeclItem"
	case _ReduceTypedAssignToBlockAddrDeclItem:
		return "TypedAssignToBlockAddrDeclItem"
	case _ReduceNewInferredToAddrDeclPattern:
		return "NewInferredToAddrDeclPattern"
	case _ReduceNewTypedToAddrDeclPattern:
		return "NewTypedToAddrDeclPattern"
	case _ReduceToAssignToAddrPattern:
		return "ToAssignToAddrPattern"
	case _ReduceVarToVarType:
		return "VarToVarType"
	case _ReduceLetToVarType:
		return "LetToVarType"
	case _ReduceNamedExprToNewAddressable:
		return "NamedExprToNewAddressable"
	case _ReduceImplicitStructExprToNewAddressable:
		return "ImplicitStructExprToNewAddressable"
	case _ReduceSwitchableCasePatternsToCasePatterns:
		return "SwitchableCasePatternsToCasePatterns"
	case _ReduceToCasePatterns:
		return "ToCasePatterns"
	case _ReduceToAssignSelectablePattern:
		return "ToAssignSelectablePattern"
	case _ReduceSwitchableCasePatternToSwitchableCasePatterns:
		return "SwitchableCasePatternToSwitchableCasePatterns"
	case _ReduceAddToSwitchableCasePatterns:
		return "AddToSwitchableCasePatterns"
	case _ReduceExprToSwitchableCasePattern:
		return "ExprToSwitchableCasePattern"
	case _ReduceEnumPatternToSwitchableCasePattern:
		return "EnumPatternToSwitchableCasePattern"
	case _ReduceMatchAnyDataToEnumPattern:
		return "MatchAnyDataToEnumPattern"
	case _ReduceNamedToEnumPattern:
		return "NamedToEnumPattern"
	case _ReduceMatchAnyUnitToEnumPattern:
		return "MatchAnyUnitToEnumPattern"
	case _ReduceNamedUnitToEnumPattern:
		return "NamedUnitToEnumPattern"
	case _ReduceUnnamedStructToEnumPattern:
		return "UnnamedStructToEnumPattern"
	case _ReduceParseErrorExprToAtomExpr:
		return "ParseErrorExprToAtomExpr"
	case _ReduceLiteralExprToAtomExpr:
		return "LiteralExprToAtomExpr"
	case _ReduceNamedExprToAtomExpr:
		return "NamedExprToAtomExpr"
	case _ReduceFuncDefToAtomExpr:
		return "FuncDefToAtomExpr"
	case _ReduceInitializeExprToAtomExpr:
		return "InitializeExprToAtomExpr"
	case _ReduceImplicitStructExprToAtomExpr:
		return "ImplicitStructExprToAtomExpr"
	case _ReduceToParseErrorExpr:
		return "ToParseErrorExpr"
	case _ReduceTrueToLiteralExpr:
		return "TrueToLiteralExpr"
	case _ReduceFalseToLiteralExpr:
		return "FalseToLiteralExpr"
	case _ReduceIntegerLiteralToLiteralExpr:
		return "IntegerLiteralToLiteralExpr"
	case _ReduceFloatLiteralToLiteralExpr:
		return "FloatLiteralToLiteralExpr"
	case _ReduceRuneLiteralToLiteralExpr:
		return "RuneLiteralToLiteralExpr"
	case _ReduceStringLiteralToLiteralExpr:
		return "StringLiteralToLiteralExpr"
	case _ReduceIdentifierToNamedExpr:
		return "IdentifierToNamedExpr"
	case _ReduceUnderscoreToNamedExpr:
		return "UnderscoreToNamedExpr"
	case _ReduceToInitializeExpr:
		return "ToInitializeExpr"
	case _ReduceToImplicitStructExpr:
		return "ToImplicitStructExpr"
	case _ReduceAtomExprToAccessibleExpr:
		return "AtomExprToAccessibleExpr"
	case _ReduceAccessExprToAccessibleExpr:
		return "AccessExprToAccessibleExpr"
	case _ReduceParameterizedExprToAccessibleExpr:
		return "ParameterizedExprToAccessibleExpr"
	case _ReduceCallExprToAccessibleExpr:
		return "CallExprToAccessibleExpr"
	case _ReduceIndexExprToAccessibleExpr:
		return "IndexExprToAccessibleExpr"
	case _ReduceAsExprToAccessibleExpr:
		return "AsExprToAccessibleExpr"
	case _ReduceMakeExprToAccessibleExpr:
		return "MakeExprToAccessibleExpr"
	case _ReduceToAccessExpr:
		return "ToAccessExpr"
	case _ReduceToIndexExpr:
		return "ToIndexExpr"
	case _ReduceExprToIndex:
		return "ExprToIndex"
	case _ReduceColonExprToIndex:
		return "ColonExprToIndex"
	case _ReduceToAsExpr:
		return "ToAsExpr"
	case _ReduceToParameterizedExpr:
		return "ToParameterizedExpr"
	case _ReduceToCallExpr:
		return "ToCallExpr"
	case _ReduceSizeProperToMakeExpr:
		return "SizeProperToMakeExpr"
	case _ReduceSizeImproperToMakeExpr:
		return "SizeImproperToMakeExpr"
	case _ReduceValueProperToMakeExpr:
		return "ValueProperToMakeExpr"
	case _ReduceValueImproperToMakeExpr:
		return "ValueImproperToMakeExpr"
	case _ReduceSizeToMakeExprSize:
		return "SizeToMakeExprSize"
	case _ReduceSizeCapacityToMakeExprSize:
		return "SizeCapacityToMakeExprSize"
	case _ReduceToMakeExprHead:
		return "ToMakeExprHead"
	case _ReduceAddToProperArguments:
		return "AddToProperArguments"
	case _ReduceArgumentToProperArguments:
		return "ArgumentToProperArguments"
	case _ReduceProperArgumentsToArguments:
		return "ProperArgumentsToArguments"
	case _ReduceImproperImplicitToArguments:
		return "ImproperImplicitToArguments"
	case _ReduceImproperExplicitToArguments:
		return "ImproperExplicitToArguments"
	case _ReduceNilToArguments:
		return "NilToArguments"
	case _ReducePositionalToArgument:
		return "PositionalToArgument"
	case _ReduceColonExprToArgument:
		return "ColonExprToArgument"
	case _ReduceNamedAssignmentToArgument:
		return "NamedAssignmentToArgument"
	case _ReduceVarargAssignmentToArgument:
		return "VarargAssignmentToArgument"
	case _ReduceSkipPatternToArgument:
		return "SkipPatternToArgument"
	case _ReduceUnitUnitPairToColonExpr:
		return "UnitUnitPairToColonExpr"
	case _ReduceExprUnitPairToColonExpr:
		return "ExprUnitPairToColonExpr"
	case _ReduceUnitExprPairToColonExpr:
		return "UnitExprPairToColonExpr"
	case _ReduceExprExprPairToColonExpr:
		return "ExprExprPairToColonExpr"
	case _ReduceColonExprUnitTupleToColonExpr:
		return "ColonExprUnitTupleToColonExpr"
	case _ReduceColonExprExprTupleToColonExpr:
		return "ColonExprExprTupleToColonExpr"
	case _ReduceAccessibleExprToPostfixableExpr:
		return "AccessibleExprToPostfixableExpr"
	case _ReducePostfixUnaryExprToPostfixableExpr:
		return "PostfixUnaryExprToPostfixableExpr"
	case _ReduceToPostfixUnaryExpr:
		return "ToPostfixUnaryExpr"
	case _ReduceQuestionToPostfixUnaryOp:
		return "QuestionToPostfixUnaryOp"
	case _ReduceExclaimToPostfixUnaryOp:
		return "ExclaimToPostfixUnaryOp"
	case _ReduceAddOneAssignToPostfixUnaryOp:
		return "AddOneAssignToPostfixUnaryOp"
	case _ReduceSubOneAssignToPostfixUnaryOp:
		return "SubOneAssignToPostfixUnaryOp"
	case _ReducePostfixableExprToPrefixableExpr:
		return "PostfixableExprToPrefixableExpr"
	case _ReducePrefixUnaryExprToPrefixableExpr:
		return "PrefixUnaryExprToPrefixableExpr"
	case _ReduceToPrefixUnaryExpr:
		return "ToPrefixUnaryExpr"
	case _ReduceNotToPrefixUnaryOp:
		return "NotToPrefixUnaryOp"
	case _ReduceBitXorToPrefixUnaryOp:
		return "BitXorToPrefixUnaryOp"
	case _ReduceAddToPrefixUnaryOp:
		return "AddToPrefixUnaryOp"
	case _ReduceSubToPrefixUnaryOp:
		return "SubToPrefixUnaryOp"
	case _ReduceMulToPrefixUnaryOp:
		return "MulToPrefixUnaryOp"
	case _ReduceBitAndToPrefixUnaryOp:
		return "BitAndToPrefixUnaryOp"
	case _ReduceAsyncToPrefixUnaryOp:
		return "AsyncToPrefixUnaryOp"
	case _ReduceDeferToPrefixUnaryOp:
		return "DeferToPrefixUnaryOp"
	case _ReducePrefixableExprToMulExpr:
		return "PrefixableExprToMulExpr"
	case _ReduceBinaryMulExprToMulExpr:
		return "BinaryMulExprToMulExpr"
	case _ReduceToBinaryMulExpr:
		return "ToBinaryMulExpr"
	case _ReduceMulToMulOp:
		return "MulToMulOp"
	case _ReduceDivToMulOp:
		return "DivToMulOp"
	case _ReduceModToMulOp:
		return "ModToMulOp"
	case _ReduceBitAndToMulOp:
		return "BitAndToMulOp"
	case _ReduceBitLshiftToMulOp:
		return "BitLshiftToMulOp"
	case _ReduceBitRshiftToMulOp:
		return "BitRshiftToMulOp"
	case _ReduceMulExprToAddExpr:
		return "MulExprToAddExpr"
	case _ReduceBinaryAddExprToAddExpr:
		return "BinaryAddExprToAddExpr"
	case _ReduceToBinaryAddExpr:
		return "ToBinaryAddExpr"
	case _ReduceAddToAddOp:
		return "AddToAddOp"
	case _ReduceSubToAddOp:
		return "SubToAddOp"
	case _ReduceBitOrToAddOp:
		return "BitOrToAddOp"
	case _ReduceBitXorToAddOp:
		return "BitXorToAddOp"
	case _ReduceAddExprToCmpExpr:
		return "AddExprToCmpExpr"
	case _ReduceBinaryCmpExprToCmpExpr:
		return "BinaryCmpExprToCmpExpr"
	case _ReduceToBinaryCmpExpr:
		return "ToBinaryCmpExpr"
	case _ReduceEqualToCmpOp:
		return "EqualToCmpOp"
	case _ReduceNotEqualToCmpOp:
		return "NotEqualToCmpOp"
	case _ReduceLessToCmpOp:
		return "LessToCmpOp"
	case _ReduceLessOrEqualToCmpOp:
		return "LessOrEqualToCmpOp"
	case _ReduceGreaterToCmpOp:
		return "GreaterToCmpOp"
	case _ReduceGreaterOrEqualToCmpOp:
		return "GreaterOrEqualToCmpOp"
	case _ReduceCmpExprToAndExpr:
		return "CmpExprToAndExpr"
	case _ReduceBinaryAndExprToAndExpr:
		return "BinaryAndExprToAndExpr"
	case _ReduceToBinaryAndExpr:
		return "ToBinaryAndExpr"
	case _ReduceAndExprToOrExpr:
		return "AndExprToOrExpr"
	case _ReduceBinaryOrExprToOrExpr:
		return "BinaryOrExprToOrExpr"
	case _ReduceToBinaryOrExpr:
		return "ToBinaryOrExpr"
	case _ReduceOrExprToSendRecvExpr:
		return "OrExprToSendRecvExpr"
	case _ReduceSendExprToSendRecvExpr:
		return "SendExprToSendRecvExpr"
	case _ReduceRecvExprToSendRecvExpr:
		return "RecvExprToSendRecvExpr"
	case _ReduceToSendExpr:
		return "ToSendExpr"
	case _ReduceToRecvExpr:
		return "ToRecvExpr"
	case _ReduceSendRecvExprToAssignOpExpr:
		return "SendRecvExprToAssignOpExpr"
	case _ReduceBinaryAssignOpExprToAssignOpExpr:
		return "BinaryAssignOpExprToAssignOpExpr"
	case _ReduceToBinaryAssignOpExpr:
		return "ToBinaryAssignOpExpr"
	case _ReduceAddAssignToBinaryAssignOp:
		return "AddAssignToBinaryAssignOp"
	case _ReduceSubAssignToBinaryAssignOp:
		return "SubAssignToBinaryAssignOp"
	case _ReduceMulAssignToBinaryAssignOp:
		return "MulAssignToBinaryAssignOp"
	case _ReduceDivAssignToBinaryAssignOp:
		return "DivAssignToBinaryAssignOp"
	case _ReduceModAssignToBinaryAssignOp:
		return "ModAssignToBinaryAssignOp"
	case _ReduceBitAndAssignToBinaryAssignOp:
		return "BitAndAssignToBinaryAssignOp"
	case _ReduceBitOrAssignToBinaryAssignOp:
		return "BitOrAssignToBinaryAssignOp"
	case _ReduceBitXorAssignToBinaryAssignOp:
		return "BitXorAssignToBinaryAssignOp"
	case _ReduceBitLshiftAssignToBinaryAssignOp:
		return "BitLshiftAssignToBinaryAssignOp"
	case _ReduceBitRshiftAssignToBinaryAssignOp:
		return "BitRshiftAssignToBinaryAssignOp"
	case _ReduceStatementsToUnlabelledControlFlowExpr:
		return "StatementsToUnlabelledControlFlowExpr"
	case _ReduceIfElseExprToUnlabelledControlFlowExpr:
		return "IfElseExprToUnlabelledControlFlowExpr"
	case _ReduceSwitchExprBodyToUnlabelledControlFlowExpr:
		return "SwitchExprBodyToUnlabelledControlFlowExpr"
	case _ReduceSelectExprBodyToUnlabelledControlFlowExpr:
		return "SelectExprBodyToUnlabelledControlFlowExpr"
	case _ReduceLoopExprBodyToUnlabelledControlFlowExpr:
		return "LoopExprBodyToUnlabelledControlFlowExpr"
	case _ReduceUnlabelledControlFlowExprToControlFlowExpr:
		return "UnlabelledControlFlowExprToControlFlowExpr"
	case _ReduceLabelledToControlFlowExpr:
		return "LabelledToControlFlowExpr"
	case _ReduceAssignOpExprToExpr:
		return "AssignOpExprToExpr"
	case _ReduceControlFlowExprToExpr:
		return "ControlFlowExprToExpr"
	case _ReduceAddrDeclPatternToExpr:
		return "AddrDeclPatternToExpr"
	case _ReduceAssignToAddrPatternToExpr:
		return "AssignToAddrPatternToExpr"
	case _ReduceToStatements:
		return "ToStatements"
	case _ReduceAddImplicitToProperStatementList:
		return "AddImplicitToProperStatementList"
	case _ReduceAddExplicitToProperStatementList:
		return "AddExplicitToProperStatementList"
	case _ReduceStatementToProperStatementList:
		return "StatementToProperStatementList"
	case _ReduceProperStatementListToStatementList:
		return "ProperStatementListToStatementList"
	case _ReduceImproperImplicitToStatementList:
		return "ImproperImplicitToStatementList"
	case _ReduceImproperExplicitToStatementList:
		return "ImproperExplicitToStatementList"
	case _ReduceNilToStatementList:
		return "NilToStatementList"
	case _ReduceIfElifExprToIfElseExpr:
		return "IfElifExprToIfElseExpr"
	case _ReduceElseToIfElseExpr:
		return "ElseToIfElseExpr"
	case _ReduceIfOnlyExprToIfElifExpr:
		return "IfOnlyExprToIfElifExpr"
	case _ReduceElifToIfElifExpr:
		return "ElifToIfElifExpr"
	case _ReduceToIfOnlyExpr:
		return "ToIfOnlyExpr"
	case _ReduceExprToCondition:
		return "ExprToCondition"
	case _ReduceCasePatternExprToCondition:
		return "CasePatternExprToCondition"
	case _ReduceToCasePatternExpr:
		return "ToCasePatternExpr"
	case _ReduceToSwitchExprBody:
		return "ToSwitchExprBody"
	case _ReduceToSelectExprBody:
		return "ToSelectExprBody"
	case _ReduceInfiniteToLoopExprBody:
		return "InfiniteToLoopExprBody"
	case _ReduceDoWhileToLoopExprBody:
		return "DoWhileToLoopExprBody"
	case _ReduceWhileToLoopExprBody:
		return "WhileToLoopExprBody"
	case _ReduceIteratorToLoopExprBody:
		return "IteratorToLoopExprBody"
	case _ReduceForToLoopExprBody:
		return "ForToLoopExprBody"
	case _ReduceToLoopBody:
		return "ToLoopBody"
	case _ReduceExprToReturnableExpr:
		return "ExprToReturnableExpr"
	case _ReduceImproperExprStructToReturnableExpr:
		return "ImproperExprStructToReturnableExpr"
	case _ReducePairToImproperExprStruct:
		return "PairToImproperExprStruct"
	case _ReduceAddToImproperExprStruct:
		return "AddToImproperExprStruct"
	case _ReduceSliceTypeExprToVariableSizedTypeExpr:
		return "SliceTypeExprToVariableSizedTypeExpr"
	case _ReduceMapTypeExprToVariableSizedTypeExpr:
		return "MapTypeExprToVariableSizedTypeExpr"
	case _ReducePropertiesTypeExprToInitializableTypeExpr:
		return "PropertiesTypeExprToInitializableTypeExpr"
	case _ReduceArrayTypeExprToInitializableTypeExpr:
		return "ArrayTypeExprToInitializableTypeExpr"
	case _ReduceVariableSizedTypeExprToInitializableTypeExpr:
		return "VariableSizedTypeExprToInitializableTypeExpr"
	case _ReduceToSliceTypeExpr:
		return "ToSliceTypeExpr"
	case _ReduceToArrayTypeExpr:
		return "ToArrayTypeExpr"
	case _ReduceToMapTypeExpr:
		return "ToMapTypeExpr"
	case _ReduceInitializableTypeExprToAtomTypeExpr:
		return "InitializableTypeExprToAtomTypeExpr"
	case _ReduceNamedTypeExprToAtomTypeExpr:
		return "NamedTypeExprToAtomTypeExpr"
	case _ReduceInferredTypeExprToAtomTypeExpr:
		return "InferredTypeExprToAtomTypeExpr"
	case _ReduceImplicitStructTypeExprToAtomTypeExpr:
		return "ImplicitStructTypeExprToAtomTypeExpr"
	case _ReduceImplicitEnumTypeExprToAtomTypeExpr:
		return "ImplicitEnumTypeExprToAtomTypeExpr"
	case _ReduceFuncSignatureToAtomTypeExpr:
		return "FuncSignatureToAtomTypeExpr"
	case _ReduceLocalToNamedTypeExpr:
		return "LocalToNamedTypeExpr"
	case _ReduceExternalToNamedTypeExpr:
		return "ExternalToNamedTypeExpr"
	case _ReduceToInferredTypeExpr:
		return "ToInferredTypeExpr"
	case _ReduceAtomTypeExprToReturnableTypeExpr:
		return "AtomTypeExprToReturnableTypeExpr"
	case _ReduceRefTypeExprToReturnableTypeExpr:
		return "RefTypeExprToReturnableTypeExpr"
	case _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr:
		return "DefaultEnumOpTypeExprToReturnableTypeExpr"
	case _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr:
		return "UnaryTraitOpTypeExprToReturnableTypeExpr"
	case _ReduceToRefTypeExpr:
		return "ToRefTypeExpr"
	case _ReduceToDefaultEnumOpTypeExpr:
		return "ToDefaultEnumOpTypeExpr"
	case _ReduceQuestionToDefaultEnumOp:
		return "QuestionToDefaultEnumOp"
	case _ReduceExclaimToDefaultEnumOp:
		return "ExclaimToDefaultEnumOp"
	case _ReduceToUnaryTraitOpTypeExpr:
		return "ToUnaryTraitOpTypeExpr"
	case _ReduceTildeToUnaryTraitOp:
		return "TildeToUnaryTraitOp"
	case _ReduceTildeTildeToUnaryTraitOp:
		return "TildeTildeToUnaryTraitOp"
	case _ReduceReturnableTypeExprToTypeExpr:
		return "ReturnableTypeExprToTypeExpr"
	case _ReduceBinaryTraitOpTypeExprToTypeExpr:
		return "BinaryTraitOpTypeExprToTypeExpr"
	case _ReduceToBinaryTraitOpTypeExpr:
		return "ToBinaryTraitOpTypeExpr"
	case _ReduceMulToBinaryTraitOp:
		return "MulToBinaryTraitOp"
	case _ReduceAddToBinaryTraitOp:
		return "AddToBinaryTraitOp"
	case _ReduceSubToBinaryTraitOp:
		return "SubToBinaryTraitOp"
	case _ReduceDefinitionToTypeDef:
		return "DefinitionToTypeDef"
	case _ReduceConstrainedDefToTypeDef:
		return "ConstrainedDefToTypeDef"
	case _ReduceToAliasDef:
		return "ToAliasDef"
	case _ReduceUnconstrainedToGenericParameter:
		return "UnconstrainedToGenericParameter"
	case _ReduceConstrainedToGenericParameter:
		return "ConstrainedToGenericParameter"
	case _ReduceGenericToGenericParameters:
		return "GenericToGenericParameters"
	case _ReduceNilToGenericParameters:
		return "NilToGenericParameters"
	case _ReduceAddToProperGenericParameterList:
		return "AddToProperGenericParameterList"
	case _ReduceGenericParameterToProperGenericParameterList:
		return "GenericParameterToProperGenericParameterList"
	case _ReduceProperGenericParameterListToGenericParameterList:
		return "ProperGenericParameterListToGenericParameterList"
	case _ReduceImproperImplicitToGenericParameterList:
		return "ImproperImplicitToGenericParameterList"
	case _ReduceImproperExplicitToGenericParameterList:
		return "ImproperExplicitToGenericParameterList"
	case _ReduceNilToGenericParameterList:
		return "NilToGenericParameterList"
	case _ReduceToGenericArguments:
		return "ToGenericArguments"
	case _ReduceGenericArgumentsToOptionalGenericArguments:
		return "GenericArgumentsToOptionalGenericArguments"
	case _ReduceNilToOptionalGenericArguments:
		return "NilToOptionalGenericArguments"
	case _ReduceAddToProperGenericArgumentList:
		return "AddToProperGenericArgumentList"
	case _ReduceTypeExprToProperGenericArgumentList:
		return "TypeExprToProperGenericArgumentList"
	case _ReduceProperGenericArgumentListToGenericArgumentList:
		return "ProperGenericArgumentListToGenericArgumentList"
	case _ReduceImproperImplicitToGenericArgumentList:
		return "ImproperImplicitToGenericArgumentList"
	case _ReduceImproperExplicitToGenericArgumentList:
		return "ImproperExplicitToGenericArgumentList"
	case _ReduceNilToGenericArgumentList:
		return "NilToGenericArgumentList"
	case _ReduceUnnamedFieldToTypeProperty:
		return "UnnamedFieldToTypeProperty"
	case _ReduceNamedFieldToTypeProperty:
		return "NamedFieldToTypeProperty"
	case _ReducePaddingFieldToTypeProperty:
		return "PaddingFieldToTypeProperty"
	case _ReduceVarTypeUnnamedFieldToTypeProperty:
		return "VarTypeUnnamedFieldToTypeProperty"
	case _ReduceVarTypeNamedFieldToTypeProperty:
		return "VarTypeNamedFieldToTypeProperty"
	case _ReduceDefaultNamedEnumFieldToTypeProperty:
		return "DefaultNamedEnumFieldToTypeProperty"
	case _ReduceDefaultUnnamedEnumFieldToTypeProperty:
		return "DefaultUnnamedEnumFieldToTypeProperty"
	case _ReduceFuncDefToTypeProperty:
		return "FuncDefToTypeProperty"
	case _ReduceAddToProperImplicitTypeProperties:
		return "AddToProperImplicitTypeProperties"
	case _ReduceTypePropertyToProperImplicitTypeProperties:
		return "TypePropertyToProperImplicitTypeProperties"
	case _ReduceProperImplicitTypePropertiesToImplicitTypeProperties:
		return "ProperImplicitTypePropertiesToImplicitTypeProperties"
	case _ReduceImproperImplicitToImplicitTypeProperties:
		return "ImproperImplicitToImplicitTypeProperties"
	case _ReduceImproperExplicitToImplicitTypeProperties:
		return "ImproperExplicitToImplicitTypeProperties"
	case _ReduceNilToImplicitTypeProperties:
		return "NilToImplicitTypeProperties"
	case _ReduceToImplicitStructTypeExpr:
		return "ToImplicitStructTypeExpr"
	case _ReducePairToProperImplicitEnumTypeProperties:
		return "PairToProperImplicitEnumTypeProperties"
	case _ReduceAddToProperImplicitEnumTypeProperties:
		return "AddToProperImplicitEnumTypeProperties"
	case _ReduceProperImplicitEnumTypePropertiesToImplicitEnumTypeProperties:
		return "ProperImplicitEnumTypePropertiesToImplicitEnumTypeProperties"
	case _ReduceImproperToImplicitEnumTypeProperties:
		return "ImproperToImplicitEnumTypeProperties"
	case _ReduceToImplicitEnumTypeExpr:
		return "ToImplicitEnumTypeExpr"
	case _ReduceAddImplicitToProperExplicitTypeProperties:
		return "AddImplicitToProperExplicitTypeProperties"
	case _ReduceAddExplicitToProperExplicitTypeProperties:
		return "AddExplicitToProperExplicitTypeProperties"
	case _ReduceTypePropertyToProperExplicitTypeProperties:
		return "TypePropertyToProperExplicitTypeProperties"
	case _ReduceProperExplicitTypePropertiesToExplicitTypeProperties:
		return "ProperExplicitTypePropertiesToExplicitTypeProperties"
	case _ReduceImproperImplicitToExplicitTypeProperties:
		return "ImproperImplicitToExplicitTypeProperties"
	case _ReduceImproperExplicitToExplicitTypeProperties:
		return "ImproperExplicitToExplicitTypeProperties"
	case _ReduceNilToExplicitTypeProperties:
		return "NilToExplicitTypeProperties"
	case _ReduceToPropertiesTypeExpr:
		return "ToPropertiesTypeExpr"
	case _ReduceStructToPropertiesKind:
		return "StructToPropertiesKind"
	case _ReduceTraitToPropertiesKind:
		return "TraitToPropertiesKind"
	case _ReduceEnumToPropertiesKind:
		return "EnumToPropertiesKind"
	case _ReduceReturnableTypeExprToReturnType:
		return "ReturnableTypeExprToReturnType"
	case _ReduceNilToReturnType:
		return "NilToReturnType"
	case _ReduceNamedArgToParameter:
		return "NamedArgToParameter"
	case _ReduceNamedReceiverToParameter:
		return "NamedReceiverToParameter"
	case _ReduceNamedVarargToParameter:
		return "NamedVarargToParameter"
	case _ReduceIgnoreArgToParameter:
		return "IgnoreArgToParameter"
	case _ReduceIgnoreReceiverToParameter:
		return "IgnoreReceiverToParameter"
	case _ReduceIgnoreVarargToParameter:
		return "IgnoreVarargToParameter"
	case _ReduceUnnamedArgToParameter:
		return "UnnamedArgToParameter"
	case _ReduceUnnamedReceiverToParameter:
		return "UnnamedReceiverToParameter"
	case _ReduceUnnamedVarargToParameter:
		return "UnnamedVarargToParameter"
	case _ReduceAddToProperParameterList:
		return "AddToProperParameterList"
	case _ReduceParameterToProperParameterList:
		return "ParameterToProperParameterList"
	case _ReduceProperParameterListToParameterList:
		return "ProperParameterListToParameterList"
	case _ReduceImproperImplicitToParameterList:
		return "ImproperImplicitToParameterList"
	case _ReduceImproperExplicitToParameterList:
		return "ImproperExplicitToParameterList"
	case _ReduceNilToParameterList:
		return "NilToParameterList"
	case _ReduceToParameters:
		return "ToParameters"
	case _ReduceAnonymousToFuncSignature:
		return "AnonymousToFuncSignature"
	case _ReduceNamedToFuncSignature:
		return "NamedToFuncSignature"
	case _ReduceToFuncDef:
		return "ToFuncDef"
	default:
		return fmt.Sprintf("?unknown reduce type %d?", int(i))
	}
}

type _StateId int

func (id _StateId) String() string {
	return fmt.Sprintf("State %d", int(id))
}

const (
	_State1   = _StateId(1)
	_State2   = _StateId(2)
	_State3   = _StateId(3)
	_State4   = _StateId(4)
	_State5   = _StateId(5)
	_State6   = _StateId(6)
	_State7   = _StateId(7)
	_State8   = _StateId(8)
	_State9   = _StateId(9)
	_State10  = _StateId(10)
	_State11  = _StateId(11)
	_State12  = _StateId(12)
	_State13  = _StateId(13)
	_State14  = _StateId(14)
	_State15  = _StateId(15)
	_State16  = _StateId(16)
	_State17  = _StateId(17)
	_State18  = _StateId(18)
	_State19  = _StateId(19)
	_State20  = _StateId(20)
	_State21  = _StateId(21)
	_State22  = _StateId(22)
	_State23  = _StateId(23)
	_State24  = _StateId(24)
	_State25  = _StateId(25)
	_State26  = _StateId(26)
	_State27  = _StateId(27)
	_State28  = _StateId(28)
	_State29  = _StateId(29)
	_State30  = _StateId(30)
	_State31  = _StateId(31)
	_State32  = _StateId(32)
	_State33  = _StateId(33)
	_State34  = _StateId(34)
	_State35  = _StateId(35)
	_State36  = _StateId(36)
	_State37  = _StateId(37)
	_State38  = _StateId(38)
	_State39  = _StateId(39)
	_State40  = _StateId(40)
	_State41  = _StateId(41)
	_State42  = _StateId(42)
	_State43  = _StateId(43)
	_State44  = _StateId(44)
	_State45  = _StateId(45)
	_State46  = _StateId(46)
	_State47  = _StateId(47)
	_State48  = _StateId(48)
	_State49  = _StateId(49)
	_State50  = _StateId(50)
	_State51  = _StateId(51)
	_State52  = _StateId(52)
	_State53  = _StateId(53)
	_State54  = _StateId(54)
	_State55  = _StateId(55)
	_State56  = _StateId(56)
	_State57  = _StateId(57)
	_State58  = _StateId(58)
	_State59  = _StateId(59)
	_State60  = _StateId(60)
	_State61  = _StateId(61)
	_State62  = _StateId(62)
	_State63  = _StateId(63)
	_State64  = _StateId(64)
	_State65  = _StateId(65)
	_State66  = _StateId(66)
	_State67  = _StateId(67)
	_State68  = _StateId(68)
	_State69  = _StateId(69)
	_State70  = _StateId(70)
	_State71  = _StateId(71)
	_State72  = _StateId(72)
	_State73  = _StateId(73)
	_State74  = _StateId(74)
	_State75  = _StateId(75)
	_State76  = _StateId(76)
	_State77  = _StateId(77)
	_State78  = _StateId(78)
	_State79  = _StateId(79)
	_State80  = _StateId(80)
	_State81  = _StateId(81)
	_State82  = _StateId(82)
	_State83  = _StateId(83)
	_State84  = _StateId(84)
	_State85  = _StateId(85)
	_State86  = _StateId(86)
	_State87  = _StateId(87)
	_State88  = _StateId(88)
	_State89  = _StateId(89)
	_State90  = _StateId(90)
	_State91  = _StateId(91)
	_State92  = _StateId(92)
	_State93  = _StateId(93)
	_State94  = _StateId(94)
	_State95  = _StateId(95)
	_State96  = _StateId(96)
	_State97  = _StateId(97)
	_State98  = _StateId(98)
	_State99  = _StateId(99)
	_State100 = _StateId(100)
	_State101 = _StateId(101)
	_State102 = _StateId(102)
	_State103 = _StateId(103)
	_State104 = _StateId(104)
	_State105 = _StateId(105)
	_State106 = _StateId(106)
	_State107 = _StateId(107)
	_State108 = _StateId(108)
	_State109 = _StateId(109)
	_State110 = _StateId(110)
	_State111 = _StateId(111)
	_State112 = _StateId(112)
	_State113 = _StateId(113)
	_State114 = _StateId(114)
	_State115 = _StateId(115)
	_State116 = _StateId(116)
	_State117 = _StateId(117)
	_State118 = _StateId(118)
	_State119 = _StateId(119)
	_State120 = _StateId(120)
	_State121 = _StateId(121)
	_State122 = _StateId(122)
	_State123 = _StateId(123)
	_State124 = _StateId(124)
	_State125 = _StateId(125)
	_State126 = _StateId(126)
	_State127 = _StateId(127)
	_State128 = _StateId(128)
	_State129 = _StateId(129)
	_State130 = _StateId(130)
	_State131 = _StateId(131)
	_State132 = _StateId(132)
	_State133 = _StateId(133)
	_State134 = _StateId(134)
	_State135 = _StateId(135)
	_State136 = _StateId(136)
	_State137 = _StateId(137)
	_State138 = _StateId(138)
	_State139 = _StateId(139)
	_State140 = _StateId(140)
	_State141 = _StateId(141)
	_State142 = _StateId(142)
	_State143 = _StateId(143)
	_State144 = _StateId(144)
	_State145 = _StateId(145)
	_State146 = _StateId(146)
	_State147 = _StateId(147)
	_State148 = _StateId(148)
	_State149 = _StateId(149)
	_State150 = _StateId(150)
	_State151 = _StateId(151)
	_State152 = _StateId(152)
	_State153 = _StateId(153)
	_State154 = _StateId(154)
	_State155 = _StateId(155)
	_State156 = _StateId(156)
	_State157 = _StateId(157)
	_State158 = _StateId(158)
	_State159 = _StateId(159)
	_State160 = _StateId(160)
	_State161 = _StateId(161)
	_State162 = _StateId(162)
	_State163 = _StateId(163)
	_State164 = _StateId(164)
	_State165 = _StateId(165)
	_State166 = _StateId(166)
	_State167 = _StateId(167)
	_State168 = _StateId(168)
	_State169 = _StateId(169)
	_State170 = _StateId(170)
	_State171 = _StateId(171)
	_State172 = _StateId(172)
	_State173 = _StateId(173)
	_State174 = _StateId(174)
	_State175 = _StateId(175)
	_State176 = _StateId(176)
	_State177 = _StateId(177)
	_State178 = _StateId(178)
	_State179 = _StateId(179)
	_State180 = _StateId(180)
	_State181 = _StateId(181)
	_State182 = _StateId(182)
	_State183 = _StateId(183)
	_State184 = _StateId(184)
	_State185 = _StateId(185)
	_State186 = _StateId(186)
	_State187 = _StateId(187)
	_State188 = _StateId(188)
	_State189 = _StateId(189)
	_State190 = _StateId(190)
	_State191 = _StateId(191)
	_State192 = _StateId(192)
	_State193 = _StateId(193)
	_State194 = _StateId(194)
	_State195 = _StateId(195)
	_State196 = _StateId(196)
	_State197 = _StateId(197)
	_State198 = _StateId(198)
	_State199 = _StateId(199)
	_State200 = _StateId(200)
	_State201 = _StateId(201)
	_State202 = _StateId(202)
	_State203 = _StateId(203)
	_State204 = _StateId(204)
	_State205 = _StateId(205)
	_State206 = _StateId(206)
	_State207 = _StateId(207)
	_State208 = _StateId(208)
	_State209 = _StateId(209)
	_State210 = _StateId(210)
	_State211 = _StateId(211)
	_State212 = _StateId(212)
	_State213 = _StateId(213)
	_State214 = _StateId(214)
	_State215 = _StateId(215)
	_State216 = _StateId(216)
	_State217 = _StateId(217)
	_State218 = _StateId(218)
	_State219 = _StateId(219)
	_State220 = _StateId(220)
	_State221 = _StateId(221)
	_State222 = _StateId(222)
	_State223 = _StateId(223)
	_State224 = _StateId(224)
	_State225 = _StateId(225)
	_State226 = _StateId(226)
	_State227 = _StateId(227)
	_State228 = _StateId(228)
	_State229 = _StateId(229)
	_State230 = _StateId(230)
	_State231 = _StateId(231)
	_State232 = _StateId(232)
	_State233 = _StateId(233)
	_State234 = _StateId(234)
	_State235 = _StateId(235)
	_State236 = _StateId(236)
	_State237 = _StateId(237)
	_State238 = _StateId(238)
	_State239 = _StateId(239)
	_State240 = _StateId(240)
	_State241 = _StateId(241)
	_State242 = _StateId(242)
	_State243 = _StateId(243)
	_State244 = _StateId(244)
	_State245 = _StateId(245)
	_State246 = _StateId(246)
	_State247 = _StateId(247)
	_State248 = _StateId(248)
	_State249 = _StateId(249)
	_State250 = _StateId(250)
	_State251 = _StateId(251)
	_State252 = _StateId(252)
	_State253 = _StateId(253)
	_State254 = _StateId(254)
)

type Symbol struct {
	SymbolId_ SymbolId

	Generic_ lexutil.TokenValue[SymbolId]

	Argument             *ast.Argument
	ArgumentList         *ast.ArgumentList
	CommentGroups        CommentGroupsTok
	ControlFlowExpr      ast.ControlFlowExpr
	Count                *TokenCount
	Directive            *ast.Directive
	DirectiveExpr        ast.DirectiveExpression
	DirectiveExprList    *ast.DirectiveExpressionList
	DirectiveList        *ast.DirectiveList
	DirectivesDecl       *ast.DirectivesDecl
	Expression           ast.Expression
	ExpressionList       *ast.ExpressionList
	FuncDefinition       *ast.FuncDefinition
	FuncSignature        *ast.FuncSignature
	GenericParameter     *ast.GenericParameter
	GenericParameterList *ast.GenericParameterList
	IfExpr               *ast.IfExpr
	ImplicitStructExpr   *ast.ImplicitStructExpr
	ImportClause         *ast.ImportClause
	ImportClauseList     *ast.ImportClauseList
	MakeExpr             *ast.MakeExpr
	Parameter            *ast.Parameter
	Parameters           *ast.ParameterList
	ParseError           *ParseErrorSymbol
	Statement            ast.Statement
	StatementList        *ast.StatementList
	StatementsExpr       *ast.StatementsExpr
	TypeExpression       ast.TypeExpression
	TypeExpressionList   *ast.TypeExpressionList
	TypeProperties       *ast.TypePropertyList
	TypeProperty         ast.TypeProperty
	UnsafeStmt           *ast.UnsafeStmt
	Value                *TokenValue
}

func NewSymbol(token lexutil.Token[SymbolId]) (*Symbol, error) {
	symbol, ok := token.(*Symbol)
	if ok {
		return symbol, nil
	}

	symbol = &Symbol{SymbolId_: token.Id()}
	switch token.Id() {
	case CommentGroupsToken:
		val, ok := token.(CommentGroupsTok)
		if !ok {
			return nil, lexutil.NewLocationError(
				token.Loc(),
				"invalid value type for token %s. "+
					"expecting CommentGroupsTok",
				token.Id())
		}
		symbol.CommentGroups = val
	case NewlinesToken:
		val, ok := token.(*TokenCount)
		if !ok {
			return nil, lexutil.NewLocationError(
				token.Loc(),
				"invalid value type for token %s. "+
					"expecting *TokenCount",
				token.Id())
		}
		symbol.Count = val
	case _EndMarker:
		val, ok := token.(lexutil.TokenValue[SymbolId])
		if !ok {
			return nil, lexutil.NewLocationError(
				token.Loc(),
				"invalid value type for token %s. "+
					"expecting lexutil.TokenValue[SymbolId]",
				token.Id())
		}
		symbol.Generic_ = val
	case ParseErrorToken:
		val, ok := token.(*ParseErrorSymbol)
		if !ok {
			return nil, lexutil.NewLocationError(
				token.Loc(),
				"invalid value type for token %s. "+
					"expecting *ParseErrorSymbol",
				token.Id())
		}
		symbol.ParseError = val
	case IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, ElseToken, SwitchToken, CaseToken, DefaultToken, ForToken, DoToken, InToken, SelectToken, ReturnToken, BreakToken, ContinueToken, FallthroughToken, ImportToken, UnsafeToken, TypeToken, ImplementsToken, AliasToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, AsToken, MakeToken, NotToken, AndToken, OrToken, PoundToken, AtToken, LbraceToken, RbraceToken, LparenToken, RparenToken, LbracketToken, RbracketToken, DotToken, CommaToken, QuestionToken, SemicolonToken, ColonToken, ExclaimToken, DollarToken, EllipsisToken, TildeToken, TildeTildeToken, AssignToken, ArrowToken, AddAssignToken, SubAssignToken, MulAssignToken, DivAssignToken, ModAssignToken, AddOneAssignToken, SubOneAssignToken, BitAndAssignToken, BitOrAssignToken, BitXorAssignToken, BitLshiftAssignToken, BitRshiftAssignToken, AddToken, SubToken, MulToken, DivToken, ModToken, BitAndToken, BitXorToken, BitOrToken, BitLshiftToken, BitRshiftToken, EqualToken, NotEqualToken, LessToken, LessOrEqualToken, GreaterToken, GreaterOrEqualToken:
		val, ok := token.(*TokenValue)
		if !ok {
			return nil, lexutil.NewLocationError(
				token.Loc(),
				"invalid value type for token %s. "+
					"expecting *TokenValue",
				token.Id())
		}
		symbol.Value = val
	default:
		return nil, lexutil.NewLocationError(
			token.Loc(),
			"unexpected token type: %s",
			token.Id())
	}
	return symbol, nil
}

func (s *Symbol) Id() SymbolId {
	return s.SymbolId_
}

func (s *Symbol) Loc() lexutil.Location {
	type locator interface{ Loc() lexutil.Location }
	switch s.SymbolId_ {
	case ArgumentType:
		loc, ok := interface{}(s.Argument).(locator)
		if ok {
			return loc.Loc()
		}
	case ProperArgumentsType, ArgumentsType:
		loc, ok := interface{}(s.ArgumentList).(locator)
		if ok {
			return loc.Loc()
		}
	case CommentGroupsToken:
		loc, ok := interface{}(s.CommentGroups).(locator)
		if ok {
			return loc.Loc()
		}
	case UnlabelledControlFlowExprType, ControlFlowExprType, SwitchExprBodyType, SelectExprBodyType, LoopExprBodyType:
		loc, ok := interface{}(s.ControlFlowExpr).(locator)
		if ok {
			return loc.Loc()
		}
	case NewlinesToken:
		loc, ok := interface{}(s.Count).(locator)
		if ok {
			return loc.Loc()
		}
	case DirectiveType:
		loc, ok := interface{}(s.Directive).(locator)
		if ok {
			return loc.Loc()
		}
	case DirectiveExprType, DirectiveAndExprType, DirectiveNotExprType, DirectiveAtomExprType, DirectiveValueExprType:
		loc, ok := interface{}(s.DirectiveExpr).(locator)
		if ok {
			return loc.Loc()
		}
	case DirectiveExprsType, ProperDirectiveExprsType:
		loc, ok := interface{}(s.DirectiveExprList).(locator)
		if ok {
			return loc.Loc()
		}
	case DirectivesType:
		loc, ok := interface{}(s.DirectiveList).(locator)
		if ok {
			return loc.Loc()
		}
	case DirectivesDeclarationType:
		loc, ok := interface{}(s.DirectivesDecl).(locator)
		if ok {
			return loc.Loc()
		}
	case BlockAddrDeclItemType, AddrDeclPatternType, AssignToAddrPatternType, NewAddressableType, AssignSelectablePatternType, SwitchableCasePatternType, EnumPatternType, AtomExprType, ParseErrorExprType, LiteralExprType, NamedExprType, InitializeExprType, ImplicitStructExprType, AccessibleExprType, AccessExprType, IndexExprType, IndexType, AsExprType, ParameterizedExprType, CallExprType, PostfixableExprType, PostfixUnaryExprType, PrefixableExprType, PrefixUnaryExprType, MulExprType, BinaryMulExprType, AddExprType, BinaryAddExprType, CmpExprType, BinaryCmpExprType, AndExprType, BinaryAndExprType, OrExprType, BinaryOrExprType, SendRecvExprType, SendExprType, RecvExprType, AssignOpExprType, BinaryAssignOpExprType, ExprType, ConditionType, CasePatternExprType, ReturnableExprType:
		loc, ok := interface{}(s.Expression).(locator)
		if ok {
			return loc.Loc()
		}
	case BlockAddrDeclListType, ProperBlockAddrDeclListType, CasePatternsType, SwitchableCasePatternsType:
		loc, ok := interface{}(s.ExpressionList).(locator)
		if ok {
			return loc.Loc()
		}
	case FuncDefType:
		loc, ok := interface{}(s.FuncDefinition).(locator)
		if ok {
			return loc.Loc()
		}
	case FuncSignatureType:
		loc, ok := interface{}(s.FuncSignature).(locator)
		if ok {
			return loc.Loc()
		}
	case GenericParameterType:
		loc, ok := interface{}(s.GenericParameter).(locator)
		if ok {
			return loc.Loc()
		}
	case GenericParametersType, ProperGenericParameterListType, GenericParameterListType:
		loc, ok := interface{}(s.GenericParameterList).(locator)
		if ok {
			return loc.Loc()
		}
	case IfElseExprType, IfElifExprType, IfOnlyExprType:
		loc, ok := interface{}(s.IfExpr).(locator)
		if ok {
			return loc.Loc()
		}
	case ColonExprType, ImproperExprStructType:
		loc, ok := interface{}(s.ImplicitStructExpr).(locator)
		if ok {
			return loc.Loc()
		}
	case ImportClauseType:
		loc, ok := interface{}(s.ImportClause).(locator)
		if ok {
			return loc.Loc()
		}
	case ProperImportClausesType, ImportClausesType:
		loc, ok := interface{}(s.ImportClauseList).(locator)
		if ok {
			return loc.Loc()
		}
	case MakeExprType, MakeExprSizeType, MakeExprHeadType:
		loc, ok := interface{}(s.MakeExpr).(locator)
		if ok {
			return loc.Loc()
		}
	case ParameterType:
		loc, ok := interface{}(s.Parameter).(locator)
		if ok {
			return loc.Loc()
		}
	case ProperParameterListType, ParameterListType, ParametersType:
		loc, ok := interface{}(s.Parameters).(locator)
		if ok {
			return loc.Loc()
		}
	case ParseErrorToken:
		loc, ok := interface{}(s.ParseError).(locator)
		if ok {
			return loc.Loc()
		}
	case StatementType, FloatingCommentType, BranchStmtType, OptionalStatementType, JumpStmtType, AssignStmtType, ImportStmtType, BlockAddrDeclStmtType, TypeDefType, AliasDefType:
		loc, ok := interface{}(s.Statement).(locator)
		if ok {
			return loc.Loc()
		}
	case SourceType, ProperStatementListType, StatementListType:
		loc, ok := interface{}(s.StatementList).(locator)
		if ok {
			return loc.Loc()
		}
	case StatementsType, LoopBodyType:
		loc, ok := interface{}(s.StatementsExpr).(locator)
		if ok {
			return loc.Loc()
		}
	case VariableSizedTypeExprType, InitializableTypeExprType, SliceTypeExprType, ArrayTypeExprType, MapTypeExprType, AtomTypeExprType, NamedTypeExprType, InferredTypeExprType, ReturnableTypeExprType, RefTypeExprType, DefaultEnumOpTypeExprType, UnaryTraitOpTypeExprType, TypeExprType, BinaryTraitOpTypeExprType, ImplicitStructTypeExprType, ImplicitEnumTypeExprType, PropertiesTypeExprType, ReturnTypeType:
		loc, ok := interface{}(s.TypeExpression).(locator)
		if ok {
			return loc.Loc()
		}
	case GenericArgumentsType, OptionalGenericArgumentsType, ProperGenericArgumentListType, GenericArgumentListType:
		loc, ok := interface{}(s.TypeExpressionList).(locator)
		if ok {
			return loc.Loc()
		}
	case ProperImplicitTypePropertiesType, ImplicitTypePropertiesType, ProperImplicitEnumTypePropertiesType, ImplicitEnumTypePropertiesType, ProperExplicitTypePropertiesType, ExplicitTypePropertiesType:
		loc, ok := interface{}(s.TypeProperties).(locator)
		if ok {
			return loc.Loc()
		}
	case TypePropertyType:
		loc, ok := interface{}(s.TypeProperty).(locator)
		if ok {
			return loc.Loc()
		}
	case UnsafeStmtType:
		loc, ok := interface{}(s.UnsafeStmt).(locator)
		if ok {
			return loc.Loc()
		}
	case IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, ElseToken, SwitchToken, CaseToken, DefaultToken, ForToken, DoToken, InToken, SelectToken, ReturnToken, BreakToken, ContinueToken, FallthroughToken, ImportToken, UnsafeToken, TypeToken, ImplementsToken, AliasToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, AsToken, MakeToken, NotToken, AndToken, OrToken, PoundToken, AtToken, LbraceToken, RbraceToken, LparenToken, RparenToken, LbracketToken, RbracketToken, DotToken, CommaToken, QuestionToken, SemicolonToken, ColonToken, ExclaimToken, DollarToken, EllipsisToken, TildeToken, TildeTildeToken, AssignToken, ArrowToken, AddAssignToken, SubAssignToken, MulAssignToken, DivAssignToken, ModAssignToken, AddOneAssignToken, SubOneAssignToken, BitAndAssignToken, BitOrAssignToken, BitXorAssignToken, BitLshiftAssignToken, BitRshiftAssignToken, AddToken, SubToken, MulToken, DivToken, ModToken, BitAndToken, BitXorToken, BitOrToken, BitLshiftToken, BitRshiftToken, EqualToken, NotEqualToken, LessToken, LessOrEqualToken, GreaterToken, GreaterOrEqualToken, DirectiveValueType, JumpOpType, VarTypeType, PostfixUnaryOpType, PrefixUnaryOpType, MulOpType, AddOpType, CmpOpType, BinaryAssignOpType, DefaultEnumOpType, UnaryTraitOpType, BinaryTraitOpType, PropertiesKindType:
		loc, ok := interface{}(s.Value).(locator)
		if ok {
			return loc.Loc()
		}
	}
	return s.Generic_.Loc()
}

func (s *Symbol) End() lexutil.Location {
	type locator interface{ End() lexutil.Location }
	switch s.SymbolId_ {
	case ArgumentType:
		loc, ok := interface{}(s.Argument).(locator)
		if ok {
			return loc.End()
		}
	case ProperArgumentsType, ArgumentsType:
		loc, ok := interface{}(s.ArgumentList).(locator)
		if ok {
			return loc.End()
		}
	case CommentGroupsToken:
		loc, ok := interface{}(s.CommentGroups).(locator)
		if ok {
			return loc.End()
		}
	case UnlabelledControlFlowExprType, ControlFlowExprType, SwitchExprBodyType, SelectExprBodyType, LoopExprBodyType:
		loc, ok := interface{}(s.ControlFlowExpr).(locator)
		if ok {
			return loc.End()
		}
	case NewlinesToken:
		loc, ok := interface{}(s.Count).(locator)
		if ok {
			return loc.End()
		}
	case DirectiveType:
		loc, ok := interface{}(s.Directive).(locator)
		if ok {
			return loc.End()
		}
	case DirectiveExprType, DirectiveAndExprType, DirectiveNotExprType, DirectiveAtomExprType, DirectiveValueExprType:
		loc, ok := interface{}(s.DirectiveExpr).(locator)
		if ok {
			return loc.End()
		}
	case DirectiveExprsType, ProperDirectiveExprsType:
		loc, ok := interface{}(s.DirectiveExprList).(locator)
		if ok {
			return loc.End()
		}
	case DirectivesType:
		loc, ok := interface{}(s.DirectiveList).(locator)
		if ok {
			return loc.End()
		}
	case DirectivesDeclarationType:
		loc, ok := interface{}(s.DirectivesDecl).(locator)
		if ok {
			return loc.End()
		}
	case BlockAddrDeclItemType, AddrDeclPatternType, AssignToAddrPatternType, NewAddressableType, AssignSelectablePatternType, SwitchableCasePatternType, EnumPatternType, AtomExprType, ParseErrorExprType, LiteralExprType, NamedExprType, InitializeExprType, ImplicitStructExprType, AccessibleExprType, AccessExprType, IndexExprType, IndexType, AsExprType, ParameterizedExprType, CallExprType, PostfixableExprType, PostfixUnaryExprType, PrefixableExprType, PrefixUnaryExprType, MulExprType, BinaryMulExprType, AddExprType, BinaryAddExprType, CmpExprType, BinaryCmpExprType, AndExprType, BinaryAndExprType, OrExprType, BinaryOrExprType, SendRecvExprType, SendExprType, RecvExprType, AssignOpExprType, BinaryAssignOpExprType, ExprType, ConditionType, CasePatternExprType, ReturnableExprType:
		loc, ok := interface{}(s.Expression).(locator)
		if ok {
			return loc.End()
		}
	case BlockAddrDeclListType, ProperBlockAddrDeclListType, CasePatternsType, SwitchableCasePatternsType:
		loc, ok := interface{}(s.ExpressionList).(locator)
		if ok {
			return loc.End()
		}
	case FuncDefType:
		loc, ok := interface{}(s.FuncDefinition).(locator)
		if ok {
			return loc.End()
		}
	case FuncSignatureType:
		loc, ok := interface{}(s.FuncSignature).(locator)
		if ok {
			return loc.End()
		}
	case GenericParameterType:
		loc, ok := interface{}(s.GenericParameter).(locator)
		if ok {
			return loc.End()
		}
	case GenericParametersType, ProperGenericParameterListType, GenericParameterListType:
		loc, ok := interface{}(s.GenericParameterList).(locator)
		if ok {
			return loc.End()
		}
	case IfElseExprType, IfElifExprType, IfOnlyExprType:
		loc, ok := interface{}(s.IfExpr).(locator)
		if ok {
			return loc.End()
		}
	case ColonExprType, ImproperExprStructType:
		loc, ok := interface{}(s.ImplicitStructExpr).(locator)
		if ok {
			return loc.End()
		}
	case ImportClauseType:
		loc, ok := interface{}(s.ImportClause).(locator)
		if ok {
			return loc.End()
		}
	case ProperImportClausesType, ImportClausesType:
		loc, ok := interface{}(s.ImportClauseList).(locator)
		if ok {
			return loc.End()
		}
	case MakeExprType, MakeExprSizeType, MakeExprHeadType:
		loc, ok := interface{}(s.MakeExpr).(locator)
		if ok {
			return loc.End()
		}
	case ParameterType:
		loc, ok := interface{}(s.Parameter).(locator)
		if ok {
			return loc.End()
		}
	case ProperParameterListType, ParameterListType, ParametersType:
		loc, ok := interface{}(s.Parameters).(locator)
		if ok {
			return loc.End()
		}
	case ParseErrorToken:
		loc, ok := interface{}(s.ParseError).(locator)
		if ok {
			return loc.End()
		}
	case StatementType, FloatingCommentType, BranchStmtType, OptionalStatementType, JumpStmtType, AssignStmtType, ImportStmtType, BlockAddrDeclStmtType, TypeDefType, AliasDefType:
		loc, ok := interface{}(s.Statement).(locator)
		if ok {
			return loc.End()
		}
	case SourceType, ProperStatementListType, StatementListType:
		loc, ok := interface{}(s.StatementList).(locator)
		if ok {
			return loc.End()
		}
	case StatementsType, LoopBodyType:
		loc, ok := interface{}(s.StatementsExpr).(locator)
		if ok {
			return loc.End()
		}
	case VariableSizedTypeExprType, InitializableTypeExprType, SliceTypeExprType, ArrayTypeExprType, MapTypeExprType, AtomTypeExprType, NamedTypeExprType, InferredTypeExprType, ReturnableTypeExprType, RefTypeExprType, DefaultEnumOpTypeExprType, UnaryTraitOpTypeExprType, TypeExprType, BinaryTraitOpTypeExprType, ImplicitStructTypeExprType, ImplicitEnumTypeExprType, PropertiesTypeExprType, ReturnTypeType:
		loc, ok := interface{}(s.TypeExpression).(locator)
		if ok {
			return loc.End()
		}
	case GenericArgumentsType, OptionalGenericArgumentsType, ProperGenericArgumentListType, GenericArgumentListType:
		loc, ok := interface{}(s.TypeExpressionList).(locator)
		if ok {
			return loc.End()
		}
	case ProperImplicitTypePropertiesType, ImplicitTypePropertiesType, ProperImplicitEnumTypePropertiesType, ImplicitEnumTypePropertiesType, ProperExplicitTypePropertiesType, ExplicitTypePropertiesType:
		loc, ok := interface{}(s.TypeProperties).(locator)
		if ok {
			return loc.End()
		}
	case TypePropertyType:
		loc, ok := interface{}(s.TypeProperty).(locator)
		if ok {
			return loc.End()
		}
	case UnsafeStmtType:
		loc, ok := interface{}(s.UnsafeStmt).(locator)
		if ok {
			return loc.End()
		}
	case IntegerLiteralToken, FloatLiteralToken, RuneLiteralToken, StringLiteralToken, IdentifierToken, UnderscoreToken, TrueToken, FalseToken, IfToken, ElseToken, SwitchToken, CaseToken, DefaultToken, ForToken, DoToken, InToken, SelectToken, ReturnToken, BreakToken, ContinueToken, FallthroughToken, ImportToken, UnsafeToken, TypeToken, ImplementsToken, AliasToken, StructToken, EnumToken, TraitToken, FuncToken, AsyncToken, DeferToken, VarToken, LetToken, AsToken, MakeToken, NotToken, AndToken, OrToken, PoundToken, AtToken, LbraceToken, RbraceToken, LparenToken, RparenToken, LbracketToken, RbracketToken, DotToken, CommaToken, QuestionToken, SemicolonToken, ColonToken, ExclaimToken, DollarToken, EllipsisToken, TildeToken, TildeTildeToken, AssignToken, ArrowToken, AddAssignToken, SubAssignToken, MulAssignToken, DivAssignToken, ModAssignToken, AddOneAssignToken, SubOneAssignToken, BitAndAssignToken, BitOrAssignToken, BitXorAssignToken, BitLshiftAssignToken, BitRshiftAssignToken, AddToken, SubToken, MulToken, DivToken, ModToken, BitAndToken, BitXorToken, BitOrToken, BitLshiftToken, BitRshiftToken, EqualToken, NotEqualToken, LessToken, LessOrEqualToken, GreaterToken, GreaterOrEqualToken, DirectiveValueType, JumpOpType, VarTypeType, PostfixUnaryOpType, PrefixUnaryOpType, MulOpType, AddOpType, CmpOpType, BinaryAssignOpType, DefaultEnumOpType, UnaryTraitOpType, BinaryTraitOpType, PropertiesKindType:
		loc, ok := interface{}(s.Value).(locator)
		if ok {
			return loc.End()
		}
	}
	return s.Generic_.End()
}

type _PseudoSymbolStack struct {
	lexer lexutil.Lexer[lexutil.Token[SymbolId]]
	top   []*Symbol
}

func (stack *_PseudoSymbolStack) Top() (*Symbol, error) {
	if len(stack.top) == 0 {
		token, err := stack.lexer.Next()
		if err != nil {
			if err != io.EOF {
				return nil, lexutil.NewLocationError(
					stack.lexer.CurrentLocation(),
					"unexpected lex error: %w",
					err)
			}
			token = lexutil.TokenValue[SymbolId]{
				SymbolId: _EndMarker,
				StartEndPos: lexutil.StartEndPos{
					StartPos: stack.lexer.CurrentLocation(),
					EndPos:   stack.lexer.CurrentLocation(),
				},
			}
		}
		item, err := NewSymbol(token)
		if err != nil {
			return nil, err
		}
		stack.top = append(stack.top, item)
	}
	return stack.top[len(stack.top)-1], nil
}

func (stack *_PseudoSymbolStack) Push(symbol *Symbol) {
	stack.top = append(stack.top, symbol)
}

func (stack *_PseudoSymbolStack) Pop() (*Symbol, error) {
	if len(stack.top) == 0 {
		return nil, fmt.Errorf("internal error: cannot pop an empty top")
	}
	ret := stack.top[len(stack.top)-1]
	stack.top = stack.top[:len(stack.top)-1]
	return ret, nil
}

type _StackItem struct {
	StateId _StateId

	*Symbol
}

type _Stack []*_StackItem

type _Action struct {
	ActionType _ActionType

	ShiftStateId _StateId
	ReduceType   _ReduceType
}

func (act *_Action) ShiftItem(symbol *Symbol) *_StackItem {
	return &_StackItem{StateId: act.ShiftStateId, Symbol: symbol}
}

func (act *_Action) ReduceSymbol(
	reducer Reducer,
	stack _Stack,
) (
	_Stack,
	*Symbol,
	error,
) {
	var err error
	symbol := &Symbol{}
	switch act.ReduceType {
	case _ReduceStatementListToSource:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = SourceType
		//line grammar.lr:65:4
		symbol.StatementList = args[0].StatementList
		err = nil
	case _ReduceToDirectivesDeclaration:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = DirectivesDeclarationType
		symbol.DirectivesDecl, err = reducer.ToDirectivesDeclaration(args[0].Value, args[1].Value, args[2].DirectiveList, args[3].Value)
	case _ReduceDirectiveToDirectives:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectivesType
		symbol.DirectiveList, err = reducer.DirectiveToDirectives(args[0].Directive)
	case _ReduceAddToDirectives:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = DirectivesType
		symbol.DirectiveList, err = reducer.AddToDirectives(args[0].DirectiveList, args[1].Value, args[2].Directive)
	case _ReduceNamedToDirective:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = DirectiveType
		symbol.Directive, err = reducer.NamedToDirective(args[0].Value, args[1].DirectiveExprList)
	case _ReduceCompoundNamedToDirective:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = DirectiveType
		symbol.Directive, err = reducer.CompoundNamedToDirective(args[0].Value, args[1].Value, args[2].Value, args[3].DirectiveExprList)
	case _ReduceProperDirectiveExprsToDirectiveExprs:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveExprsType
		//line grammar.lr:90:4
		symbol.DirectiveExprList = args[0].DirectiveExprList
		err = nil
	case _ReduceNilToDirectiveExprs:
		symbol.SymbolId_ = DirectiveExprsType
		symbol.DirectiveExprList, err = reducer.NilToDirectiveExprs()
	case _ReduceDirectiveExprToProperDirectiveExprs:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperDirectiveExprsType
		symbol.DirectiveExprList, err = reducer.DirectiveExprToProperDirectiveExprs(args[0].DirectiveExpr)
	case _ReduceAddToProperDirectiveExprs:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperDirectiveExprsType
		symbol.DirectiveExprList, err = reducer.AddToProperDirectiveExprs(args[0].DirectiveExprList, args[1].Value, args[2].DirectiveExpr)
	case _ReduceDirectiveAndExprToDirectiveExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveExprType
		//line grammar.lr:98:4
		symbol.DirectiveExpr = args[0].DirectiveExpr
		err = nil
	case _ReduceOrToDirectiveExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = DirectiveExprType
		symbol.DirectiveExpr, err = reducer.OrToDirectiveExpr(args[0].DirectiveExpr, args[1].Value, args[2].DirectiveExpr)
	case _ReduceDirectiveNotExprToDirectiveAndExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveAndExprType
		//line grammar.lr:102:4
		symbol.DirectiveExpr = args[0].DirectiveExpr
		err = nil
	case _ReduceAndToDirectiveAndExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = DirectiveAndExprType
		symbol.DirectiveExpr, err = reducer.AndToDirectiveAndExpr(args[0].DirectiveExpr, args[1].Value, args[2].DirectiveExpr)
	case _ReduceDirectiveAtomExprToDirectiveNotExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveNotExprType
		//line grammar.lr:106:4
		symbol.DirectiveExpr = args[0].DirectiveExpr
		err = nil
	case _ReduceNotToDirectiveNotExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = DirectiveNotExprType
		symbol.DirectiveExpr, err = reducer.NotToDirectiveNotExpr(args[0].Value, args[1].DirectiveExpr)
	case _ReduceDirectiveValueExprToDirectiveAtomExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveAtomExprType
		//line grammar.lr:110:4
		symbol.DirectiveExpr = args[0].DirectiveExpr
		err = nil
	case _ReduceGroupToDirectiveAtomExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = DirectiveAtomExprType
		symbol.DirectiveExpr, err = reducer.GroupToDirectiveAtomExpr(args[0].Value, args[1].DirectiveExpr, args[2].Value)
	case _ReduceToDirectiveValueExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueExprType
		symbol.DirectiveExpr, err = reducer.ToDirectiveValueExpr(args[0].Value)
	case _ReduceIdentifierToDirectiveValue:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueType
		//line grammar.lr:116:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceUnderscoreToDirectiveValue:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueType
		//line grammar.lr:117:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceTrueToDirectiveValue:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueType
		//line grammar.lr:118:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceFalseToDirectiveValue:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueType
		//line grammar.lr:119:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceIntegerLiteralToDirectiveValue:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueType
		//line grammar.lr:120:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceFloatLiteralToDirectiveValue:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueType
		//line grammar.lr:121:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceRuneLiteralToDirectiveValue:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueType
		//line grammar.lr:122:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceStringLiteralToDirectiveValue:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DirectiveValueType
		//line grammar.lr:123:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceUnsafeStmtToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:130:4
		symbol.Statement = args[0].UnsafeStmt
		err = nil
	case _ReduceDirectivesDeclarationToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:132:4
		symbol.Statement = args[0].DirectivesDecl
		err = nil
	case _ReduceImportStmtToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:136:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceFloatingCommentToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:137:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceTypeDefToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:138:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceAliasDefToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:139:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceBranchStmtToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:142:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceReturnableExprToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:146:4
		symbol.Statement = args[0].Expression
		err = nil
	case _ReduceJumpStmtToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:147:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceAssignStmtToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:151:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceBlockAddrDeclStmtToStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementType
		//line grammar.lr:153:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceToFloatingComment:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = FloatingCommentType
		symbol.Statement, err = reducer.ToFloatingComment(args[0].CommentGroups)
	case _ReduceCaseBranchToBranchStmt:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = BranchStmtType
		symbol.Statement, err = reducer.CaseBranchToBranchStmt(args[0].Value, args[1].ExpressionList, args[2].Value, args[3].Statement)
	case _ReduceDefaultBranchToBranchStmt:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BranchStmtType
		symbol.Statement, err = reducer.DefaultBranchToBranchStmt(args[0].Value, args[1].Value, args[2].Statement)
	case _ReduceStatementToOptionalStatement:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = OptionalStatementType
		//line grammar.lr:174:4
		symbol.Statement = args[0].Statement
		err = nil
	case _ReduceNilToOptionalStatement:
		symbol.SymbolId_ = OptionalStatementType
		symbol.Statement, err = reducer.NilToOptionalStatement()
	case _ReduceToUnsafeStmt:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = UnsafeStmtType
		symbol.UnsafeStmt, err = reducer.ToUnsafeStmt(args[0].Value, args[1].Value, args[2].Value, args[3].Value, args[4].Value)
	case _ReduceUnlabeledNoValueToJumpStmt:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = JumpStmtType
		symbol.Statement, err = reducer.UnlabeledNoValueToJumpStmt(args[0].Value)
	case _ReduceUnlabeledValuedToJumpStmt:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = JumpStmtType
		symbol.Statement, err = reducer.UnlabeledValuedToJumpStmt(args[0].Value, args[1].Expression)
	case _ReduceLabeledNoValueToJumpStmt:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = JumpStmtType
		symbol.Statement, err = reducer.LabeledNoValueToJumpStmt(args[0].Value, args[1].Value, args[2].Value)
	case _ReduceLabeledValuedToJumpStmt:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = JumpStmtType
		symbol.Statement, err = reducer.LabeledValuedToJumpStmt(args[0].Value, args[1].Value, args[2].Value, args[3].Expression)
	case _ReduceFallthroughToJumpStmt:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = JumpStmtType
		symbol.Statement, err = reducer.FallthroughToJumpStmt(args[0].Value)
	case _ReduceReturnToJumpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = JumpOpType
		//line grammar.lr:200:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBreakToJumpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = JumpOpType
		//line grammar.lr:201:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceContinueToJumpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = JumpOpType
		//line grammar.lr:202:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceToAssignStmt:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = AssignStmtType
		symbol.Statement, err = reducer.ToAssignStmt(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceSingleToImportStmt:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImportStmtType
		symbol.Statement, err = reducer.SingleToImportStmt(args[0].Value, args[1].ImportClause)
	case _ReduceMultipleToImportStmt:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = ImportStmtType
		symbol.Statement, err = reducer.MultipleToImportStmt(args[0].Value, args[1].Value, args[2].ImportClauseList, args[3].Value)
	case _ReduceAddImplicitToProperImportClauses:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperImportClausesType
		symbol.ImportClauseList, err = reducer.AddImplicitToProperImportClauses(args[0].ImportClauseList, args[1].Count, args[2].ImportClause)
	case _ReduceAddExplicitToProperImportClauses:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperImportClausesType
		symbol.ImportClauseList, err = reducer.AddExplicitToProperImportClauses(args[0].ImportClauseList, args[1].Value, args[2].ImportClause)
	case _ReduceImportClauseToProperImportClauses:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperImportClausesType
		symbol.ImportClauseList, err = reducer.ImportClauseToProperImportClauses(args[0].ImportClause)
	case _ReduceProperImportClausesToImportClauses:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ImportClausesType
		//line grammar.lr:228:4
		symbol.ImportClauseList = args[0].ImportClauseList
		err = nil
	case _ReduceImplicitToImportClauses:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImportClausesType
		symbol.ImportClauseList, err = reducer.ImplicitToImportClauses(args[0].ImportClauseList, args[1].Count)
	case _ReduceExplicitToImportClauses:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImportClausesType
		symbol.ImportClauseList, err = reducer.ExplicitToImportClauses(args[0].ImportClauseList, args[1].Value)
	case _ReduceStringLiteralToImportClause:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ImportClauseType
		symbol.ImportClause, err = reducer.StringLiteralToImportClause(args[0].Value)
	case _ReduceAliasToImportClause:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImportClauseType
		symbol.ImportClause, err = reducer.AliasToImportClause(args[0].Value, args[1].Value)
	case _ReduceUnusableImportToImportClause:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImportClauseType
		symbol.ImportClause, err = reducer.UnusableImportToImportClause(args[0].Value, args[1].Value)
	case _ReduceImportToLocalToImportClause:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImportClauseType
		symbol.ImportClause, err = reducer.ImportToLocalToImportClause(args[0].Value, args[1].Value)
	case _ReduceToBlockAddrDeclStmt:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = BlockAddrDeclStmtType
		symbol.Statement, err = reducer.ToBlockAddrDeclStmt(args[0].Value, args[1].Value, args[2].Value, args[3].ExpressionList, args[4].Value)
	case _ReduceProperBlockAddrDeclListToBlockAddrDeclList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BlockAddrDeclListType
		//line grammar.lr:246:4
		symbol.ExpressionList = args[0].ExpressionList
		err = nil
	case _ReduceImproperImplicitToBlockAddrDeclList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = BlockAddrDeclListType
		symbol.ExpressionList, err = reducer.ImproperImplicitToBlockAddrDeclList(args[0].ExpressionList, args[1].Count)
	case _ReduceImproperExplicitToBlockAddrDeclList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = BlockAddrDeclListType
		symbol.ExpressionList, err = reducer.ImproperExplicitToBlockAddrDeclList(args[0].ExpressionList, args[1].Value)
	case _ReduceNilToBlockAddrDeclList:
		symbol.SymbolId_ = BlockAddrDeclListType
		symbol.ExpressionList, err = reducer.NilToBlockAddrDeclList()
	case _ReduceBlockAddrDeclItemToProperBlockAddrDeclList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperBlockAddrDeclListType
		symbol.ExpressionList, err = reducer.BlockAddrDeclItemToProperBlockAddrDeclList(args[0].Expression)
	case _ReduceAddImplicitToProperBlockAddrDeclList:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperBlockAddrDeclListType
		symbol.ExpressionList, err = reducer.AddImplicitToProperBlockAddrDeclList(args[0].ExpressionList, args[1].Count, args[2].Expression)
	case _ReduceAddExplicitToProperBlockAddrDeclList:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperBlockAddrDeclListType
		symbol.ExpressionList, err = reducer.AddExplicitToProperBlockAddrDeclList(args[0].ExpressionList, args[1].Value, args[2].Expression)
	case _ReduceDeclToBlockAddrDeclItem:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = BlockAddrDeclItemType
		symbol.Expression, err = reducer.DeclToBlockAddrDeclItem(args[0].Expression, args[1].TypeExpression)
	case _ReduceInferredAssignToBlockAddrDeclItem:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BlockAddrDeclItemType
		symbol.Expression, err = reducer.InferredAssignToBlockAddrDeclItem(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceTypedAssignToBlockAddrDeclItem:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = BlockAddrDeclItemType
		symbol.Expression, err = reducer.TypedAssignToBlockAddrDeclItem(args[0].Expression, args[1].TypeExpression, args[2].Value, args[3].Expression)
	case _ReduceNewInferredToAddrDeclPattern:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = AddrDeclPatternType
		symbol.Expression, err = reducer.NewInferredToAddrDeclPattern(args[0].Value, args[1].Expression)
	case _ReduceNewTypedToAddrDeclPattern:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = AddrDeclPatternType
		symbol.Expression, err = reducer.NewTypedToAddrDeclPattern(args[0].Value, args[1].Expression, args[2].TypeExpression)
	case _ReduceToAssignToAddrPattern:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = AssignToAddrPatternType
		symbol.Expression, err = reducer.ToAssignToAddrPattern(args[0].Value, args[1].Expression)
	case _ReduceVarToVarType:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = VarTypeType
		//line grammar.lr:271:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceLetToVarType:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = VarTypeType
		//line grammar.lr:272:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceNamedExprToNewAddressable:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = NewAddressableType
		//line grammar.lr:275:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceImplicitStructExprToNewAddressable:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = NewAddressableType
		//line grammar.lr:276:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceSwitchableCasePatternsToCasePatterns:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CasePatternsType
		//line grammar.lr:280:4
		symbol.ExpressionList = args[0].ExpressionList
		err = nil
	case _ReduceToCasePatterns:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CasePatternsType
		symbol.ExpressionList, err = reducer.ToCasePatterns(args[0].Expression)
	case _ReduceToAssignSelectablePattern:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = AssignSelectablePatternType
		symbol.Expression, err = reducer.ToAssignSelectablePattern(args[0].ExpressionList, args[1].Value, args[2].Expression)
	case _ReduceSwitchableCasePatternToSwitchableCasePatterns:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = SwitchableCasePatternsType
		symbol.ExpressionList, err = reducer.SwitchableCasePatternToSwitchableCasePatterns(args[0].Expression)
	case _ReduceAddToSwitchableCasePatterns:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = SwitchableCasePatternsType
		symbol.ExpressionList, err = reducer.AddToSwitchableCasePatterns(args[0].ExpressionList, args[1].Value, args[2].Expression)
	case _ReduceExprToSwitchableCasePattern:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = SwitchableCasePatternType
		//line grammar.lr:314:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceEnumPatternToSwitchableCasePattern:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = SwitchableCasePatternType
		//line grammar.lr:315:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceMatchAnyDataToEnumPattern:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = EnumPatternType
		symbol.Expression, err = reducer.MatchAnyDataToEnumPattern(args[0].Value, args[1].Value, args[2].Expression)
	case _ReduceNamedToEnumPattern:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = EnumPatternType
		symbol.Expression, err = reducer.NamedToEnumPattern(args[0].Value, args[1].Value, args[2].Expression)
	case _ReduceMatchAnyUnitToEnumPattern:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = EnumPatternType
		symbol.Expression, err = reducer.MatchAnyUnitToEnumPattern(args[0].Value, args[1].Value)
	case _ReduceNamedUnitToEnumPattern:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = EnumPatternType
		symbol.Expression, err = reducer.NamedUnitToEnumPattern(args[0].Value, args[1].Value)
	case _ReduceUnnamedStructToEnumPattern:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = EnumPatternType
		symbol.Expression, err = reducer.UnnamedStructToEnumPattern(args[0].Value, args[1].Expression)
	case _ReduceParseErrorExprToAtomExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomExprType
		//line grammar.lr:338:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceLiteralExprToAtomExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomExprType
		//line grammar.lr:339:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceNamedExprToAtomExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomExprType
		//line grammar.lr:340:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceFuncDefToAtomExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomExprType
		//line grammar.lr:341:4
		symbol.Expression = args[0].FuncDefinition
		err = nil
	case _ReduceInitializeExprToAtomExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomExprType
		//line grammar.lr:342:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceImplicitStructExprToAtomExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomExprType
		//line grammar.lr:343:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToParseErrorExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ParseErrorExprType
		symbol.Expression, err = reducer.ToParseErrorExpr(args[0].ParseError)
	case _ReduceTrueToLiteralExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = LiteralExprType
		symbol.Expression, err = reducer.TrueToLiteralExpr(args[0].Value)
	case _ReduceFalseToLiteralExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = LiteralExprType
		symbol.Expression, err = reducer.FalseToLiteralExpr(args[0].Value)
	case _ReduceIntegerLiteralToLiteralExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = LiteralExprType
		symbol.Expression, err = reducer.IntegerLiteralToLiteralExpr(args[0].Value)
	case _ReduceFloatLiteralToLiteralExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = LiteralExprType
		symbol.Expression, err = reducer.FloatLiteralToLiteralExpr(args[0].Value)
	case _ReduceRuneLiteralToLiteralExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = LiteralExprType
		symbol.Expression, err = reducer.RuneLiteralToLiteralExpr(args[0].Value)
	case _ReduceStringLiteralToLiteralExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = LiteralExprType
		symbol.Expression, err = reducer.StringLiteralToLiteralExpr(args[0].Value)
	case _ReduceIdentifierToNamedExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = NamedExprType
		symbol.Expression, err = reducer.IdentifierToNamedExpr(args[0].Value)
	case _ReduceUnderscoreToNamedExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = NamedExprType
		symbol.Expression, err = reducer.UnderscoreToNamedExpr(args[0].Value)
	case _ReduceToInitializeExpr:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = InitializeExprType
		symbol.Expression, err = reducer.ToInitializeExpr(args[0].TypeExpression, args[1].Value, args[2].ArgumentList, args[3].Value)
	case _ReduceToImplicitStructExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ImplicitStructExprType
		symbol.Expression, err = reducer.ToImplicitStructExpr(args[0].Value, args[1].ArgumentList, args[2].Value)
	case _ReduceAtomExprToAccessibleExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AccessibleExprType
		//line grammar.lr:368:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceAccessExprToAccessibleExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AccessibleExprType
		//line grammar.lr:369:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceParameterizedExprToAccessibleExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AccessibleExprType
		//line grammar.lr:370:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceCallExprToAccessibleExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AccessibleExprType
		//line grammar.lr:371:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceIndexExprToAccessibleExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AccessibleExprType
		//line grammar.lr:372:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceAsExprToAccessibleExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AccessibleExprType
		//line grammar.lr:373:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceMakeExprToAccessibleExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AccessibleExprType
		//line grammar.lr:374:4
		symbol.Expression = args[0].MakeExpr
		err = nil
	case _ReduceToAccessExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = AccessExprType
		symbol.Expression, err = reducer.ToAccessExpr(args[0].Expression, args[1].Value, args[2].Value)
	case _ReduceToIndexExpr:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = IndexExprType
		symbol.Expression, err = reducer.ToIndexExpr(args[0].Expression, args[1].Value, args[2].Expression, args[3].Value)
	case _ReduceExprToIndex:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = IndexType
		//line grammar.lr:383:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceColonExprToIndex:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = IndexType
		//line grammar.lr:384:4
		symbol.Expression = args[0].ImplicitStructExpr
		err = nil
	case _ReduceToAsExpr:
		args := stack[len(stack)-6:]
		stack = stack[:len(stack)-6]
		symbol.SymbolId_ = AsExprType
		symbol.Expression, err = reducer.ToAsExpr(args[0].Expression, args[1].Value, args[2].Value, args[3].Value, args[4].TypeExpression, args[5].Value)
	case _ReduceToParameterizedExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ParameterizedExprType
		symbol.Expression, err = reducer.ToParameterizedExpr(args[0].Expression, args[1].TypeExpressionList)
	case _ReduceToCallExpr:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = CallExprType
		symbol.Expression, err = reducer.ToCallExpr(args[0].Expression, args[1].Value, args[2].ArgumentList, args[3].Value)
	case _ReduceSizeProperToMakeExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = MakeExprType
		symbol.MakeExpr, err = reducer.SizeProperToMakeExpr(args[0].MakeExpr, args[1].Value)
	case _ReduceSizeImproperToMakeExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = MakeExprType
		symbol.MakeExpr, err = reducer.SizeImproperToMakeExpr(args[0].MakeExpr, args[1].Value, args[2].Value)
	case _ReduceValueProperToMakeExpr:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = MakeExprType
		symbol.MakeExpr, err = reducer.ValueProperToMakeExpr(args[0].MakeExpr, args[1].Value, args[2].Expression, args[3].Value)
	case _ReduceValueImproperToMakeExpr:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = MakeExprType
		symbol.MakeExpr, err = reducer.ValueImproperToMakeExpr(args[0].MakeExpr, args[1].Value, args[2].Expression, args[3].Value, args[4].Value)
	case _ReduceSizeToMakeExprSize:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = MakeExprSizeType
		symbol.MakeExpr, err = reducer.SizeToMakeExprSize(args[0].MakeExpr, args[1].Expression)
	case _ReduceSizeCapacityToMakeExprSize:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = MakeExprSizeType
		symbol.MakeExpr, err = reducer.SizeCapacityToMakeExprSize(args[0].MakeExpr, args[1].Expression, args[2].Value, args[3].Expression)
	case _ReduceToMakeExprHead:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = MakeExprHeadType
		symbol.MakeExpr, err = reducer.ToMakeExprHead(args[0].Value, args[1].Value, args[2].TypeExpression, args[3].Value)
	case _ReduceAddToProperArguments:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperArgumentsType
		symbol.ArgumentList, err = reducer.AddToProperArguments(args[0].ArgumentList, args[1].Value, args[2].Argument)
	case _ReduceArgumentToProperArguments:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperArgumentsType
		symbol.ArgumentList, err = reducer.ArgumentToProperArguments(args[0].Argument)
	case _ReduceProperArgumentsToArguments:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ArgumentsType
		//line grammar.lr:423:4
		symbol.ArgumentList = args[0].ArgumentList
		err = nil
	case _ReduceImproperImplicitToArguments:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ArgumentsType
		symbol.ArgumentList, err = reducer.ImproperImplicitToArguments(args[0].ArgumentList, args[1].Count)
	case _ReduceImproperExplicitToArguments:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ArgumentsType
		symbol.ArgumentList, err = reducer.ImproperExplicitToArguments(args[0].ArgumentList, args[1].Value)
	case _ReduceNilToArguments:
		symbol.SymbolId_ = ArgumentsType
		symbol.ArgumentList, err = reducer.NilToArguments()
	case _ReducePositionalToArgument:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ArgumentType
		symbol.Argument, err = reducer.PositionalToArgument(args[0].Expression)
	case _ReduceColonExprToArgument:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ArgumentType
		symbol.Argument, err = reducer.ColonExprToArgument(args[0].ImplicitStructExpr)
	case _ReduceNamedAssignmentToArgument:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ArgumentType
		symbol.Argument, err = reducer.NamedAssignmentToArgument(args[0].Value, args[1].Value, args[2].Expression)
	case _ReduceVarargAssignmentToArgument:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ArgumentType
		symbol.Argument, err = reducer.VarargAssignmentToArgument(args[0].Expression, args[1].Value)
	case _ReduceSkipPatternToArgument:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ArgumentType
		symbol.Argument, err = reducer.SkipPatternToArgument(args[0].Value)
	case _ReduceUnitUnitPairToColonExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ColonExprType
		symbol.ImplicitStructExpr, err = reducer.UnitUnitPairToColonExpr(args[0].Value)
	case _ReduceExprUnitPairToColonExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ColonExprType
		symbol.ImplicitStructExpr, err = reducer.ExprUnitPairToColonExpr(args[0].Expression, args[1].Value)
	case _ReduceUnitExprPairToColonExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ColonExprType
		symbol.ImplicitStructExpr, err = reducer.UnitExprPairToColonExpr(args[0].Value, args[1].Expression)
	case _ReduceExprExprPairToColonExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ColonExprType
		symbol.ImplicitStructExpr, err = reducer.ExprExprPairToColonExpr(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceColonExprUnitTupleToColonExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ColonExprType
		symbol.ImplicitStructExpr, err = reducer.ColonExprUnitTupleToColonExpr(args[0].ImplicitStructExpr, args[1].Value)
	case _ReduceColonExprExprTupleToColonExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ColonExprType
		symbol.ImplicitStructExpr, err = reducer.ColonExprExprTupleToColonExpr(args[0].ImplicitStructExpr, args[1].Value, args[2].Expression)
	case _ReduceAccessibleExprToPostfixableExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PostfixableExprType
		//line grammar.lr:454:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReducePostfixUnaryExprToPostfixableExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PostfixableExprType
		//line grammar.lr:455:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToPostfixUnaryExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = PostfixUnaryExprType
		symbol.Expression, err = reducer.ToPostfixUnaryExpr(args[0].Expression, args[1].Value)
	case _ReduceQuestionToPostfixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PostfixUnaryOpType
		//line grammar.lr:460:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceExclaimToPostfixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PostfixUnaryOpType
		//line grammar.lr:461:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceAddOneAssignToPostfixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PostfixUnaryOpType
		//line grammar.lr:465:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceSubOneAssignToPostfixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PostfixUnaryOpType
		//line grammar.lr:466:4
		symbol.Value = args[0].Value
		err = nil
	case _ReducePostfixableExprToPrefixableExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixableExprType
		//line grammar.lr:473:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReducePrefixUnaryExprToPrefixableExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixableExprType
		//line grammar.lr:474:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToPrefixUnaryExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = PrefixUnaryExprType
		symbol.Expression, err = reducer.ToPrefixUnaryExpr(args[0].Value, args[1].Expression)
	case _ReduceNotToPrefixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixUnaryOpType
		//line grammar.lr:479:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitXorToPrefixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixUnaryOpType
		//line grammar.lr:480:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceAddToPrefixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixUnaryOpType
		//line grammar.lr:481:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceSubToPrefixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixUnaryOpType
		//line grammar.lr:482:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceMulToPrefixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixUnaryOpType
		//line grammar.lr:485:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitAndToPrefixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixUnaryOpType
		//line grammar.lr:488:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceAsyncToPrefixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixUnaryOpType
		//line grammar.lr:506:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceDeferToPrefixUnaryOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PrefixUnaryOpType
		//line grammar.lr:507:4
		symbol.Value = args[0].Value
		err = nil
	case _ReducePrefixableExprToMulExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = MulExprType
		//line grammar.lr:514:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceBinaryMulExprToMulExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = MulExprType
		//line grammar.lr:515:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToBinaryMulExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BinaryMulExprType
		symbol.Expression, err = reducer.ToBinaryMulExpr(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceMulToMulOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = MulOpType
		//line grammar.lr:520:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceDivToMulOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = MulOpType
		//line grammar.lr:521:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceModToMulOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = MulOpType
		//line grammar.lr:522:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitAndToMulOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = MulOpType
		//line grammar.lr:523:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitLshiftToMulOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = MulOpType
		//line grammar.lr:524:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitRshiftToMulOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = MulOpType
		//line grammar.lr:525:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceMulExprToAddExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AddExprType
		//line grammar.lr:532:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceBinaryAddExprToAddExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AddExprType
		//line grammar.lr:533:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToBinaryAddExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BinaryAddExprType
		symbol.Expression, err = reducer.ToBinaryAddExpr(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceAddToAddOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AddOpType
		//line grammar.lr:538:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceSubToAddOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AddOpType
		//line grammar.lr:539:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitOrToAddOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AddOpType
		//line grammar.lr:540:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitXorToAddOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AddOpType
		//line grammar.lr:541:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceAddExprToCmpExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CmpExprType
		//line grammar.lr:548:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceBinaryCmpExprToCmpExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CmpExprType
		//line grammar.lr:549:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToBinaryCmpExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BinaryCmpExprType
		symbol.Expression, err = reducer.ToBinaryCmpExpr(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceEqualToCmpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CmpOpType
		//line grammar.lr:554:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceNotEqualToCmpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CmpOpType
		//line grammar.lr:555:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceLessToCmpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CmpOpType
		//line grammar.lr:556:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceLessOrEqualToCmpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CmpOpType
		//line grammar.lr:557:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceGreaterToCmpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CmpOpType
		//line grammar.lr:558:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceGreaterOrEqualToCmpOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = CmpOpType
		//line grammar.lr:559:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceCmpExprToAndExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AndExprType
		//line grammar.lr:566:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceBinaryAndExprToAndExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AndExprType
		//line grammar.lr:567:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToBinaryAndExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BinaryAndExprType
		symbol.Expression, err = reducer.ToBinaryAndExpr(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceAndExprToOrExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = OrExprType
		//line grammar.lr:576:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceBinaryOrExprToOrExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = OrExprType
		//line grammar.lr:577:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToBinaryOrExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BinaryOrExprType
		symbol.Expression, err = reducer.ToBinaryOrExpr(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceOrExprToSendRecvExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = SendRecvExprType
		//line grammar.lr:586:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceSendExprToSendRecvExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = SendRecvExprType
		//line grammar.lr:587:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceRecvExprToSendRecvExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = SendRecvExprType
		//line grammar.lr:588:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToSendExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = SendExprType
		symbol.Expression, err = reducer.ToSendExpr(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceToRecvExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = RecvExprType
		symbol.Expression, err = reducer.ToRecvExpr(args[0].Value, args[1].Expression)
	case _ReduceSendRecvExprToAssignOpExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AssignOpExprType
		//line grammar.lr:601:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceBinaryAssignOpExprToAssignOpExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AssignOpExprType
		//line grammar.lr:602:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToBinaryAssignOpExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BinaryAssignOpExprType
		symbol.Expression, err = reducer.ToBinaryAssignOpExpr(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceAddAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:608:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceSubAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:609:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceMulAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:610:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceDivAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:611:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceModAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:612:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitAndAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:613:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitOrAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:614:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitXorAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:615:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitLshiftAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:616:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceBitRshiftAssignToBinaryAssignOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryAssignOpType
		//line grammar.lr:617:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceStatementsToUnlabelledControlFlowExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = UnlabelledControlFlowExprType
		//line grammar.lr:624:4
		symbol.ControlFlowExpr = args[0].StatementsExpr
		err = nil
	case _ReduceIfElseExprToUnlabelledControlFlowExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = UnlabelledControlFlowExprType
		//line grammar.lr:625:4
		symbol.ControlFlowExpr = args[0].IfExpr
		err = nil
	case _ReduceSwitchExprBodyToUnlabelledControlFlowExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = UnlabelledControlFlowExprType
		//line grammar.lr:626:4
		symbol.ControlFlowExpr = args[0].ControlFlowExpr
		err = nil
	case _ReduceSelectExprBodyToUnlabelledControlFlowExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = UnlabelledControlFlowExprType
		//line grammar.lr:627:4
		symbol.ControlFlowExpr = args[0].ControlFlowExpr
		err = nil
	case _ReduceLoopExprBodyToUnlabelledControlFlowExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = UnlabelledControlFlowExprType
		//line grammar.lr:628:4
		symbol.ControlFlowExpr = args[0].ControlFlowExpr
		err = nil
	case _ReduceUnlabelledControlFlowExprToControlFlowExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ControlFlowExprType
		//line grammar.lr:631:4
		symbol.ControlFlowExpr = args[0].ControlFlowExpr
		err = nil
	case _ReduceLabelledToControlFlowExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ControlFlowExprType
		symbol.ControlFlowExpr, err = reducer.LabelledToControlFlowExpr(args[0].Value, args[1].Value, args[2].ControlFlowExpr)
	case _ReduceAssignOpExprToExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ExprType
		//line grammar.lr:635:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceControlFlowExprToExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ExprType
		//line grammar.lr:636:4
		symbol.Expression = args[0].ControlFlowExpr
		err = nil
	case _ReduceAddrDeclPatternToExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ExprType
		//line grammar.lr:639:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceAssignToAddrPatternToExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ExprType
		//line grammar.lr:640:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToStatements:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = StatementsType
		symbol.StatementsExpr, err = reducer.ToStatements(args[0].Value, args[1].StatementList, args[2].Value)
	case _ReduceAddImplicitToProperStatementList:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperStatementListType
		symbol.StatementList, err = reducer.AddImplicitToProperStatementList(args[0].StatementList, args[1].Count, args[2].Statement)
	case _ReduceAddExplicitToProperStatementList:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperStatementListType
		symbol.StatementList, err = reducer.AddExplicitToProperStatementList(args[0].StatementList, args[1].Value, args[2].Statement)
	case _ReduceStatementToProperStatementList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperStatementListType
		symbol.StatementList, err = reducer.StatementToProperStatementList(args[0].Statement)
	case _ReduceProperStatementListToStatementList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = StatementListType
		//line grammar.lr:665:4
		symbol.StatementList = args[0].StatementList
		err = nil
	case _ReduceImproperImplicitToStatementList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = StatementListType
		symbol.StatementList, err = reducer.ImproperImplicitToStatementList(args[0].StatementList, args[1].Count)
	case _ReduceImproperExplicitToStatementList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = StatementListType
		symbol.StatementList, err = reducer.ImproperExplicitToStatementList(args[0].StatementList, args[1].Value)
	case _ReduceNilToStatementList:
		symbol.SymbolId_ = StatementListType
		symbol.StatementList, err = reducer.NilToStatementList()
	case _ReduceIfElifExprToIfElseExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = IfElseExprType
		//line grammar.lr:671:4
		symbol.IfExpr = args[0].IfExpr
		err = nil
	case _ReduceElseToIfElseExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = IfElseExprType
		symbol.IfExpr, err = reducer.ElseToIfElseExpr(args[0].IfExpr, args[1].Value, args[2].StatementsExpr)
	case _ReduceIfOnlyExprToIfElifExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = IfElifExprType
		//line grammar.lr:675:4
		symbol.IfExpr = args[0].IfExpr
		err = nil
	case _ReduceElifToIfElifExpr:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = IfElifExprType
		symbol.IfExpr, err = reducer.ElifToIfElifExpr(args[0].IfExpr, args[1].Value, args[2].Value, args[3].Expression, args[4].StatementsExpr)
	case _ReduceToIfOnlyExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = IfOnlyExprType
		symbol.IfExpr, err = reducer.ToIfOnlyExpr(args[0].Value, args[1].Expression, args[2].StatementsExpr)
	case _ReduceExprToCondition:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ConditionType
		//line grammar.lr:682:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceCasePatternExprToCondition:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ConditionType
		//line grammar.lr:683:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceToCasePatternExpr:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = CasePatternExprType
		symbol.Expression, err = reducer.ToCasePatternExpr(args[0].Value, args[1].ExpressionList, args[2].Value, args[3].Expression)
	case _ReduceToSwitchExprBody:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = SwitchExprBodyType
		symbol.ControlFlowExpr, err = reducer.ToSwitchExprBody(args[0].Value, args[1].Expression, args[2].StatementsExpr)
	case _ReduceToSelectExprBody:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = SelectExprBodyType
		symbol.ControlFlowExpr, err = reducer.ToSelectExprBody(args[0].Value, args[1].StatementsExpr)
	case _ReduceInfiniteToLoopExprBody:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = LoopExprBodyType
		symbol.ControlFlowExpr, err = reducer.InfiniteToLoopExprBody(args[0].StatementsExpr)
	case _ReduceDoWhileToLoopExprBody:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = LoopExprBodyType
		symbol.ControlFlowExpr, err = reducer.DoWhileToLoopExprBody(args[0].StatementsExpr, args[1].Value, args[2].Expression)
	case _ReduceWhileToLoopExprBody:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = LoopExprBodyType
		symbol.ControlFlowExpr, err = reducer.WhileToLoopExprBody(args[0].Value, args[1].Expression, args[2].StatementsExpr)
	case _ReduceIteratorToLoopExprBody:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = LoopExprBodyType
		symbol.ControlFlowExpr, err = reducer.IteratorToLoopExprBody(args[0].Value, args[1].Expression, args[2].Value, args[3].Expression, args[4].StatementsExpr)
	case _ReduceForToLoopExprBody:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = LoopExprBodyType
		symbol.ControlFlowExpr, err = reducer.ForToLoopExprBody(args[0].Value, args[1].Expression, args[2].Value, args[3].Expression, args[4].StatementsExpr)
	case _ReduceToLoopBody:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = LoopBodyType
		symbol.StatementsExpr, err = reducer.ToLoopBody(args[0].Value, args[1].StatementsExpr)
	case _ReduceExprToReturnableExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ReturnableExprType
		//line grammar.lr:726:4
		symbol.Expression = args[0].Expression
		err = nil
	case _ReduceImproperExprStructToReturnableExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ReturnableExprType
		//line grammar.lr:727:4
		symbol.Expression = args[0].ImplicitStructExpr
		err = nil
	case _ReducePairToImproperExprStruct:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ImproperExprStructType
		symbol.ImplicitStructExpr, err = reducer.PairToImproperExprStruct(args[0].Expression, args[1].Value, args[2].Expression)
	case _ReduceAddToImproperExprStruct:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ImproperExprStructType
		symbol.ImplicitStructExpr, err = reducer.AddToImproperExprStruct(args[0].ImplicitStructExpr, args[1].Value, args[2].Expression)
	case _ReduceSliceTypeExprToVariableSizedTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = VariableSizedTypeExprType
		//line grammar.lr:739:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceMapTypeExprToVariableSizedTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = VariableSizedTypeExprType
		//line grammar.lr:740:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReducePropertiesTypeExprToInitializableTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = InitializableTypeExprType
		//line grammar.lr:745:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceArrayTypeExprToInitializableTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = InitializableTypeExprType
		//line grammar.lr:746:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceVariableSizedTypeExprToInitializableTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = InitializableTypeExprType
		//line grammar.lr:747:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceToSliceTypeExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = SliceTypeExprType
		symbol.TypeExpression, err = reducer.ToSliceTypeExpr(args[0].Value, args[1].TypeExpression, args[2].Value)
	case _ReduceToArrayTypeExpr:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = ArrayTypeExprType
		symbol.TypeExpression, err = reducer.ToArrayTypeExpr(args[0].Value, args[1].TypeExpression, args[2].Value, args[3].Value, args[4].Value)
	case _ReduceToMapTypeExpr:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = MapTypeExprType
		symbol.TypeExpression, err = reducer.ToMapTypeExpr(args[0].Value, args[1].TypeExpression, args[2].Value, args[3].TypeExpression, args[4].Value)
	case _ReduceInitializableTypeExprToAtomTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomTypeExprType
		//line grammar.lr:759:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceNamedTypeExprToAtomTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomTypeExprType
		//line grammar.lr:760:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceInferredTypeExprToAtomTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomTypeExprType
		//line grammar.lr:761:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceImplicitStructTypeExprToAtomTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomTypeExprType
		//line grammar.lr:762:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceImplicitEnumTypeExprToAtomTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomTypeExprType
		//line grammar.lr:763:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceFuncSignatureToAtomTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = AtomTypeExprType
		//line grammar.lr:764:4
		symbol.TypeExpression = args[0].FuncSignature
		err = nil
	case _ReduceLocalToNamedTypeExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = NamedTypeExprType
		symbol.TypeExpression, err = reducer.LocalToNamedTypeExpr(args[0].Value, args[1].TypeExpressionList)
	case _ReduceExternalToNamedTypeExpr:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = NamedTypeExprType
		symbol.TypeExpression, err = reducer.ExternalToNamedTypeExpr(args[0].Value, args[1].Value, args[2].Value, args[3].TypeExpressionList)
	case _ReduceToInferredTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = InferredTypeExprType
		symbol.TypeExpression, err = reducer.ToInferredTypeExpr(args[0].Value)
	case _ReduceAtomTypeExprToReturnableTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ReturnableTypeExprType
		//line grammar.lr:776:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceRefTypeExprToReturnableTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ReturnableTypeExprType
		//line grammar.lr:777:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ReturnableTypeExprType
		//line grammar.lr:778:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ReturnableTypeExprType
		//line grammar.lr:779:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceToRefTypeExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = RefTypeExprType
		symbol.TypeExpression, err = reducer.ToRefTypeExpr(args[0].Value, args[1].TypeExpression)
	case _ReduceToDefaultEnumOpTypeExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = DefaultEnumOpTypeExprType
		symbol.TypeExpression, err = reducer.ToDefaultEnumOpTypeExpr(args[0].Value, args[1].TypeExpression)
	case _ReduceQuestionToDefaultEnumOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DefaultEnumOpType
		//line grammar.lr:787:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceExclaimToDefaultEnumOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = DefaultEnumOpType
		//line grammar.lr:788:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceToUnaryTraitOpTypeExpr:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = UnaryTraitOpTypeExprType
		symbol.TypeExpression, err = reducer.ToUnaryTraitOpTypeExpr(args[0].Value, args[1].TypeExpression)
	case _ReduceTildeToUnaryTraitOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = UnaryTraitOpType
		//line grammar.lr:794:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceTildeTildeToUnaryTraitOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = UnaryTraitOpType
		//line grammar.lr:795:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceReturnableTypeExprToTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = TypeExprType
		//line grammar.lr:800:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceBinaryTraitOpTypeExprToTypeExpr:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = TypeExprType
		//line grammar.lr:801:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceToBinaryTraitOpTypeExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = BinaryTraitOpTypeExprType
		symbol.TypeExpression, err = reducer.ToBinaryTraitOpTypeExpr(args[0].TypeExpression, args[1].Value, args[2].TypeExpression)
	case _ReduceMulToBinaryTraitOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryTraitOpType
		//line grammar.lr:807:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceAddToBinaryTraitOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryTraitOpType
		//line grammar.lr:808:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceSubToBinaryTraitOp:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = BinaryTraitOpType
		//line grammar.lr:809:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceDefinitionToTypeDef:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = TypeDefType
		symbol.Statement, err = reducer.DefinitionToTypeDef(args[0].Value, args[1].Value, args[2].GenericParameterList, args[3].TypeExpression)
	case _ReduceConstrainedDefToTypeDef:
		args := stack[len(stack)-6:]
		stack = stack[:len(stack)-6]
		symbol.SymbolId_ = TypeDefType
		symbol.Statement, err = reducer.ConstrainedDefToTypeDef(args[0].Value, args[1].Value, args[2].GenericParameterList, args[3].TypeExpression, args[4].Value, args[5].TypeExpression)
	case _ReduceToAliasDef:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = AliasDefType
		symbol.Statement, err = reducer.ToAliasDef(args[0].Value, args[1].Value, args[2].GenericParameterList, args[3].TypeExpression)
	case _ReduceUnconstrainedToGenericParameter:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = GenericParameterType
		symbol.GenericParameter, err = reducer.UnconstrainedToGenericParameter(args[0].Value)
	case _ReduceConstrainedToGenericParameter:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = GenericParameterType
		symbol.GenericParameter, err = reducer.ConstrainedToGenericParameter(args[0].Value, args[1].TypeExpression)
	case _ReduceGenericToGenericParameters:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = GenericParametersType
		symbol.GenericParameterList, err = reducer.GenericToGenericParameters(args[0].Value, args[1].Value, args[2].GenericParameterList, args[3].Value)
	case _ReduceNilToGenericParameters:
		symbol.SymbolId_ = GenericParametersType
		symbol.GenericParameterList, err = reducer.NilToGenericParameters()
	case _ReduceAddToProperGenericParameterList:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperGenericParameterListType
		symbol.GenericParameterList, err = reducer.AddToProperGenericParameterList(args[0].GenericParameterList, args[1].Value, args[2].GenericParameter)
	case _ReduceGenericParameterToProperGenericParameterList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperGenericParameterListType
		symbol.GenericParameterList, err = reducer.GenericParameterToProperGenericParameterList(args[0].GenericParameter)
	case _ReduceProperGenericParameterListToGenericParameterList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = GenericParameterListType
		//line grammar.lr:837:4
		symbol.GenericParameterList = args[0].GenericParameterList
		err = nil
	case _ReduceImproperImplicitToGenericParameterList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = GenericParameterListType
		symbol.GenericParameterList, err = reducer.ImproperImplicitToGenericParameterList(args[0].GenericParameterList, args[1].Count)
	case _ReduceImproperExplicitToGenericParameterList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = GenericParameterListType
		symbol.GenericParameterList, err = reducer.ImproperExplicitToGenericParameterList(args[0].GenericParameterList, args[1].Value)
	case _ReduceNilToGenericParameterList:
		symbol.SymbolId_ = GenericParameterListType
		symbol.GenericParameterList, err = reducer.NilToGenericParameterList()
	case _ReduceToGenericArguments:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = GenericArgumentsType
		symbol.TypeExpressionList, err = reducer.ToGenericArguments(args[0].Value, args[1].Value, args[2].TypeExpressionList, args[3].Value)
	case _ReduceGenericArgumentsToOptionalGenericArguments:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = OptionalGenericArgumentsType
		//line grammar.lr:846:4
		symbol.TypeExpressionList = args[0].TypeExpressionList
		err = nil
	case _ReduceNilToOptionalGenericArguments:
		symbol.SymbolId_ = OptionalGenericArgumentsType
		symbol.TypeExpressionList, err = reducer.NilToOptionalGenericArguments()
	case _ReduceAddToProperGenericArgumentList:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperGenericArgumentListType
		symbol.TypeExpressionList, err = reducer.AddToProperGenericArgumentList(args[0].TypeExpressionList, args[1].Value, args[2].TypeExpression)
	case _ReduceTypeExprToProperGenericArgumentList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperGenericArgumentListType
		symbol.TypeExpressionList, err = reducer.TypeExprToProperGenericArgumentList(args[0].TypeExpression)
	case _ReduceProperGenericArgumentListToGenericArgumentList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = GenericArgumentListType
		//line grammar.lr:854:4
		symbol.TypeExpressionList = args[0].TypeExpressionList
		err = nil
	case _ReduceImproperImplicitToGenericArgumentList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = GenericArgumentListType
		symbol.TypeExpressionList, err = reducer.ImproperImplicitToGenericArgumentList(args[0].TypeExpressionList, args[1].Count)
	case _ReduceImproperExplicitToGenericArgumentList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = GenericArgumentListType
		symbol.TypeExpressionList, err = reducer.ImproperExplicitToGenericArgumentList(args[0].TypeExpressionList, args[1].Value)
	case _ReduceNilToGenericArgumentList:
		symbol.SymbolId_ = GenericArgumentListType
		symbol.TypeExpressionList, err = reducer.NilToGenericArgumentList()
	case _ReduceUnnamedFieldToTypeProperty:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = TypePropertyType
		symbol.TypeProperty, err = reducer.UnnamedFieldToTypeProperty(args[0].TypeExpression)
	case _ReduceNamedFieldToTypeProperty:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = TypePropertyType
		symbol.TypeProperty, err = reducer.NamedFieldToTypeProperty(args[0].Value, args[1].TypeExpression)
	case _ReducePaddingFieldToTypeProperty:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = TypePropertyType
		symbol.TypeProperty, err = reducer.PaddingFieldToTypeProperty(args[0].Value, args[1].TypeExpression)
	case _ReduceVarTypeUnnamedFieldToTypeProperty:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = TypePropertyType
		symbol.TypeProperty, err = reducer.VarTypeUnnamedFieldToTypeProperty(args[0].Value, args[1].TypeExpression)
	case _ReduceVarTypeNamedFieldToTypeProperty:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = TypePropertyType
		symbol.TypeProperty, err = reducer.VarTypeNamedFieldToTypeProperty(args[0].Value, args[1].Value, args[2].TypeExpression)
	case _ReduceDefaultNamedEnumFieldToTypeProperty:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = TypePropertyType
		symbol.TypeProperty, err = reducer.DefaultNamedEnumFieldToTypeProperty(args[0].Value, args[1].Value, args[2].TypeExpression)
	case _ReduceDefaultUnnamedEnumFieldToTypeProperty:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = TypePropertyType
		symbol.TypeProperty, err = reducer.DefaultUnnamedEnumFieldToTypeProperty(args[0].Value, args[1].TypeExpression)
	case _ReduceFuncDefToTypeProperty:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = TypePropertyType
		//line grammar.lr:877:4
		symbol.TypeProperty = args[0].FuncDefinition
		err = nil
	case _ReduceAddToProperImplicitTypeProperties:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperImplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.AddToProperImplicitTypeProperties(args[0].TypeProperties, args[1].Value, args[2].TypeProperty)
	case _ReduceTypePropertyToProperImplicitTypeProperties:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperImplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.TypePropertyToProperImplicitTypeProperties(args[0].TypeProperty)
	case _ReduceProperImplicitTypePropertiesToImplicitTypeProperties:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ImplicitTypePropertiesType
		//line grammar.lr:884:4
		symbol.TypeProperties = args[0].TypeProperties
		err = nil
	case _ReduceImproperImplicitToImplicitTypeProperties:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.ImproperImplicitToImplicitTypeProperties(args[0].TypeProperties, args[1].Count)
	case _ReduceImproperExplicitToImplicitTypeProperties:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.ImproperExplicitToImplicitTypeProperties(args[0].TypeProperties, args[1].Value)
	case _ReduceNilToImplicitTypeProperties:
		symbol.SymbolId_ = ImplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.NilToImplicitTypeProperties()
	case _ReduceToImplicitStructTypeExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ImplicitStructTypeExprType
		symbol.TypeExpression, err = reducer.ToImplicitStructTypeExpr(args[0].Value, args[1].TypeProperties, args[2].Value)
	case _ReducePairToProperImplicitEnumTypeProperties:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperImplicitEnumTypePropertiesType
		symbol.TypeProperties, err = reducer.PairToProperImplicitEnumTypeProperties(args[0].TypeProperty, args[1].Value, args[2].TypeProperty)
	case _ReduceAddToProperImplicitEnumTypeProperties:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperImplicitEnumTypePropertiesType
		symbol.TypeProperties, err = reducer.AddToProperImplicitEnumTypeProperties(args[0].TypeProperties, args[1].Value, args[2].TypeProperty)
	case _ReduceProperImplicitEnumTypePropertiesToImplicitEnumTypeProperties:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ImplicitEnumTypePropertiesType
		//line grammar.lr:905:4
		symbol.TypeProperties = args[0].TypeProperties
		err = nil
	case _ReduceImproperToImplicitEnumTypeProperties:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ImplicitEnumTypePropertiesType
		symbol.TypeProperties, err = reducer.ImproperToImplicitEnumTypeProperties(args[0].TypeProperties, args[1].Count)
	case _ReduceToImplicitEnumTypeExpr:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ImplicitEnumTypeExprType
		symbol.TypeExpression, err = reducer.ToImplicitEnumTypeExpr(args[0].Value, args[1].TypeProperties, args[2].Value)
	case _ReduceAddImplicitToProperExplicitTypeProperties:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperExplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.AddImplicitToProperExplicitTypeProperties(args[0].TypeProperties, args[1].Count, args[2].TypeProperty)
	case _ReduceAddExplicitToProperExplicitTypeProperties:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperExplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.AddExplicitToProperExplicitTypeProperties(args[0].TypeProperties, args[1].Value, args[2].TypeProperty)
	case _ReduceTypePropertyToProperExplicitTypeProperties:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperExplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.TypePropertyToProperExplicitTypeProperties(args[0].TypeProperty)
	case _ReduceProperExplicitTypePropertiesToExplicitTypeProperties:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ExplicitTypePropertiesType
		//line grammar.lr:918:4
		symbol.TypeProperties = args[0].TypeProperties
		err = nil
	case _ReduceImproperImplicitToExplicitTypeProperties:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ExplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.ImproperImplicitToExplicitTypeProperties(args[0].TypeProperties, args[1].Count)
	case _ReduceImproperExplicitToExplicitTypeProperties:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ExplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.ImproperExplicitToExplicitTypeProperties(args[0].TypeProperties, args[1].Value)
	case _ReduceNilToExplicitTypeProperties:
		symbol.SymbolId_ = ExplicitTypePropertiesType
		symbol.TypeProperties, err = reducer.NilToExplicitTypeProperties()
	case _ReduceToPropertiesTypeExpr:
		args := stack[len(stack)-4:]
		stack = stack[:len(stack)-4]
		symbol.SymbolId_ = PropertiesTypeExprType
		symbol.TypeExpression, err = reducer.ToPropertiesTypeExpr(args[0].Value, args[1].Value, args[2].TypeProperties, args[3].Value)
	case _ReduceStructToPropertiesKind:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PropertiesKindType
		//line grammar.lr:927:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceTraitToPropertiesKind:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PropertiesKindType
		//line grammar.lr:928:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceEnumToPropertiesKind:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = PropertiesKindType
		//line grammar.lr:929:4
		symbol.Value = args[0].Value
		err = nil
	case _ReduceReturnableTypeExprToReturnType:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ReturnTypeType
		//line grammar.lr:937:4
		symbol.TypeExpression = args[0].TypeExpression
		err = nil
	case _ReduceNilToReturnType:
		symbol.SymbolId_ = ReturnTypeType
		symbol.TypeExpression, err = reducer.NilToReturnType()
	case _ReduceNamedArgToParameter:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.NamedArgToParameter(args[0].Value, args[1].TypeExpression)
	case _ReduceNamedReceiverToParameter:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.NamedReceiverToParameter(args[0].Value, args[1].Value, args[2].TypeExpression)
	case _ReduceNamedVarargToParameter:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.NamedVarargToParameter(args[0].Value, args[1].Value, args[2].TypeExpression)
	case _ReduceIgnoreArgToParameter:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.IgnoreArgToParameter(args[0].Value, args[1].TypeExpression)
	case _ReduceIgnoreReceiverToParameter:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.IgnoreReceiverToParameter(args[0].Value, args[1].Value, args[2].TypeExpression)
	case _ReduceIgnoreVarargToParameter:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.IgnoreVarargToParameter(args[0].Value, args[1].Value, args[2].TypeExpression)
	case _ReduceUnnamedArgToParameter:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.UnnamedArgToParameter(args[0].TypeExpression)
	case _ReduceUnnamedReceiverToParameter:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.UnnamedReceiverToParameter(args[0].Value, args[1].TypeExpression)
	case _ReduceUnnamedVarargToParameter:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ParameterType
		symbol.Parameter, err = reducer.UnnamedVarargToParameter(args[0].Value, args[1].TypeExpression)
	case _ReduceAddToProperParameterList:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ProperParameterListType
		symbol.Parameters, err = reducer.AddToProperParameterList(args[0].Parameters, args[1].Value, args[2].Parameter)
	case _ReduceParameterToProperParameterList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ProperParameterListType
		symbol.Parameters, err = reducer.ParameterToProperParameterList(args[0].Parameter)
	case _ReduceProperParameterListToParameterList:
		args := stack[len(stack)-1:]
		stack = stack[:len(stack)-1]
		symbol.SymbolId_ = ParameterListType
		//line grammar.lr:958:4
		symbol.Parameters = args[0].Parameters
		err = nil
	case _ReduceImproperImplicitToParameterList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ParameterListType
		symbol.Parameters, err = reducer.ImproperImplicitToParameterList(args[0].Parameters, args[1].Count)
	case _ReduceImproperExplicitToParameterList:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = ParameterListType
		symbol.Parameters, err = reducer.ImproperExplicitToParameterList(args[0].Parameters, args[1].Value)
	case _ReduceNilToParameterList:
		symbol.SymbolId_ = ParameterListType
		symbol.Parameters, err = reducer.NilToParameterList()
	case _ReduceToParameters:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = ParametersType
		symbol.Parameters, err = reducer.ToParameters(args[0].Value, args[1].Parameters, args[2].Value)
	case _ReduceAnonymousToFuncSignature:
		args := stack[len(stack)-3:]
		stack = stack[:len(stack)-3]
		symbol.SymbolId_ = FuncSignatureType
		symbol.FuncSignature, err = reducer.AnonymousToFuncSignature(args[0].Value, args[1].Parameters, args[2].TypeExpression)
	case _ReduceNamedToFuncSignature:
		args := stack[len(stack)-5:]
		stack = stack[:len(stack)-5]
		symbol.SymbolId_ = FuncSignatureType
		symbol.FuncSignature, err = reducer.NamedToFuncSignature(args[0].Value, args[1].Value, args[2].GenericParameterList, args[3].Parameters, args[4].TypeExpression)
	case _ReduceToFuncDef:
		args := stack[len(stack)-2:]
		stack = stack[:len(stack)-2]
		symbol.SymbolId_ = FuncDefType
		symbol.FuncDefinition, err = reducer.ToFuncDef(args[0].FuncSignature, args[1].StatementsExpr)
	default:
		panic("Unknown reduce type: " + act.ReduceType.String())
	}

	if err != nil {
		err = fmt.Errorf("unexpected %s reduce error: %w", act.ReduceType, err)
	}

	return stack, symbol, err
}

type _ActionTableKey struct {
	_StateId
	SymbolId
}

type _ActionTableType struct{}

func (_ActionTableType) Get(
	stateId _StateId,
	symbolId SymbolId,
) (
	_Action,
	bool,
) {
	switch stateId {
	case _State1:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State9, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State10, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case ImportToken:
			return _Action{_ShiftAction, _State17, 0}, true
		case UnsafeToken:
			return _Action{_ShiftAction, _State26, 0}, true
		case TypeToken:
			return _Action{_ShiftAction, _State25, 0}, true
		case AliasToken:
			return _Action{_ShiftAction, _State7, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case PoundToken:
			return _Action{_ShiftAction, _State22, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case SourceType:
			return _Action{_ShiftAction, _State4, 0}, true
		case JumpOpType:
			return _Action{_ShiftAction, _State36, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State47, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case ProperStatementListType:
			return _Action{_ShiftAction, _State43, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State45, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case CommentGroupsToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFloatingComment}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case ReturnToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnToJumpOp}, true
		case BreakToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBreakToJumpOp}, true
		case ContinueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceContinueToJumpOp}, true
		case FallthroughToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFallthroughToJumpStmt}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case DirectivesDeclarationType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectivesDeclarationToStatement}, true
		case StatementType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementToProperStatementList}, true
		case FloatingCommentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatingCommentToStatement}, true
		case BranchStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBranchStmtToStatement}, true
		case UnsafeStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnsafeStmtToStatement}, true
		case JumpStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceJumpStmtToStatement}, true
		case AssignStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignStmtToStatement}, true
		case ImportStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportStmtToStatement}, true
		case BlockAddrDeclStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBlockAddrDeclStmtToStatement}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case StatementListType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementListToSource}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case TypeDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypeDefToStatement}, true
		case AliasDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAliasDefToStatement}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToStatementList}, true
		}
	case _State2:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State9, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State10, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case ImportToken:
			return _Action{_ShiftAction, _State17, 0}, true
		case UnsafeToken:
			return _Action{_ShiftAction, _State26, 0}, true
		case TypeToken:
			return _Action{_ShiftAction, _State25, 0}, true
		case AliasToken:
			return _Action{_ShiftAction, _State7, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case PoundToken:
			return _Action{_ShiftAction, _State22, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case StatementType:
			return _Action{_ShiftAction, _State5, 0}, true
		case JumpOpType:
			return _Action{_ShiftAction, _State36, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State47, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State45, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case CommentGroupsToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFloatingComment}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case ReturnToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnToJumpOp}, true
		case BreakToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBreakToJumpOp}, true
		case ContinueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceContinueToJumpOp}, true
		case FallthroughToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFallthroughToJumpStmt}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case DirectivesDeclarationType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectivesDeclarationToStatement}, true
		case FloatingCommentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatingCommentToStatement}, true
		case BranchStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBranchStmtToStatement}, true
		case UnsafeStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnsafeStmtToStatement}, true
		case JumpStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceJumpStmtToStatement}, true
		case AssignStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignStmtToStatement}, true
		case ImportStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportStmtToStatement}, true
		case BlockAddrDeclStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBlockAddrDeclStmtToStatement}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case TypeDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypeDefToStatement}, true
		case AliasDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAliasDefToStatement}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State3:
		switch symbolId {
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAction, _State6, 0}, true
		}
	case _State4:
		switch symbolId {
		case _EndMarker:
			return _Action{_AcceptAction, 0, 0}, true
		}
	case _State5:
		switch symbolId {
		case _EndMarker:
			return _Action{_AcceptAction, 0, 0}, true
		}
	case _State6:
		switch symbolId {
		case _EndMarker:
			return _Action{_AcceptAction, 0, 0}, true
		}
	case _State7:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State48, 0}, true
		}
	case _State8:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State49, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State9:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State50, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case CasePatternsType:
			return _Action{_ShiftAction, _State51, 0}, true
		case SwitchableCasePatternsType:
			return _Action{_ShiftAction, _State52, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AssignSelectablePatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToCasePatterns}, true
		case SwitchableCasePatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchableCasePatternToSwitchableCasePatterns}, true
		case EnumPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumPatternToSwitchableCasePattern}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExprToSwitchableCasePattern}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State10:
		switch symbolId {
		case ColonToken:
			return _Action{_ShiftAction, _State54, 0}, true
		}
	case _State11:
		switch symbolId {
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToLoopBody}, true
		}
	case _State12:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State55, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State56, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State13:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State57, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State58, 0}, true
		case ParametersType:
			return _Action{_ShiftAction, _State59, 0}, true
		}
	case _State14:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToAssignToAddrPattern}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State15:
		switch symbolId {
		case AtToken:
			return _Action{_ShiftAction, _State60, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		}
	case _State16:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State61, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case ConditionType:
			return _Action{_ShiftAction, _State62, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExprToCondition}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case CasePatternExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCasePatternExprToCondition}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State17:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State64, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State66, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State65, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State63, 0}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToImportClause}, true
		case ImportClauseType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSingleToImportStmt}, true
		}
	case _State18:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State9, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State10, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case ImportToken:
			return _Action{_ShiftAction, _State17, 0}, true
		case UnsafeToken:
			return _Action{_ShiftAction, _State26, 0}, true
		case TypeToken:
			return _Action{_ShiftAction, _State25, 0}, true
		case AliasToken:
			return _Action{_ShiftAction, _State7, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case PoundToken:
			return _Action{_ShiftAction, _State22, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case JumpOpType:
			return _Action{_ShiftAction, _State36, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State47, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case ProperStatementListType:
			return _Action{_ShiftAction, _State43, 0}, true
		case StatementListType:
			return _Action{_ShiftAction, _State67, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State45, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case CommentGroupsToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFloatingComment}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case ReturnToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnToJumpOp}, true
		case BreakToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBreakToJumpOp}, true
		case ContinueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceContinueToJumpOp}, true
		case FallthroughToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFallthroughToJumpStmt}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case DirectivesDeclarationType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectivesDeclarationToStatement}, true
		case StatementType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementToProperStatementList}, true
		case FloatingCommentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatingCommentToStatement}, true
		case BranchStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBranchStmtToStatement}, true
		case UnsafeStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnsafeStmtToStatement}, true
		case JumpStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceJumpStmtToStatement}, true
		case AssignStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignStmtToStatement}, true
		case ImportStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportStmtToStatement}, true
		case BlockAddrDeclStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBlockAddrDeclStmtToStatement}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case TypeDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypeDefToStatement}, true
		case AliasDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAliasDefToStatement}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToStatementList}, true
		}
	case _State19:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State72, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State20:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State75, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ColonToken:
			return _Action{_ShiftAction, _State74, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case ProperArgumentsType:
			return _Action{_ShiftAction, _State79, 0}, true
		case ArgumentsType:
			return _Action{_ShiftAction, _State76, 0}, true
		case ColonExprType:
			return _Action{_ShiftAction, _State77, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State78, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case EllipsisToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSkipPatternToArgument}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case ArgumentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArgumentToProperArguments}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToArguments}, true
		}
	case _State21:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State80, 0}, true
		}
	case _State22:
		switch symbolId {
		case LbracketToken:
			return _Action{_ShiftAction, _State81, 0}, true
		}
	case _State23:
		switch symbolId {
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToSelectExprBody}, true
		}
	case _State24:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State82, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State25:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State83, 0}, true
		}
	case _State26:
		switch symbolId {
		case LessToken:
			return _Action{_ShiftAction, _State84, 0}, true
		}
	case _State27:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State88, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State87, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State86, 0}, true
		case DollarToken:
			return _Action{_ShiftAction, _State85, 0}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToPostfixUnaryOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToPostfixUnaryOp}, true
		case AddOneAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddOneAssignToPostfixUnaryOp}, true
		case SubOneAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubOneAssignToPostfixUnaryOp}, true
		case PostfixUnaryOpType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToPostfixUnaryExpr}, true
		case GenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParameterizedExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceAccessibleExprToPostfixableExpr}, true
		}
	case _State28:
		switch symbolId {
		case AddOpType:
			return _Action{_ShiftAction, _State89, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToAddOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToAddOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToAddOp}, true
		case BitOrToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitOrToAddOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceAddExprToCmpExpr}, true
		}
	case _State29:
		switch symbolId {
		case AndToken:
			return _Action{_ShiftAction, _State90, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceAndExprToOrExpr}, true
		}
	case _State30:
		switch symbolId {
		case CmpOpType:
			return _Action{_ShiftAction, _State91, 0}, true
		case EqualToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEqualToCmpOp}, true
		case NotEqualToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotEqualToCmpOp}, true
		case LessToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLessToCmpOp}, true
		case LessOrEqualToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLessOrEqualToCmpOp}, true
		case GreaterToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGreaterToCmpOp}, true
		case GreaterOrEqualToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGreaterOrEqualToCmpOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceCmpExprToAndExpr}, true
		}
	case _State31:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State92, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceExprToReturnableExpr}, true
		}
	case _State32:
		switch symbolId {
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFuncDef}, true
		}
	case _State33:
		switch symbolId {
		case ElseToken:
			return _Action{_ShiftAction, _State93, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceIfElifExprToIfElseExpr}, true
		}
	case _State34:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State94, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExprStructToReturnableExpr}, true
		}
	case _State35:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State95, 0}, true
		}
	case _State36:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case AtToken:
			return _Action{_ShiftAction, _State96, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case ReturnableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabeledValuedToJumpStmt}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceUnlabeledNoValueToJumpStmt}, true
		}
	case _State37:
		switch symbolId {
		case ForToken:
			return _Action{_ShiftAction, _State97, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceInfiniteToLoopExprBody}, true
		}
	case _State38:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State98, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State39:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State99, 0}, true
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSizeProperToMakeExpr}, true
		}
	case _State40:
		switch symbolId {
		case MulOpType:
			return _Action{_ShiftAction, _State100, 0}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToMulOp}, true
		case DivToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDivToMulOp}, true
		case ModToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceModToMulOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToMulOp}, true
		case BitLshiftToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitLshiftToMulOp}, true
		case BitRshiftToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitRshiftToMulOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceMulExprToAddExpr}, true
		}
	case _State41:
		switch symbolId {
		case OrToken:
			return _Action{_ShiftAction, _State101, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceOrExprToSendRecvExpr}, true
		}
	case _State42:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToPrefixUnaryExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State43:
		switch symbolId {
		case NewlinesToken:
			return _Action{_ShiftAction, _State102, 0}, true
		case SemicolonToken:
			return _Action{_ShiftAction, _State103, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperStatementListToStatementList}, true
		}
	case _State44:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State104, 0}, true
		}
	case _State45:
		switch symbolId {
		case AssignToken:
			return _Action{_ShiftAction, _State105, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceReturnableExprToStatement}, true
		}
	case _State46:
		switch symbolId {
		case ArrowToken:
			return _Action{_ShiftAction, _State106, 0}, true
		case BinaryAssignOpType:
			return _Action{_ShiftAction, _State107, 0}, true
		case AddAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddAssignToBinaryAssignOp}, true
		case SubAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubAssignToBinaryAssignOp}, true
		case MulAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulAssignToBinaryAssignOp}, true
		case DivAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDivAssignToBinaryAssignOp}, true
		case ModAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceModAssignToBinaryAssignOp}, true
		case BitAndAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndAssignToBinaryAssignOp}, true
		case BitOrAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitOrAssignToBinaryAssignOp}, true
		case BitXorAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorAssignToBinaryAssignOp}, true
		case BitLshiftAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitLshiftAssignToBinaryAssignOp}, true
		case BitRshiftAssignToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitRshiftAssignToBinaryAssignOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceSendRecvExprToAssignOpExpr}, true
		}
	case _State47:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case DollarToken:
			return _Action{_ShiftAction, _State108, 0}, true
		case NewAddressableType:
			return _Action{_ShiftAction, _State109, 0}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToNewAddressable}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToNewAddressable}, true
		}
	case _State48:
		switch symbolId {
		case DollarToken:
			return _Action{_ShiftAction, _State110, 0}, true
		case GenericParametersType:
			return _Action{_ShiftAction, _State111, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToGenericParameters}, true
		}
	case _State49:
		switch symbolId {
		case OrToken:
			return _Action{_ShiftAction, _State101, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToRecvExpr}, true
		}
	case _State50:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State112, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State113, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnnamedStructToEnumPattern}, true
		}
	case _State51:
		switch symbolId {
		case ColonToken:
			return _Action{_ShiftAction, _State114, 0}, true
		}
	case _State52:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State116, 0}, true
		case AssignToken:
			return _Action{_ShiftAction, _State115, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceSwitchableCasePatternsToCasePatterns}, true
		}
	case _State53:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case NewAddressableType:
			return _Action{_ShiftAction, _State109, 0}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToNewAddressable}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToNewAddressable}, true
		}
	case _State54:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State9, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State10, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case ImportToken:
			return _Action{_ShiftAction, _State17, 0}, true
		case UnsafeToken:
			return _Action{_ShiftAction, _State26, 0}, true
		case TypeToken:
			return _Action{_ShiftAction, _State25, 0}, true
		case AliasToken:
			return _Action{_ShiftAction, _State7, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case PoundToken:
			return _Action{_ShiftAction, _State22, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case JumpOpType:
			return _Action{_ShiftAction, _State36, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State47, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State45, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case CommentGroupsToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFloatingComment}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case ReturnToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnToJumpOp}, true
		case BreakToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBreakToJumpOp}, true
		case ContinueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceContinueToJumpOp}, true
		case FallthroughToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFallthroughToJumpStmt}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case DirectivesDeclarationType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectivesDeclarationToStatement}, true
		case StatementType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementToOptionalStatement}, true
		case FloatingCommentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatingCommentToStatement}, true
		case BranchStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBranchStmtToStatement}, true
		case OptionalStatementType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultBranchToBranchStmt}, true
		case UnsafeStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnsafeStmtToStatement}, true
		case JumpStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceJumpStmtToStatement}, true
		case AssignStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignStmtToStatement}, true
		case ImportStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportStmtToStatement}, true
		case BlockAddrDeclStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBlockAddrDeclStmtToStatement}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case TypeDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypeDefToStatement}, true
		case AliasDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAliasDefToStatement}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToOptionalStatement}, true
		}
	case _State55:
		switch symbolId {
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case CommaToken:
			return _Action{_ShiftAction, _State92, 0}, true
		case SemicolonToken:
			return _Action{_ShiftAction, _State117, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceWhileToLoopExprBody}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceExprToReturnableExpr}, true
		}
	case _State56:
		switch symbolId {
		case InToken:
			return _Action{_ShiftAction, _State118, 0}, true
		}
	case _State57:
		switch symbolId {
		case DollarToken:
			return _Action{_ShiftAction, _State110, 0}, true
		case GenericParametersType:
			return _Action{_ShiftAction, _State119, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToGenericParameters}, true
		}
	case _State58:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State122, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State123, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case EllipsisToken:
			return _Action{_ShiftAction, _State120, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State121, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State126, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case ProperParameterListType:
			return _Action{_ShiftAction, _State125, 0}, true
		case ParameterListType:
			return _Action{_ShiftAction, _State124, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case ParameterType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterToProperParameterList}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToParameterList}, true
		}
	case _State59:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToReturnType}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case ReturnTypeType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAnonymousToFuncSignature}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToReturnType}, true
		}
	case _State60:
		switch symbolId {
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLabelledToControlFlowExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		}
	case _State61:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State50, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case SwitchableCasePatternsType:
			return _Action{_ShiftAction, _State127, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case SwitchableCasePatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchableCasePatternToSwitchableCasePatterns}, true
		case EnumPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumPatternToSwitchableCasePattern}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExprToSwitchableCasePattern}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State62:
		switch symbolId {
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToIfOnlyExpr}, true
		}
	case _State63:
		switch symbolId {
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportToLocalToImportClause}, true
		}
	case _State64:
		switch symbolId {
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAliasToImportClause}, true
		}
	case _State65:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State64, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State66, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State63, 0}, true
		case ProperImportClausesType:
			return _Action{_ShiftAction, _State129, 0}, true
		case ImportClausesType:
			return _Action{_ShiftAction, _State128, 0}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToImportClause}, true
		case ImportClauseType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportClauseToProperImportClauses}, true
		}
	case _State66:
		switch symbolId {
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnusableImportToImportClause}, true
		}
	case _State67:
		switch symbolId {
		case RbraceToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToStatements}, true
		}
	case _State68:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToRefTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State69:
		switch symbolId {
		case DotToken:
			return _Action{_ShiftAction, _State130, 0}, true
		case DollarToken:
			return _Action{_ShiftAction, _State85, 0}, true
		case GenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGenericArgumentsToOptionalGenericArguments}, true
		case OptionalGenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLocalToNamedTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToOptionalGenericArguments}, true
		}
	case _State70:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State132, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State133, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State131, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State141, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State139, 0}, true
		case TypePropertyType:
			return _Action{_ShiftAction, _State140, 0}, true
		case ProperImplicitTypePropertiesType:
			return _Action{_ShiftAction, _State138, 0}, true
		case ImplicitTypePropertiesType:
			return _Action{_ShiftAction, _State136, 0}, true
		case ProperImplicitEnumTypePropertiesType:
			return _Action{_ShiftAction, _State137, 0}, true
		case ImplicitEnumTypePropertiesType:
			return _Action{_ShiftAction, _State135, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State134, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToTypeProperty}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToImplicitTypeProperties}, true
		}
	case _State71:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDefaultEnumOpTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State72:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State143, 0}, true
		case ColonToken:
			return _Action{_ShiftAction, _State142, 0}, true
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case RbracketToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToSliceTypeExpr}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true
		}
	case _State73:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToUnaryTraitOpTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State74:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnitExprPairToColonExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceUnitUnitPairToColonExpr}, true
		}
	case _State75:
		switch symbolId {
		case AtToken:
			return _Action{_ShiftAction, _State60, 0}, true
		case AssignToken:
			return _Action{_ShiftAction, _State145, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		}
	case _State76:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToImplicitStructExpr}, true
		}
	case _State77:
		switch symbolId {
		case ColonToken:
			return _Action{_ShiftAction, _State146, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceColonExprToArgument}, true
		}
	case _State78:
		switch symbolId {
		case ColonToken:
			return _Action{_ShiftAction, _State147, 0}, true
		case EllipsisToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarargAssignmentToArgument}, true

		default:
			return _Action{_ReduceAction, 0, _ReducePositionalToArgument}, true
		}
	case _State79:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State148, 0}, true
		case NewlinesToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImproperImplicitToArguments}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperArgumentsToArguments}, true
		}
	case _State80:
		switch symbolId {
		case LbracketToken:
			return _Action{_ShiftAction, _State149, 0}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAction, _State150, 0}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		}
	case _State81:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State151, 0}, true
		case DirectivesType:
			return _Action{_ShiftAction, _State152, 0}, true
		case DirectiveType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveToDirectives}, true
		}
	case _State82:
		switch symbolId {
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToSwitchExprBody}, true
		}
	case _State83:
		switch symbolId {
		case DollarToken:
			return _Action{_ShiftAction, _State110, 0}, true
		case GenericParametersType:
			return _Action{_ShiftAction, _State153, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToGenericParameters}, true
		}
	case _State84:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State154, 0}, true
		}
	case _State85:
		switch symbolId {
		case LbracketToken:
			return _Action{_ShiftAction, _State155, 0}, true
		}
	case _State86:
		switch symbolId {
		case AsToken:
			return _Action{_ShiftAction, _State156, 0}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToAccessExpr}, true
		}
	case _State87:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ColonToken:
			return _Action{_ShiftAction, _State74, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case IndexType:
			return _Action{_ShiftAction, _State159, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case ColonExprType:
			return _Action{_ShiftAction, _State157, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State158, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State88:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State75, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ColonToken:
			return _Action{_ShiftAction, _State74, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case ProperArgumentsType:
			return _Action{_ShiftAction, _State79, 0}, true
		case ArgumentsType:
			return _Action{_ShiftAction, _State160, 0}, true
		case ColonExprType:
			return _Action{_ShiftAction, _State77, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State78, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case EllipsisToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSkipPatternToArgument}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case ArgumentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArgumentToProperArguments}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToArguments}, true
		}
	case _State89:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State161, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State90:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State162, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State91:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State163, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State92:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePairToImproperExprStruct}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State93:
		switch symbolId {
		case IfToken:
			return _Action{_ShiftAction, _State164, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceElseToIfElseExpr}, true
		}
	case _State94:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToImproperExprStruct}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State95:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State75, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ColonToken:
			return _Action{_ShiftAction, _State74, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case ProperArgumentsType:
			return _Action{_ShiftAction, _State79, 0}, true
		case ArgumentsType:
			return _Action{_ShiftAction, _State165, 0}, true
		case ColonExprType:
			return _Action{_ShiftAction, _State77, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State78, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case EllipsisToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSkipPatternToArgument}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case ArgumentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArgumentToProperArguments}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToArguments}, true
		}
	case _State96:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State166, 0}, true
		}
	case _State97:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDoWhileToLoopExprBody}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State98:
		switch symbolId {
		case ColonToken:
			return _Action{_ShiftAction, _State167, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceSizeToMakeExprSize}, true
		}
	case _State99:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State168, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSizeImproperToMakeExpr}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State100:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToBinaryMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State101:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State169, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State102:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State9, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State10, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case ImportToken:
			return _Action{_ShiftAction, _State17, 0}, true
		case UnsafeToken:
			return _Action{_ShiftAction, _State26, 0}, true
		case TypeToken:
			return _Action{_ShiftAction, _State25, 0}, true
		case AliasToken:
			return _Action{_ShiftAction, _State7, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case PoundToken:
			return _Action{_ShiftAction, _State22, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case JumpOpType:
			return _Action{_ShiftAction, _State36, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State47, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State45, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case CommentGroupsToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFloatingComment}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case ReturnToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnToJumpOp}, true
		case BreakToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBreakToJumpOp}, true
		case ContinueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceContinueToJumpOp}, true
		case FallthroughToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFallthroughToJumpStmt}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case DirectivesDeclarationType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectivesDeclarationToStatement}, true
		case StatementType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddImplicitToProperStatementList}, true
		case FloatingCommentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatingCommentToStatement}, true
		case BranchStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBranchStmtToStatement}, true
		case UnsafeStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnsafeStmtToStatement}, true
		case JumpStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceJumpStmtToStatement}, true
		case AssignStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignStmtToStatement}, true
		case ImportStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportStmtToStatement}, true
		case BlockAddrDeclStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBlockAddrDeclStmtToStatement}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case TypeDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypeDefToStatement}, true
		case AliasDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAliasDefToStatement}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperImplicitToStatementList}, true
		}
	case _State103:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State9, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State10, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case ImportToken:
			return _Action{_ShiftAction, _State17, 0}, true
		case UnsafeToken:
			return _Action{_ShiftAction, _State26, 0}, true
		case TypeToken:
			return _Action{_ShiftAction, _State25, 0}, true
		case AliasToken:
			return _Action{_ShiftAction, _State7, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case PoundToken:
			return _Action{_ShiftAction, _State22, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case JumpOpType:
			return _Action{_ShiftAction, _State36, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State47, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State45, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case CommentGroupsToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFloatingComment}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case ReturnToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnToJumpOp}, true
		case BreakToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBreakToJumpOp}, true
		case ContinueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceContinueToJumpOp}, true
		case FallthroughToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFallthroughToJumpStmt}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case DirectivesDeclarationType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectivesDeclarationToStatement}, true
		case StatementType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddExplicitToProperStatementList}, true
		case FloatingCommentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatingCommentToStatement}, true
		case BranchStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBranchStmtToStatement}, true
		case UnsafeStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnsafeStmtToStatement}, true
		case JumpStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceJumpStmtToStatement}, true
		case AssignStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignStmtToStatement}, true
		case ImportStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportStmtToStatement}, true
		case BlockAddrDeclStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBlockAddrDeclStmtToStatement}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case TypeDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypeDefToStatement}, true
		case AliasDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAliasDefToStatement}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExplicitToStatementList}, true
		}
	case _State104:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State132, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State133, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State131, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State141, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State139, 0}, true
		case ProperExplicitTypePropertiesType:
			return _Action{_ShiftAction, _State171, 0}, true
		case ExplicitTypePropertiesType:
			return _Action{_ShiftAction, _State170, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State134, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case TypePropertyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypePropertyToProperExplicitTypeProperties}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToTypeProperty}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToExplicitTypeProperties}, true
		}
	case _State105:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case ReturnableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToAssignStmt}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State106:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State172, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State107:
		switch symbolId {
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State173, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State108:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State174, 0}, true
		}
	case _State109:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State175, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNewInferredToAddrDeclPattern}, true
		}
	case _State110:
		switch symbolId {
		case LbracketToken:
			return _Action{_ShiftAction, _State176, 0}, true
		}
	case _State111:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State177, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State112:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedToEnumPattern}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNamedUnitToEnumPattern}, true
		}
	case _State113:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMatchAnyDataToEnumPattern}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceMatchAnyUnitToEnumPattern}, true
		}
	case _State114:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State9, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State10, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case ImportToken:
			return _Action{_ShiftAction, _State17, 0}, true
		case UnsafeToken:
			return _Action{_ShiftAction, _State26, 0}, true
		case TypeToken:
			return _Action{_ShiftAction, _State25, 0}, true
		case AliasToken:
			return _Action{_ShiftAction, _State7, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case PoundToken:
			return _Action{_ShiftAction, _State22, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case JumpOpType:
			return _Action{_ShiftAction, _State36, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State47, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State45, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case CommentGroupsToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFloatingComment}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case ReturnToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnToJumpOp}, true
		case BreakToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBreakToJumpOp}, true
		case ContinueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceContinueToJumpOp}, true
		case FallthroughToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFallthroughToJumpStmt}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case DirectivesDeclarationType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectivesDeclarationToStatement}, true
		case StatementType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementToOptionalStatement}, true
		case FloatingCommentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatingCommentToStatement}, true
		case BranchStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBranchStmtToStatement}, true
		case OptionalStatementType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCaseBranchToBranchStmt}, true
		case UnsafeStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnsafeStmtToStatement}, true
		case JumpStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceJumpStmtToStatement}, true
		case AssignStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignStmtToStatement}, true
		case ImportStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImportStmtToStatement}, true
		case BlockAddrDeclStmtType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBlockAddrDeclStmtToStatement}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case TypeDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypeDefToStatement}, true
		case AliasDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAliasDefToStatement}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToOptionalStatement}, true
		}
	case _State115:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToAssignSelectablePattern}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State116:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State50, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case SwitchableCasePatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToSwitchableCasePatterns}, true
		case EnumPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumPatternToSwitchableCasePattern}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExprToSwitchableCasePattern}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State117:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ReturnableExprType:
			return _Action{_ShiftAction, _State178, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State118:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State179, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State119:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State58, 0}, true
		case ParametersType:
			return _Action{_ShiftAction, _State180, 0}, true
		}
	case _State120:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State181, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State121:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State182, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State122:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State130, 0}, true
		case DollarToken:
			return _Action{_ShiftAction, _State85, 0}, true
		case EllipsisToken:
			return _Action{_ShiftAction, _State183, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State184, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State185, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case GenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGenericArgumentsToOptionalGenericArguments}, true
		case OptionalGenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLocalToNamedTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToOptionalGenericArguments}, true
		}
	case _State123:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case EllipsisToken:
			return _Action{_ShiftAction, _State186, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State187, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State188, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToInferredTypeExpr}, true
		}
	case _State124:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParameters}, true
		}
	case _State125:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State189, 0}, true
		case NewlinesToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImproperImplicitToParameterList}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperParameterListToParameterList}, true
		}
	case _State126:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceUnnamedArgToParameter}, true
		}
	case _State127:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State116, 0}, true
		case AssignToken:
			return _Action{_ShiftAction, _State190, 0}, true
		}
	case _State128:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMultipleToImportStmt}, true
		}
	case _State129:
		switch symbolId {
		case NewlinesToken:
			return _Action{_ShiftAction, _State192, 0}, true
		case CommaToken:
			return _Action{_ShiftAction, _State191, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperImportClausesToImportClauses}, true
		}
	case _State130:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State193, 0}, true
		}
	case _State131:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State194, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State195, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State132:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State130, 0}, true
		case DollarToken:
			return _Action{_ShiftAction, _State85, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State196, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case GenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGenericArgumentsToOptionalGenericArguments}, true
		case OptionalGenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLocalToNamedTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToOptionalGenericArguments}, true
		}
	case _State133:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State197, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToInferredTypeExpr}, true
		}
	case _State134:
		switch symbolId {
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToFuncDef}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State135:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToImplicitEnumTypeExpr}, true
		}
	case _State136:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToImplicitStructTypeExpr}, true
		}
	case _State137:
		switch symbolId {
		case OrToken:
			return _Action{_ShiftAction, _State198, 0}, true
		case NewlinesToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImproperToImplicitEnumTypeProperties}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperImplicitEnumTypePropertiesToImplicitEnumTypeProperties}, true
		}
	case _State138:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State199, 0}, true
		case NewlinesToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImproperImplicitToImplicitTypeProperties}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperImplicitTypePropertiesToImplicitTypeProperties}, true
		}
	case _State139:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceUnnamedFieldToTypeProperty}, true
		}
	case _State140:
		switch symbolId {
		case OrToken:
			return _Action{_ShiftAction, _State200, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceTypePropertyToProperImplicitTypeProperties}, true
		}
	case _State141:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State201, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State202, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State142:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State203, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State143:
		switch symbolId {
		case IntegerLiteralToken:
			return _Action{_ShiftAction, _State204, 0}, true
		}
	case _State144:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToBinaryTraitOpTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State145:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedAssignmentToArgument}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State146:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceColonExprExprTupleToColonExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceColonExprUnitTupleToColonExpr}, true
		}
	case _State147:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExprExprPairToColonExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceExprUnitPairToColonExpr}, true
		}
	case _State148:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State75, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ColonToken:
			return _Action{_ShiftAction, _State74, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case ColonExprType:
			return _Action{_ShiftAction, _State77, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State78, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case EllipsisToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSkipPatternToArgument}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case ArgumentType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToProperArguments}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExplicitToArguments}, true
		}
	case _State149:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State205, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State150:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToMakeExprHead}, true
		}
	case _State151:
		switch symbolId {
		case NotToken:
			return _Action{_ShiftAction, _State208, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State207, 0}, true
		case ColonToken:
			return _Action{_ShiftAction, _State206, 0}, true
		case DirectiveExprsType:
			return _Action{_ShiftAction, _State211, 0}, true
		case DirectiveExprType:
			return _Action{_ShiftAction, _State210, 0}, true
		case DirectiveAndExprType:
			return _Action{_ShiftAction, _State209, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToDirectiveValue}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToDirectiveValue}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToDirectiveValue}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToDirectiveValue}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToDirectiveValue}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToDirectiveValue}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToDirectiveValue}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToDirectiveValue}, true
		case ProperDirectiveExprsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceProperDirectiveExprsToDirectiveExprs}, true
		case DirectiveNotExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveNotExprToDirectiveAndExpr}, true
		case DirectiveAtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveAtomExprToDirectiveNotExpr}, true
		case DirectiveValueExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveValueExprToDirectiveAtomExpr}, true
		case DirectiveValueType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDirectiveValueExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToDirectiveExprs}, true
		}
	case _State152:
		switch symbolId {
		case SemicolonToken:
			return _Action{_ShiftAction, _State212, 0}, true
		case RbracketToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDirectivesDeclaration}, true
		}
	case _State153:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State213, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State154:
		switch symbolId {
		case GreaterToken:
			return _Action{_ShiftAction, _State214, 0}, true
		}
	case _State155:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State217, 0}, true
		case ProperGenericArgumentListType:
			return _Action{_ShiftAction, _State216, 0}, true
		case GenericArgumentListType:
			return _Action{_ShiftAction, _State215, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToGenericArgumentList}, true
		}
	case _State156:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State218, 0}, true
		}
	case _State157:
		switch symbolId {
		case ColonToken:
			return _Action{_ShiftAction, _State146, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceColonExprToIndex}, true
		}
	case _State158:
		switch symbolId {
		case ColonToken:
			return _Action{_ShiftAction, _State147, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceExprToIndex}, true
		}
	case _State159:
		switch symbolId {
		case RbracketToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToIndexExpr}, true
		}
	case _State160:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToCallExpr}, true
		}
	case _State161:
		switch symbolId {
		case MulOpType:
			return _Action{_ShiftAction, _State100, 0}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToMulOp}, true
		case DivToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDivToMulOp}, true
		case ModToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceModToMulOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToMulOp}, true
		case BitLshiftToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitLshiftToMulOp}, true
		case BitRshiftToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitRshiftToMulOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToBinaryAddExpr}, true
		}
	case _State162:
		switch symbolId {
		case CmpOpType:
			return _Action{_ShiftAction, _State91, 0}, true
		case EqualToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEqualToCmpOp}, true
		case NotEqualToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotEqualToCmpOp}, true
		case LessToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLessToCmpOp}, true
		case LessOrEqualToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLessOrEqualToCmpOp}, true
		case GreaterToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGreaterToCmpOp}, true
		case GreaterOrEqualToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGreaterOrEqualToCmpOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToBinaryAndExpr}, true
		}
	case _State163:
		switch symbolId {
		case AddOpType:
			return _Action{_ShiftAction, _State89, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToAddOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToAddOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToAddOp}, true
		case BitOrToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitOrToAddOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToBinaryCmpExpr}, true
		}
	case _State164:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case CaseToken:
			return _Action{_ShiftAction, _State61, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case ConditionType:
			return _Action{_ShiftAction, _State219, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExprToCondition}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case CasePatternExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCasePatternExprToCondition}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State165:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInitializeExpr}, true
		}
	case _State166:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case ExprType:
			return _Action{_ShiftAction, _State31, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case ImproperExprStructType:
			return _Action{_ShiftAction, _State34, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case ReturnableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLabeledValuedToJumpStmt}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceLabeledNoValueToJumpStmt}, true
		}
	case _State167:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSizeCapacityToMakeExprSize}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State168:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State220, 0}, true
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceValueProperToMakeExpr}, true
		}
	case _State169:
		switch symbolId {
		case AndToken:
			return _Action{_ShiftAction, _State90, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToBinaryOrExpr}, true
		}
	case _State170:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToPropertiesTypeExpr}, true
		}
	case _State171:
		switch symbolId {
		case NewlinesToken:
			return _Action{_ShiftAction, _State222, 0}, true
		case CommaToken:
			return _Action{_ShiftAction, _State221, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperExplicitTypePropertiesToExplicitTypeProperties}, true
		}
	case _State172:
		switch symbolId {
		case OrToken:
			return _Action{_ShiftAction, _State101, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToSendExpr}, true
		}
	case _State173:
		switch symbolId {
		case ArrowToken:
			return _Action{_ShiftAction, _State106, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToBinaryAssignOpExpr}, true
		}
	case _State174:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case BlockAddrDeclListType:
			return _Action{_ShiftAction, _State223, 0}, true
		case ProperBlockAddrDeclListType:
			return _Action{_ShiftAction, _State225, 0}, true
		case NewAddressableType:
			return _Action{_ShiftAction, _State224, 0}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case BlockAddrDeclItemType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBlockAddrDeclItemToProperBlockAddrDeclList}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToNewAddressable}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToNewAddressable}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToBlockAddrDeclList}, true
		}
	case _State175:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNewTypedToAddrDeclPattern}, true
		}
	case _State176:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State226, 0}, true
		case ProperGenericParameterListType:
			return _Action{_ShiftAction, _State228, 0}, true
		case GenericParameterListType:
			return _Action{_ShiftAction, _State227, 0}, true
		case GenericParameterType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGenericParameterToProperGenericParameterList}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToGenericParameterList}, true
		}
	case _State177:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceToAliasDef}, true
		}
	case _State178:
		switch symbolId {
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceForToLoopExprBody}, true
		}
	case _State179:
		switch symbolId {
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIteratorToLoopExprBody}, true
		}
	case _State180:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToReturnType}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case ReturnTypeType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedToFuncSignature}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToReturnType}, true
		}
	case _State181:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceUnnamedVarargToParameter}, true
		}
	case _State182:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceUnnamedReceiverToParameter}, true
		}
	case _State183:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State229, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State184:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State230, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State185:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNamedArgToParameter}, true
		}
	case _State186:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State231, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State187:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State232, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State188:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceIgnoreArgToParameter}, true
		}
	case _State189:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State122, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State123, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case EllipsisToken:
			return _Action{_ShiftAction, _State120, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State121, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State126, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case ParameterType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToProperParameterList}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExplicitToParameterList}, true
		}
	case _State190:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToCasePatternExpr}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State191:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State64, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State66, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State63, 0}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToImportClause}, true
		case ImportClauseType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddExplicitToProperImportClauses}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceExplicitToImportClauses}, true
		}
	case _State192:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State64, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State66, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State63, 0}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToImportClause}, true
		case ImportClauseType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddImplicitToProperImportClauses}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImplicitToImportClauses}, true
		}
	case _State193:
		switch symbolId {
		case DollarToken:
			return _Action{_ShiftAction, _State85, 0}, true
		case GenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGenericArgumentsToOptionalGenericArguments}, true
		case OptionalGenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExternalToNamedTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToOptionalGenericArguments}, true
		}
	case _State194:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State130, 0}, true
		case DollarToken:
			return _Action{_ShiftAction, _State85, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State233, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case GenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGenericArgumentsToOptionalGenericArguments}, true
		case OptionalGenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLocalToNamedTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToOptionalGenericArguments}, true
		}
	case _State195:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceDefaultUnnamedEnumFieldToTypeProperty}, true
		}
	case _State196:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNamedFieldToTypeProperty}, true
		}
	case _State197:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReducePaddingFieldToTypeProperty}, true
		}
	case _State198:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State132, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State133, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State131, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State141, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State139, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State134, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case TypePropertyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToProperImplicitEnumTypeProperties}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToTypeProperty}, true
		}
	case _State199:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State132, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State133, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State131, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State141, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State139, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State134, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case TypePropertyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToProperImplicitTypeProperties}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToTypeProperty}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExplicitToImplicitTypeProperties}, true
		}
	case _State200:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State132, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State133, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State131, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State141, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State139, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State134, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case TypePropertyType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePairToProperImplicitEnumTypeProperties}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToTypeProperty}, true
		}
	case _State201:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case DotToken:
			return _Action{_ShiftAction, _State130, 0}, true
		case DollarToken:
			return _Action{_ShiftAction, _State85, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State234, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case GenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGenericArgumentsToOptionalGenericArguments}, true
		case OptionalGenericArgumentsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLocalToNamedTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToOptionalGenericArguments}, true
		}
	case _State202:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceVarTypeUnnamedFieldToTypeProperty}, true
		}
	case _State203:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case RbracketToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToMapTypeExpr}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true
		}
	case _State204:
		switch symbolId {
		case RbracketToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToArrayTypeExpr}, true
		}
	case _State205:
		switch symbolId {
		case ColonToken:
			return _Action{_ShiftAction, _State142, 0}, true
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case RbracketToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToSliceTypeExpr}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true
		}
	case _State206:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State235, 0}, true
		}
	case _State207:
		switch symbolId {
		case NotToken:
			return _Action{_ShiftAction, _State208, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State207, 0}, true
		case DirectiveExprType:
			return _Action{_ShiftAction, _State236, 0}, true
		case DirectiveAndExprType:
			return _Action{_ShiftAction, _State209, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToDirectiveValue}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToDirectiveValue}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToDirectiveValue}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToDirectiveValue}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToDirectiveValue}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToDirectiveValue}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToDirectiveValue}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToDirectiveValue}, true
		case DirectiveNotExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveNotExprToDirectiveAndExpr}, true
		case DirectiveAtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveAtomExprToDirectiveNotExpr}, true
		case DirectiveValueExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveValueExprToDirectiveAtomExpr}, true
		case DirectiveValueType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDirectiveValueExpr}, true
		}
	case _State208:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State207, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToDirectiveValue}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToDirectiveValue}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToDirectiveValue}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToDirectiveValue}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToDirectiveValue}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToDirectiveValue}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToDirectiveValue}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToDirectiveValue}, true
		case DirectiveAtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToDirectiveNotExpr}, true
		case DirectiveValueExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveValueExprToDirectiveAtomExpr}, true
		case DirectiveValueType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDirectiveValueExpr}, true
		}
	case _State209:
		switch symbolId {
		case AndToken:
			return _Action{_ShiftAction, _State237, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceDirectiveAndExprToDirectiveExpr}, true
		}
	case _State210:
		switch symbolId {
		case OrToken:
			return _Action{_ShiftAction, _State238, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceDirectiveExprToProperDirectiveExprs}, true
		}
	case _State211:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State239, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNamedToDirective}, true
		}
	case _State212:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State151, 0}, true
		case DirectiveType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToDirectives}, true
		}
	case _State213:
		switch symbolId {
		case ImplementsToken:
			return _Action{_ShiftAction, _State240, 0}, true
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceDefinitionToTypeDef}, true
		}
	case _State214:
		switch symbolId {
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToUnsafeStmt}, true
		}
	case _State215:
		switch symbolId {
		case RbracketToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToGenericArguments}, true
		}
	case _State216:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State241, 0}, true
		case NewlinesToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImproperImplicitToGenericArgumentList}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperGenericArgumentListToGenericArgumentList}, true
		}
	case _State217:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceTypeExprToProperGenericArgumentList}, true
		}
	case _State218:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State242, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State219:
		switch symbolId {
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceElifToIfElifExpr}, true
		}
	case _State220:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceValueImproperToMakeExpr}, true
		}
	case _State221:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State132, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State133, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State131, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State141, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State139, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State134, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case TypePropertyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddExplicitToProperExplicitTypeProperties}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToTypeProperty}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExplicitToExplicitTypeProperties}, true
		}
	case _State222:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State132, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAction, _State133, 0}, true
		case DefaultToken:
			return _Action{_ShiftAction, _State131, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State141, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State139, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State134, 0}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case TypePropertyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddImplicitToProperExplicitTypeProperties}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToTypeProperty}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperImplicitToExplicitTypeProperties}, true
		}
	case _State223:
		switch symbolId {
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToBlockAddrDeclStmt}, true
		}
	case _State224:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case AssignToken:
			return _Action{_ShiftAction, _State243, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State244, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State225:
		switch symbolId {
		case NewlinesToken:
			return _Action{_ShiftAction, _State246, 0}, true
		case CommaToken:
			return _Action{_ShiftAction, _State245, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperBlockAddrDeclListToBlockAddrDeclList}, true
		}
	case _State226:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State247, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceUnconstrainedToGenericParameter}, true
		}
	case _State227:
		switch symbolId {
		case RbracketToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGenericToGenericParameters}, true
		}
	case _State228:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State248, 0}, true
		case NewlinesToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImproperImplicitToGenericParameterList}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceProperGenericParameterListToGenericParameterList}, true
		}
	case _State229:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNamedVarargToParameter}, true
		}
	case _State230:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNamedReceiverToParameter}, true
		}
	case _State231:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceIgnoreVarargToParameter}, true
		}
	case _State232:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceIgnoreReceiverToParameter}, true
		}
	case _State233:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceDefaultNamedEnumFieldToTypeProperty}, true
		}
	case _State234:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceVarTypeNamedFieldToTypeProperty}, true
		}
	case _State235:
		switch symbolId {
		case NotToken:
			return _Action{_ShiftAction, _State208, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State207, 0}, true
		case DirectiveExprsType:
			return _Action{_ShiftAction, _State249, 0}, true
		case DirectiveExprType:
			return _Action{_ShiftAction, _State210, 0}, true
		case DirectiveAndExprType:
			return _Action{_ShiftAction, _State209, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToDirectiveValue}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToDirectiveValue}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToDirectiveValue}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToDirectiveValue}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToDirectiveValue}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToDirectiveValue}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToDirectiveValue}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToDirectiveValue}, true
		case ProperDirectiveExprsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceProperDirectiveExprsToDirectiveExprs}, true
		case DirectiveNotExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveNotExprToDirectiveAndExpr}, true
		case DirectiveAtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveAtomExprToDirectiveNotExpr}, true
		case DirectiveValueExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveValueExprToDirectiveAtomExpr}, true
		case DirectiveValueType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDirectiveValueExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceNilToDirectiveExprs}, true
		}
	case _State236:
		switch symbolId {
		case OrToken:
			return _Action{_ShiftAction, _State238, 0}, true
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceGroupToDirectiveAtomExpr}, true
		}
	case _State237:
		switch symbolId {
		case NotToken:
			return _Action{_ShiftAction, _State208, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State207, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToDirectiveValue}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToDirectiveValue}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToDirectiveValue}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToDirectiveValue}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToDirectiveValue}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToDirectiveValue}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToDirectiveValue}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToDirectiveValue}, true
		case DirectiveNotExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAndToDirectiveAndExpr}, true
		case DirectiveAtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveAtomExprToDirectiveNotExpr}, true
		case DirectiveValueExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveValueExprToDirectiveAtomExpr}, true
		case DirectiveValueType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDirectiveValueExpr}, true
		}
	case _State238:
		switch symbolId {
		case NotToken:
			return _Action{_ShiftAction, _State208, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State207, 0}, true
		case DirectiveAndExprType:
			return _Action{_ShiftAction, _State250, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToDirectiveValue}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToDirectiveValue}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToDirectiveValue}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToDirectiveValue}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToDirectiveValue}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToDirectiveValue}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToDirectiveValue}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToDirectiveValue}, true
		case DirectiveNotExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveNotExprToDirectiveAndExpr}, true
		case DirectiveAtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveAtomExprToDirectiveNotExpr}, true
		case DirectiveValueExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveValueExprToDirectiveAtomExpr}, true
		case DirectiveValueType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDirectiveValueExpr}, true
		}
	case _State239:
		switch symbolId {
		case NotToken:
			return _Action{_ShiftAction, _State208, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State207, 0}, true
		case DirectiveExprType:
			return _Action{_ShiftAction, _State251, 0}, true
		case DirectiveAndExprType:
			return _Action{_ShiftAction, _State209, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToDirectiveValue}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToDirectiveValue}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToDirectiveValue}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToDirectiveValue}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToDirectiveValue}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToDirectiveValue}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToDirectiveValue}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToDirectiveValue}, true
		case DirectiveNotExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveNotExprToDirectiveAndExpr}, true
		case DirectiveAtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveAtomExprToDirectiveNotExpr}, true
		case DirectiveValueExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDirectiveValueExprToDirectiveAtomExpr}, true
		case DirectiveValueType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToDirectiveValueExpr}, true
		}
	case _State240:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State252, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true
		}
	case _State241:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State69, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State70, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case BitAndToken:
			return _Action{_ShiftAction, _State68, 0}, true
		case DefaultEnumOpType:
			return _Action{_ShiftAction, _State71, 0}, true
		case UnaryTraitOpType:
			return _Action{_ShiftAction, _State73, 0}, true
		case TypeExprType:
			return _Action{_ShiftAction, _State253, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToInferredTypeExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case QuestionToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceQuestionToDefaultEnumOp}, true
		case ExclaimToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceExclaimToDefaultEnumOp}, true
		case TildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeToUnaryTraitOp}, true
		case TildeTildeToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTildeTildeToUnaryTraitOp}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializableTypeExprToAtomTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case AtomTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomTypeExprToReturnableTypeExpr}, true
		case NamedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedTypeExprToAtomTypeExpr}, true
		case InferredTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredTypeExprToAtomTypeExpr}, true
		case ReturnableTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceReturnableTypeExprToTypeExpr}, true
		case RefTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRefTypeExprToReturnableTypeExpr}, true
		case DefaultEnumOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDefaultEnumOpTypeExprToReturnableTypeExpr}, true
		case UnaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnaryTraitOpTypeExprToReturnableTypeExpr}, true
		case BinaryTraitOpTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryTraitOpTypeExprToTypeExpr}, true
		case ImplicitStructTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructTypeExprToAtomTypeExpr}, true
		case ImplicitEnumTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitEnumTypeExprToAtomTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncSignatureType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncSignatureToAtomTypeExpr}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExplicitToGenericArgumentList}, true
		}
	case _State242:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case RparenToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToAsExpr}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true
		}
	case _State243:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInferredAssignToBlockAddrDeclItem}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	case _State244:
		switch symbolId {
		case AssignToken:
			return _Action{_ShiftAction, _State254, 0}, true
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceDeclToBlockAddrDeclItem}, true
		}
	case _State245:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case NewAddressableType:
			return _Action{_ShiftAction, _State224, 0}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case BlockAddrDeclItemType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddExplicitToProperBlockAddrDeclList}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToNewAddressable}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToNewAddressable}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExplicitToBlockAddrDeclList}, true
		}
	case _State246:
		switch symbolId {
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case NewAddressableType:
			return _Action{_ShiftAction, _State224, 0}, true
		case IdentifierToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIdentifierToNamedExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case BlockAddrDeclItemType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddImplicitToProperBlockAddrDeclList}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToNewAddressable}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToNewAddressable}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperImplicitToBlockAddrDeclList}, true
		}
	case _State247:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceConstrainedToGenericParameter}, true
		}
	case _State248:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State226, 0}, true
		case GenericParameterType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToProperGenericParameterList}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceImproperExplicitToGenericParameterList}, true
		}
	case _State249:
		switch symbolId {
		case CommaToken:
			return _Action{_ShiftAction, _State239, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceCompoundNamedToDirective}, true
		}
	case _State250:
		switch symbolId {
		case AndToken:
			return _Action{_ShiftAction, _State237, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceOrToDirectiveExpr}, true
		}
	case _State251:
		switch symbolId {
		case OrToken:
			return _Action{_ShiftAction, _State238, 0}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceAddToProperDirectiveExprs}, true
		}
	case _State252:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceConstrainedDefToTypeDef}, true
		}
	case _State253:
		switch symbolId {
		case BinaryTraitOpType:
			return _Action{_ShiftAction, _State144, 0}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToBinaryTraitOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToBinaryTraitOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToBinaryTraitOp}, true

		default:
			return _Action{_ReduceAction, 0, _ReduceAddToProperGenericArgumentList}, true
		}
	case _State254:
		switch symbolId {
		case IdentifierToken:
			return _Action{_ShiftAction, _State15, 0}, true
		case IfToken:
			return _Action{_ShiftAction, _State16, 0}, true
		case SwitchToken:
			return _Action{_ShiftAction, _State24, 0}, true
		case ForToken:
			return _Action{_ShiftAction, _State12, 0}, true
		case DoToken:
			return _Action{_ShiftAction, _State11, 0}, true
		case SelectToken:
			return _Action{_ShiftAction, _State23, 0}, true
		case FuncToken:
			return _Action{_ShiftAction, _State13, 0}, true
		case MakeToken:
			return _Action{_ShiftAction, _State21, 0}, true
		case LbraceToken:
			return _Action{_ShiftAction, _State18, 0}, true
		case LparenToken:
			return _Action{_ShiftAction, _State20, 0}, true
		case LbracketToken:
			return _Action{_ShiftAction, _State19, 0}, true
		case ArrowToken:
			return _Action{_ShiftAction, _State8, 0}, true
		case GreaterToken:
			return _Action{_ShiftAction, _State14, 0}, true
		case VarTypeType:
			return _Action{_ShiftAction, _State53, 0}, true
		case AccessibleExprType:
			return _Action{_ShiftAction, _State27, 0}, true
		case MakeExprSizeType:
			return _Action{_ShiftAction, _State39, 0}, true
		case MakeExprHeadType:
			return _Action{_ShiftAction, _State38, 0}, true
		case PrefixUnaryOpType:
			return _Action{_ShiftAction, _State42, 0}, true
		case MulExprType:
			return _Action{_ShiftAction, _State40, 0}, true
		case AddExprType:
			return _Action{_ShiftAction, _State28, 0}, true
		case CmpExprType:
			return _Action{_ShiftAction, _State30, 0}, true
		case AndExprType:
			return _Action{_ShiftAction, _State29, 0}, true
		case OrExprType:
			return _Action{_ShiftAction, _State41, 0}, true
		case SendRecvExprType:
			return _Action{_ShiftAction, _State46, 0}, true
		case IfElifExprType:
			return _Action{_ShiftAction, _State33, 0}, true
		case LoopBodyType:
			return _Action{_ShiftAction, _State37, 0}, true
		case InitializableTypeExprType:
			return _Action{_ShiftAction, _State35, 0}, true
		case PropertiesKindType:
			return _Action{_ShiftAction, _State44, 0}, true
		case FuncSignatureType:
			return _Action{_ShiftAction, _State32, 0}, true
		case IntegerLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIntegerLiteralToLiteralExpr}, true
		case FloatLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFloatLiteralToLiteralExpr}, true
		case RuneLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRuneLiteralToLiteralExpr}, true
		case StringLiteralToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStringLiteralToLiteralExpr}, true
		case UnderscoreToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnderscoreToNamedExpr}, true
		case TrueToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTrueToLiteralExpr}, true
		case FalseToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFalseToLiteralExpr}, true
		case StructToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStructToPropertiesKind}, true
		case EnumToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceEnumToPropertiesKind}, true
		case TraitToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTraitToPropertiesKind}, true
		case AsyncToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsyncToPrefixUnaryOp}, true
		case DeferToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceDeferToPrefixUnaryOp}, true
		case VarToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVarToVarType}, true
		case LetToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLetToVarType}, true
		case NotToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNotToPrefixUnaryOp}, true
		case AddToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddToPrefixUnaryOp}, true
		case SubToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSubToPrefixUnaryOp}, true
		case MulToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMulToPrefixUnaryOp}, true
		case BitAndToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitAndToPrefixUnaryOp}, true
		case BitXorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBitXorToPrefixUnaryOp}, true
		case ParseErrorToken:
			return _Action{_ShiftAndReduceAction, 0, _ReduceToParseErrorExpr}, true
		case AddrDeclPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAddrDeclPatternToExpr}, true
		case AssignToAddrPatternType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignToAddrPatternToExpr}, true
		case AtomExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAtomExprToAccessibleExpr}, true
		case ParseErrorExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParseErrorExprToAtomExpr}, true
		case LiteralExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLiteralExprToAtomExpr}, true
		case NamedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceNamedExprToAtomExpr}, true
		case InitializeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceInitializeExprToAtomExpr}, true
		case ImplicitStructExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceImplicitStructExprToAtomExpr}, true
		case AccessExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAccessExprToAccessibleExpr}, true
		case IndexExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIndexExprToAccessibleExpr}, true
		case AsExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAsExprToAccessibleExpr}, true
		case ParameterizedExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceParameterizedExprToAccessibleExpr}, true
		case CallExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceCallExprToAccessibleExpr}, true
		case MakeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMakeExprToAccessibleExpr}, true
		case PostfixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixableExprToPrefixableExpr}, true
		case PostfixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePostfixUnaryExprToPostfixableExpr}, true
		case PrefixableExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixableExprToMulExpr}, true
		case PrefixUnaryExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePrefixUnaryExprToPrefixableExpr}, true
		case BinaryMulExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryMulExprToMulExpr}, true
		case BinaryAddExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAddExprToAddExpr}, true
		case BinaryCmpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryCmpExprToCmpExpr}, true
		case BinaryAndExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAndExprToAndExpr}, true
		case BinaryOrExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryOrExprToOrExpr}, true
		case SendExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSendExprToSendRecvExpr}, true
		case RecvExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceRecvExprToSendRecvExpr}, true
		case AssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceAssignOpExprToExpr}, true
		case BinaryAssignOpExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceBinaryAssignOpExprToAssignOpExpr}, true
		case UnlabelledControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceUnlabelledControlFlowExprToControlFlowExpr}, true
		case ControlFlowExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceControlFlowExprToExpr}, true
		case ExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceTypedAssignToBlockAddrDeclItem}, true
		case StatementsType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceStatementsToUnlabelledControlFlowExpr}, true
		case IfElseExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfElseExprToUnlabelledControlFlowExpr}, true
		case IfOnlyExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceIfOnlyExprToIfElifExpr}, true
		case SwitchExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSwitchExprBodyToUnlabelledControlFlowExpr}, true
		case SelectExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSelectExprBodyToUnlabelledControlFlowExpr}, true
		case LoopExprBodyType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceLoopExprBodyToUnlabelledControlFlowExpr}, true
		case VariableSizedTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceVariableSizedTypeExprToInitializableTypeExpr}, true
		case SliceTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceSliceTypeExprToVariableSizedTypeExpr}, true
		case ArrayTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceArrayTypeExprToInitializableTypeExpr}, true
		case MapTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceMapTypeExprToVariableSizedTypeExpr}, true
		case PropertiesTypeExprType:
			return _Action{_ShiftAndReduceAction, 0, _ReducePropertiesTypeExprToInitializableTypeExpr}, true
		case FuncDefType:
			return _Action{_ShiftAndReduceAction, 0, _ReduceFuncDefToAtomExpr}, true
		}
	}

	return _Action{}, false
}

var _ActionTable = _ActionTableType{}

/*
Parser Debug States:
  State 1:
    Kernel Items:
      #accept: ^.source
    Reduce:
      * -> [statement_list]
    ShiftAndReduce:
      COMMENT_GROUPS -> [floating_comment]
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      RETURN -> [jump_op]
      BREAK -> [jump_op]
      CONTINUE -> [jump_op]
      FALLTHROUGH -> [jump_stmt]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      directives_declaration -> [statement]
      statement -> [proper_statement_list]
      floating_comment -> [statement]
      branch_stmt -> [statement]
      unsafe_stmt -> [statement]
      jump_stmt -> [statement]
      assign_stmt -> [statement]
      import_stmt -> [statement]
      block_addr_decl_stmt -> [statement]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      statement_list -> [source]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      type_def -> [statement]
      alias_def -> [statement]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 9
      DEFAULT -> State 10
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      IMPORT -> State 17
      UNSAFE -> State 26
      TYPE -> State 25
      ALIAS -> State 7
      FUNC -> State 13
      MAKE -> State 21
      POUND -> State 22
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      source -> State 4
      jump_op -> State 36
      var_type -> State 47
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      proper_statement_list -> State 43
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 45
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 2:
    Kernel Items:
      #accept: ^.statement
    Reduce:
      (nil)
    ShiftAndReduce:
      COMMENT_GROUPS -> [floating_comment]
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      RETURN -> [jump_op]
      BREAK -> [jump_op]
      CONTINUE -> [jump_op]
      FALLTHROUGH -> [jump_stmt]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      directives_declaration -> [statement]
      floating_comment -> [statement]
      branch_stmt -> [statement]
      unsafe_stmt -> [statement]
      jump_stmt -> [statement]
      assign_stmt -> [statement]
      import_stmt -> [statement]
      block_addr_decl_stmt -> [statement]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      type_def -> [statement]
      alias_def -> [statement]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 9
      DEFAULT -> State 10
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      IMPORT -> State 17
      UNSAFE -> State 26
      TYPE -> State 25
      ALIAS -> State 7
      FUNC -> State 13
      MAKE -> State 21
      POUND -> State 22
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      statement -> State 5
      jump_op -> State 36
      var_type -> State 47
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 45
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 3:
    Kernel Items:
      #accept: ^.statements
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LBRACE -> State 18
      statements -> State 6

  State 4:
    Kernel Items:
      #accept: ^ source., $
    Reduce:
      $ -> [#accept]
    ShiftAndReduce:
      (nil)
    Goto:
      (nil)

  State 5:
    Kernel Items:
      #accept: ^ statement., $
    Reduce:
      $ -> [#accept]
    ShiftAndReduce:
      (nil)
    Goto:
      (nil)

  State 6:
    Kernel Items:
      #accept: ^ statements., $
    Reduce:
      $ -> [#accept]
    ShiftAndReduce:
      (nil)
    Goto:
      (nil)

  State 7:
    Kernel Items:
      alias_def: ALIAS.IDENTIFIER generic_parameters type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      IDENTIFIER -> State 48

  State 8:
    Kernel Items:
      recv_expr: ARROW.or_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 49
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 9:
    Kernel Items:
      branch_stmt: CASE.case_patterns COLON optional_statement
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      assign_selectable_pattern -> [case_patterns]
      switchable_case_pattern -> [switchable_case_patterns]
      enum_pattern -> [switchable_case_pattern]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [switchable_case_pattern]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      DOT -> State 50
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      case_patterns -> State 51
      switchable_case_patterns -> State 52
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 10:
    Kernel Items:
      branch_stmt: DEFAULT.COLON optional_statement
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      COLON -> State 54

  State 11:
    Kernel Items:
      loop_body: DO.statements
    Reduce:
      (nil)
    ShiftAndReduce:
      statements -> [loop_body]
    Goto:
      LBRACE -> State 18

  State 12:
    Kernel Items:
      loop_expr_body: FOR.expr loop_body
      loop_expr_body: FOR.returnable_expr IN expr loop_body
      loop_expr_body: FOR.expr SEMICOLON returnable_expr loop_body
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 55
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 56
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 13:
    Kernel Items:
      func_signature: FUNC.parameters return_type
      func_signature: FUNC.IDENTIFIER generic_parameters parameters return_type
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      IDENTIFIER -> State 57
      LPAREN -> State 58
      parameters -> State 59

  State 14:
    Kernel Items:
      assign_to_addr_pattern: GREATER.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [assign_to_addr_pattern]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 15:
    Kernel Items:
      named_expr: IDENTIFIER., *
      control_flow_expr: IDENTIFIER.AT unlabelled_control_flow_expr
    Reduce:
      * -> [named_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      AT -> State 60

  State 16:
    Kernel Items:
      if_only_expr: IF.condition statements
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [condition]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      case_pattern_expr -> [condition]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 61
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      condition -> State 62
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 17:
    Kernel Items:
      import_stmt: IMPORT.import_clause
      import_stmt: IMPORT.LPAREN import_clauses RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      STRING_LITERAL -> [import_clause]
      import_clause -> [import_stmt]
    Goto:
      IDENTIFIER -> State 64
      UNDERSCORE -> State 66
      LPAREN -> State 65
      DOT -> State 63

  State 18:
    Kernel Items:
      statements: LBRACE.statement_list RBRACE
    Reduce:
      * -> [statement_list]
    ShiftAndReduce:
      COMMENT_GROUPS -> [floating_comment]
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      RETURN -> [jump_op]
      BREAK -> [jump_op]
      CONTINUE -> [jump_op]
      FALLTHROUGH -> [jump_stmt]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      directives_declaration -> [statement]
      statement -> [proper_statement_list]
      floating_comment -> [statement]
      branch_stmt -> [statement]
      unsafe_stmt -> [statement]
      jump_stmt -> [statement]
      assign_stmt -> [statement]
      import_stmt -> [statement]
      block_addr_decl_stmt -> [statement]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      type_def -> [statement]
      alias_def -> [statement]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 9
      DEFAULT -> State 10
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      IMPORT -> State 17
      UNSAFE -> State 26
      TYPE -> State 25
      ALIAS -> State 7
      FUNC -> State 13
      MAKE -> State 21
      POUND -> State 22
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      jump_op -> State 36
      var_type -> State 47
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      proper_statement_list -> State 43
      statement_list -> State 67
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 45
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 19:
    Kernel Items:
      slice_type_expr: LBRACKET.type_expr RBRACKET
      array_type_expr: LBRACKET.type_expr COMMA INTEGER_LITERAL RBRACKET
      map_type_expr: LBRACKET.type_expr COLON type_expr RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 72
      properties_kind -> State 44

  State 20:
    Kernel Items:
      implicit_struct_expr: LPAREN.arguments RPAREN
    Reduce:
      * -> [arguments]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ELLIPSIS -> [argument]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      argument -> [proper_arguments]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 75
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      COLON -> State 74
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      proper_arguments -> State 79
      arguments -> State 76
      colon_expr -> State 77
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 78
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 21:
    Kernel Items:
      make_expr_head: MAKE.LPAREN variable_sized_type_expr COMMA
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LPAREN -> State 80

  State 22:
    Kernel Items:
      directives_declaration: POUND.LBRACKET directives RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LBRACKET -> State 81

  State 23:
    Kernel Items:
      select_expr_body: SELECT.statements
    Reduce:
      (nil)
    ShiftAndReduce:
      statements -> [select_expr_body]
    Goto:
      LBRACE -> State 18

  State 24:
    Kernel Items:
      switch_expr_body: SWITCH.expr statements
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 82
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 25:
    Kernel Items:
      type_def: TYPE.IDENTIFIER generic_parameters type_expr
      type_def: TYPE.IDENTIFIER generic_parameters type_expr IMPLEMENTS type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      IDENTIFIER -> State 83

  State 26:
    Kernel Items:
      unsafe_stmt: UNSAFE.LESS IDENTIFIER GREATER STRING_LITERAL
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LESS -> State 84

  State 27:
    Kernel Items:
      access_expr: accessible_expr.DOT IDENTIFIER
      index_expr: accessible_expr.LBRACKET index RBRACKET
      as_expr: accessible_expr.DOT AS LPAREN type_expr RPAREN
      parameterized_expr: accessible_expr.generic_arguments
      call_expr: accessible_expr.LPAREN arguments RPAREN
      postfixable_expr: accessible_expr., *
      postfix_unary_expr: accessible_expr.postfix_unary_op
    Reduce:
      * -> [postfixable_expr]
    ShiftAndReduce:
      QUESTION -> [postfix_unary_op]
      EXCLAIM -> [postfix_unary_op]
      ADD_ONE_ASSIGN -> [postfix_unary_op]
      SUB_ONE_ASSIGN -> [postfix_unary_op]
      postfix_unary_op -> [postfix_unary_expr]
      generic_arguments -> [parameterized_expr]
    Goto:
      LPAREN -> State 88
      LBRACKET -> State 87
      DOT -> State 86
      DOLLAR -> State 85

  State 28:
    Kernel Items:
      binary_add_expr: add_expr.add_op mul_expr
      cmp_expr: add_expr., *
    Reduce:
      * -> [cmp_expr]
    ShiftAndReduce:
      ADD -> [add_op]
      SUB -> [add_op]
      BIT_XOR -> [add_op]
      BIT_OR -> [add_op]
    Goto:
      add_op -> State 89

  State 29:
    Kernel Items:
      binary_and_expr: and_expr.AND cmp_expr
      or_expr: and_expr., *
    Reduce:
      * -> [or_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      AND -> State 90

  State 30:
    Kernel Items:
      binary_cmp_expr: cmp_expr.cmp_op add_expr
      and_expr: cmp_expr., *
    Reduce:
      * -> [and_expr]
    ShiftAndReduce:
      EQUAL -> [cmp_op]
      NOT_EQUAL -> [cmp_op]
      LESS -> [cmp_op]
      LESS_OR_EQUAL -> [cmp_op]
      GREATER -> [cmp_op]
      GREATER_OR_EQUAL -> [cmp_op]
    Goto:
      cmp_op -> State 91

  State 31:
    Kernel Items:
      returnable_expr: expr., *
      improper_expr_struct: expr.COMMA expr
    Reduce:
      * -> [returnable_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      COMMA -> State 92

  State 32:
    Kernel Items:
      func_def: func_signature.statements
    Reduce:
      (nil)
    ShiftAndReduce:
      statements -> [func_def]
    Goto:
      LBRACE -> State 18

  State 33:
    Kernel Items:
      if_else_expr: if_elif_expr., *
      if_else_expr: if_elif_expr.ELSE statements
      if_elif_expr: if_elif_expr.ELSE IF condition statements
    Reduce:
      * -> [if_else_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      ELSE -> State 93

  State 34:
    Kernel Items:
      returnable_expr: improper_expr_struct., *
      improper_expr_struct: improper_expr_struct.COMMA expr
    Reduce:
      * -> [returnable_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      COMMA -> State 94

  State 35:
    Kernel Items:
      initialize_expr: initializable_type_expr.LPAREN arguments RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LPAREN -> State 95

  State 36:
    Kernel Items:
      jump_stmt: jump_op., *
      jump_stmt: jump_op.returnable_expr
      jump_stmt: jump_op.AT IDENTIFIER
      jump_stmt: jump_op.AT IDENTIFIER returnable_expr
    Reduce:
      * -> [jump_stmt]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      returnable_expr -> [jump_stmt]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      AT -> State 96
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 37:
    Kernel Items:
      loop_expr_body: loop_body., *
      loop_expr_body: loop_body.FOR expr
    Reduce:
      * -> [loop_expr_body]
    ShiftAndReduce:
      (nil)
    Goto:
      FOR -> State 97

  State 38:
    Kernel Items:
      make_expr_size: make_expr_head.expr
      make_expr_size: make_expr_head.expr COLON expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 98
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 39:
    Kernel Items:
      make_expr: make_expr_size.RPAREN
      make_expr: make_expr_size.COMMA RPAREN
      make_expr: make_expr_size.COMMA expr RPAREN
      make_expr: make_expr_size.COMMA expr COMMA RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [make_expr]
    Goto:
      COMMA -> State 99

  State 40:
    Kernel Items:
      binary_mul_expr: mul_expr.mul_op prefixable_expr
      add_expr: mul_expr., *
    Reduce:
      * -> [add_expr]
    ShiftAndReduce:
      MUL -> [mul_op]
      DIV -> [mul_op]
      MOD -> [mul_op]
      BIT_AND -> [mul_op]
      BIT_LSHIFT -> [mul_op]
      BIT_RSHIFT -> [mul_op]
    Goto:
      mul_op -> State 100

  State 41:
    Kernel Items:
      binary_or_expr: or_expr.OR and_expr
      send_recv_expr: or_expr., *
    Reduce:
      * -> [send_recv_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      OR -> State 101

  State 42:
    Kernel Items:
      prefix_unary_expr: prefix_unary_op.prefixable_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [prefix_unary_expr]
      prefix_unary_expr -> [prefixable_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 43:
    Kernel Items:
      proper_statement_list: proper_statement_list.NEWLINES statement
      proper_statement_list: proper_statement_list.SEMICOLON statement
      statement_list: proper_statement_list., *
      statement_list: proper_statement_list.NEWLINES
      statement_list: proper_statement_list.SEMICOLON
    Reduce:
      * -> [statement_list]
    ShiftAndReduce:
      (nil)
    Goto:
      NEWLINES -> State 102
      SEMICOLON -> State 103

  State 44:
    Kernel Items:
      properties_type_expr: properties_kind.LPAREN explicit_type_properties RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LPAREN -> State 104

  State 45:
    Kernel Items:
      statement: returnable_expr., *
      assign_stmt: returnable_expr.ASSIGN returnable_expr
    Reduce:
      * -> [statement]
    ShiftAndReduce:
      (nil)
    Goto:
      ASSIGN -> State 105

  State 46:
    Kernel Items:
      send_expr: send_recv_expr.ARROW or_expr
      assign_op_expr: send_recv_expr., *
      binary_assign_op_expr: send_recv_expr.binary_assign_op send_recv_expr
    Reduce:
      * -> [assign_op_expr]
    ShiftAndReduce:
      ADD_ASSIGN -> [binary_assign_op]
      SUB_ASSIGN -> [binary_assign_op]
      MUL_ASSIGN -> [binary_assign_op]
      DIV_ASSIGN -> [binary_assign_op]
      MOD_ASSIGN -> [binary_assign_op]
      BIT_AND_ASSIGN -> [binary_assign_op]
      BIT_OR_ASSIGN -> [binary_assign_op]
      BIT_XOR_ASSIGN -> [binary_assign_op]
      BIT_LSHIFT_ASSIGN -> [binary_assign_op]
      BIT_RSHIFT_ASSIGN -> [binary_assign_op]
    Goto:
      ARROW -> State 106
      binary_assign_op -> State 107

  State 47:
    Kernel Items:
      block_addr_decl_stmt: var_type.DOLLAR LPAREN block_addr_decl_list RPAREN
      addr_decl_pattern: var_type.new_addressable
      addr_decl_pattern: var_type.new_addressable type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      named_expr -> [new_addressable]
      implicit_struct_expr -> [new_addressable]
    Goto:
      LPAREN -> State 20
      DOLLAR -> State 108
      new_addressable -> State 109

  State 48:
    Kernel Items:
      alias_def: ALIAS IDENTIFIER.generic_parameters type_expr
    Reduce:
      * -> [generic_parameters]
    ShiftAndReduce:
      (nil)
    Goto:
      DOLLAR -> State 110
      generic_parameters -> State 111

  State 49:
    Kernel Items:
      binary_or_expr: or_expr.OR and_expr
      recv_expr: ARROW or_expr., *
    Reduce:
      * -> [recv_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      OR -> State 101

  State 50:
    Kernel Items:
      enum_pattern: DOT.UNDERSCORE implicit_struct_expr
      enum_pattern: DOT.IDENTIFIER implicit_struct_expr
      enum_pattern: DOT.UNDERSCORE
      enum_pattern: DOT.IDENTIFIER
      enum_pattern: DOT.implicit_struct_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      implicit_struct_expr -> [enum_pattern]
    Goto:
      IDENTIFIER -> State 112
      UNDERSCORE -> State 113
      LPAREN -> State 20

  State 51:
    Kernel Items:
      branch_stmt: CASE case_patterns.COLON optional_statement
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      COLON -> State 114

  State 52:
    Kernel Items:
      case_patterns: switchable_case_patterns., *
      assign_selectable_pattern: switchable_case_patterns.ASSIGN expr
      switchable_case_patterns: switchable_case_patterns.COMMA switchable_case_pattern
    Reduce:
      * -> [case_patterns]
    ShiftAndReduce:
      (nil)
    Goto:
      COMMA -> State 116
      ASSIGN -> State 115

  State 53:
    Kernel Items:
      addr_decl_pattern: var_type.new_addressable
      addr_decl_pattern: var_type.new_addressable type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      named_expr -> [new_addressable]
      implicit_struct_expr -> [new_addressable]
    Goto:
      LPAREN -> State 20
      new_addressable -> State 109

  State 54:
    Kernel Items:
      branch_stmt: DEFAULT COLON.optional_statement
    Reduce:
      * -> [optional_statement]
    ShiftAndReduce:
      COMMENT_GROUPS -> [floating_comment]
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      RETURN -> [jump_op]
      BREAK -> [jump_op]
      CONTINUE -> [jump_op]
      FALLTHROUGH -> [jump_stmt]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      directives_declaration -> [statement]
      statement -> [optional_statement]
      floating_comment -> [statement]
      branch_stmt -> [statement]
      optional_statement -> [branch_stmt]
      unsafe_stmt -> [statement]
      jump_stmt -> [statement]
      assign_stmt -> [statement]
      import_stmt -> [statement]
      block_addr_decl_stmt -> [statement]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      type_def -> [statement]
      alias_def -> [statement]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 9
      DEFAULT -> State 10
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      IMPORT -> State 17
      UNSAFE -> State 26
      TYPE -> State 25
      ALIAS -> State 7
      FUNC -> State 13
      MAKE -> State 21
      POUND -> State 22
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      jump_op -> State 36
      var_type -> State 47
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 45
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 55:
    Kernel Items:
      loop_expr_body: FOR expr.loop_body
      loop_expr_body: FOR expr.SEMICOLON returnable_expr loop_body
      returnable_expr: expr., *
      improper_expr_struct: expr.COMMA expr
    Reduce:
      * -> [returnable_expr]
    ShiftAndReduce:
      loop_body -> [loop_expr_body]
    Goto:
      DO -> State 11
      COMMA -> State 92
      SEMICOLON -> State 117

  State 56:
    Kernel Items:
      loop_expr_body: FOR returnable_expr.IN expr loop_body
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      IN -> State 118

  State 57:
    Kernel Items:
      func_signature: FUNC IDENTIFIER.generic_parameters parameters return_type
    Reduce:
      * -> [generic_parameters]
    ShiftAndReduce:
      (nil)
    Goto:
      DOLLAR -> State 110
      generic_parameters -> State 119

  State 58:
    Kernel Items:
      parameters: LPAREN.parameter_list RPAREN
    Reduce:
      * -> [parameter_list]
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      parameter -> [proper_parameter_list]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 122
      UNDERSCORE -> State 123
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      ELLIPSIS -> State 120
      BIT_AND -> State 68
      GREATER -> State 121
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 126
      properties_kind -> State 44
      proper_parameter_list -> State 125
      parameter_list -> State 124

  State 59:
    Kernel Items:
      func_signature: FUNC parameters.return_type
    Reduce:
      * -> [return_type]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [return_type]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      return_type -> [func_signature]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      properties_kind -> State 44

  State 60:
    Kernel Items:
      control_flow_expr: IDENTIFIER AT.unlabelled_control_flow_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      unlabelled_control_flow_expr -> [control_flow_expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
    Goto:
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      LBRACE -> State 18
      if_elif_expr -> State 33
      loop_body -> State 37

  State 61:
    Kernel Items:
      case_pattern_expr: CASE.switchable_case_patterns ASSIGN expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      switchable_case_pattern -> [switchable_case_patterns]
      enum_pattern -> [switchable_case_pattern]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [switchable_case_pattern]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      DOT -> State 50
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      switchable_case_patterns -> State 127
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 62:
    Kernel Items:
      if_only_expr: IF condition.statements
    Reduce:
      (nil)
    ShiftAndReduce:
      statements -> [if_only_expr]
    Goto:
      LBRACE -> State 18

  State 63:
    Kernel Items:
      import_clause: DOT.STRING_LITERAL
    Reduce:
      (nil)
    ShiftAndReduce:
      STRING_LITERAL -> [import_clause]
    Goto:
      (nil)

  State 64:
    Kernel Items:
      import_clause: IDENTIFIER.STRING_LITERAL
    Reduce:
      (nil)
    ShiftAndReduce:
      STRING_LITERAL -> [import_clause]
    Goto:
      (nil)

  State 65:
    Kernel Items:
      import_stmt: IMPORT LPAREN.import_clauses RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      STRING_LITERAL -> [import_clause]
      import_clause -> [proper_import_clauses]
    Goto:
      IDENTIFIER -> State 64
      UNDERSCORE -> State 66
      DOT -> State 63
      proper_import_clauses -> State 129
      import_clauses -> State 128

  State 66:
    Kernel Items:
      import_clause: UNDERSCORE.STRING_LITERAL
    Reduce:
      (nil)
    ShiftAndReduce:
      STRING_LITERAL -> [import_clause]
    Goto:
      (nil)

  State 67:
    Kernel Items:
      statements: LBRACE statement_list.RBRACE
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACE -> [statements]
    Goto:
      (nil)

  State 68:
    Kernel Items:
      ref_type_expr: BIT_AND.returnable_type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [ref_type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      properties_kind -> State 44

  State 69:
    Kernel Items:
      named_type_expr: IDENTIFIER.optional_generic_arguments
      named_type_expr: IDENTIFIER.DOT IDENTIFIER optional_generic_arguments
    Reduce:
      * -> [optional_generic_arguments]
    ShiftAndReduce:
      generic_arguments -> [optional_generic_arguments]
      optional_generic_arguments -> [named_type_expr]
    Goto:
      DOT -> State 130
      DOLLAR -> State 85

  State 70:
    Kernel Items:
      implicit_struct_type_expr: LPAREN.implicit_type_properties RPAREN
      implicit_enum_type_expr: LPAREN.implicit_enum_type_properties RPAREN
    Reduce:
      * -> [implicit_type_properties]
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      VAR -> [var_type]
      LET -> [var_type]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [type_property]
    Goto:
      IDENTIFIER -> State 132
      UNDERSCORE -> State 133
      DEFAULT -> State 131
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      var_type -> State 141
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 139
      type_property -> State 140
      proper_implicit_type_properties -> State 138
      implicit_type_properties -> State 136
      proper_implicit_enum_type_properties -> State 137
      implicit_enum_type_properties -> State 135
      properties_kind -> State 44
      func_signature -> State 134

  State 71:
    Kernel Items:
      default_enum_op_type_expr: default_enum_op.returnable_type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [default_enum_op_type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      properties_kind -> State 44

  State 72:
    Kernel Items:
      slice_type_expr: LBRACKET type_expr.RBRACKET
      array_type_expr: LBRACKET type_expr.COMMA INTEGER_LITERAL RBRACKET
      map_type_expr: LBRACKET type_expr.COLON type_expr RBRACKET
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACKET -> [slice_type_expr]
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      COMMA -> State 143
      COLON -> State 142
      binary_trait_op -> State 144

  State 73:
    Kernel Items:
      unary_trait_op_type_expr: unary_trait_op.returnable_type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [unary_trait_op_type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      properties_kind -> State 44

  State 74:
    Kernel Items:
      colon_expr: COLON., *
      colon_expr: COLON.expr
    Reduce:
      * -> [colon_expr]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [colon_expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 75:
    Kernel Items:
      named_expr: IDENTIFIER., *
      argument: IDENTIFIER.ASSIGN expr
      control_flow_expr: IDENTIFIER.AT unlabelled_control_flow_expr
    Reduce:
      * -> [named_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      AT -> State 60
      ASSIGN -> State 145

  State 76:
    Kernel Items:
      implicit_struct_expr: LPAREN arguments.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [implicit_struct_expr]
    Goto:
      (nil)

  State 77:
    Kernel Items:
      argument: colon_expr., *
      colon_expr: colon_expr.COLON
      colon_expr: colon_expr.COLON expr
    Reduce:
      * -> [argument]
    ShiftAndReduce:
      (nil)
    Goto:
      COLON -> State 146

  State 78:
    Kernel Items:
      argument: expr., *
      argument: expr.ELLIPSIS
      colon_expr: expr.COLON
      colon_expr: expr.COLON expr
    Reduce:
      * -> [argument]
    ShiftAndReduce:
      ELLIPSIS -> [argument]
    Goto:
      COLON -> State 147

  State 79:
    Kernel Items:
      proper_arguments: proper_arguments.COMMA argument
      arguments: proper_arguments., *
      arguments: proper_arguments.NEWLINES
      arguments: proper_arguments.COMMA
    Reduce:
      * -> [arguments]
    ShiftAndReduce:
      NEWLINES -> [arguments]
    Goto:
      COMMA -> State 148

  State 80:
    Kernel Items:
      make_expr_head: MAKE LPAREN.variable_sized_type_expr COMMA
    Reduce:
      (nil)
    ShiftAndReduce:
      slice_type_expr -> [variable_sized_type_expr]
      map_type_expr -> [variable_sized_type_expr]
    Goto:
      LBRACKET -> State 149
      variable_sized_type_expr -> State 150

  State 81:
    Kernel Items:
      directives_declaration: POUND LBRACKET.directives RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      directive -> [directives]
    Goto:
      IDENTIFIER -> State 151
      directives -> State 152

  State 82:
    Kernel Items:
      switch_expr_body: SWITCH expr.statements
    Reduce:
      (nil)
    ShiftAndReduce:
      statements -> [switch_expr_body]
    Goto:
      LBRACE -> State 18

  State 83:
    Kernel Items:
      type_def: TYPE IDENTIFIER.generic_parameters type_expr
      type_def: TYPE IDENTIFIER.generic_parameters type_expr IMPLEMENTS type_expr
    Reduce:
      * -> [generic_parameters]
    ShiftAndReduce:
      (nil)
    Goto:
      DOLLAR -> State 110
      generic_parameters -> State 153

  State 84:
    Kernel Items:
      unsafe_stmt: UNSAFE LESS.IDENTIFIER GREATER STRING_LITERAL
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      IDENTIFIER -> State 154

  State 85:
    Kernel Items:
      generic_arguments: DOLLAR.LBRACKET generic_argument_list RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LBRACKET -> State 155

  State 86:
    Kernel Items:
      access_expr: accessible_expr DOT.IDENTIFIER
      as_expr: accessible_expr DOT.AS LPAREN type_expr RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      IDENTIFIER -> [access_expr]
    Goto:
      AS -> State 156

  State 87:
    Kernel Items:
      index_expr: accessible_expr LBRACKET.index RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      COLON -> State 74
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      index -> State 159
      make_expr_size -> State 39
      make_expr_head -> State 38
      colon_expr -> State 157
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 158
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 88:
    Kernel Items:
      call_expr: accessible_expr LPAREN.arguments RPAREN
    Reduce:
      * -> [arguments]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ELLIPSIS -> [argument]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      argument -> [proper_arguments]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 75
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      COLON -> State 74
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      proper_arguments -> State 79
      arguments -> State 160
      colon_expr -> State 77
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 78
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 89:
    Kernel Items:
      binary_add_expr: add_expr add_op.mul_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 161
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 90:
    Kernel Items:
      binary_and_expr: and_expr AND.cmp_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 162
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 91:
    Kernel Items:
      binary_cmp_expr: cmp_expr cmp_op.add_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 163
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 92:
    Kernel Items:
      improper_expr_struct: expr COMMA.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [improper_expr_struct]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 93:
    Kernel Items:
      if_else_expr: if_elif_expr ELSE.statements
      if_elif_expr: if_elif_expr ELSE.IF condition statements
    Reduce:
      (nil)
    ShiftAndReduce:
      statements -> [if_else_expr]
    Goto:
      IF -> State 164
      LBRACE -> State 18

  State 94:
    Kernel Items:
      improper_expr_struct: improper_expr_struct COMMA.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [improper_expr_struct]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 95:
    Kernel Items:
      initialize_expr: initializable_type_expr LPAREN.arguments RPAREN
    Reduce:
      * -> [arguments]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ELLIPSIS -> [argument]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      argument -> [proper_arguments]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 75
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      COLON -> State 74
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      proper_arguments -> State 79
      arguments -> State 165
      colon_expr -> State 77
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 78
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 96:
    Kernel Items:
      jump_stmt: jump_op AT.IDENTIFIER
      jump_stmt: jump_op AT.IDENTIFIER returnable_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      IDENTIFIER -> State 166

  State 97:
    Kernel Items:
      loop_expr_body: loop_body FOR.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [loop_expr_body]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 98:
    Kernel Items:
      make_expr_size: make_expr_head expr., *
      make_expr_size: make_expr_head expr.COLON expr
    Reduce:
      * -> [make_expr_size]
    ShiftAndReduce:
      (nil)
    Goto:
      COLON -> State 167

  State 99:
    Kernel Items:
      make_expr: make_expr_size COMMA.RPAREN
      make_expr: make_expr_size COMMA.expr RPAREN
      make_expr: make_expr_size COMMA.expr COMMA RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      RPAREN -> [make_expr]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 168
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 100:
    Kernel Items:
      binary_mul_expr: mul_expr mul_op.prefixable_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [binary_mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 101:
    Kernel Items:
      binary_or_expr: or_expr OR.and_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 169
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 102:
    Kernel Items:
      proper_statement_list: proper_statement_list NEWLINES.statement
      statement_list: proper_statement_list NEWLINES., *
    Reduce:
      * -> [statement_list]
    ShiftAndReduce:
      COMMENT_GROUPS -> [floating_comment]
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      RETURN -> [jump_op]
      BREAK -> [jump_op]
      CONTINUE -> [jump_op]
      FALLTHROUGH -> [jump_stmt]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      directives_declaration -> [statement]
      statement -> [proper_statement_list]
      floating_comment -> [statement]
      branch_stmt -> [statement]
      unsafe_stmt -> [statement]
      jump_stmt -> [statement]
      assign_stmt -> [statement]
      import_stmt -> [statement]
      block_addr_decl_stmt -> [statement]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      type_def -> [statement]
      alias_def -> [statement]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 9
      DEFAULT -> State 10
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      IMPORT -> State 17
      UNSAFE -> State 26
      TYPE -> State 25
      ALIAS -> State 7
      FUNC -> State 13
      MAKE -> State 21
      POUND -> State 22
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      jump_op -> State 36
      var_type -> State 47
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 45
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 103:
    Kernel Items:
      proper_statement_list: proper_statement_list SEMICOLON.statement
      statement_list: proper_statement_list SEMICOLON., *
    Reduce:
      * -> [statement_list]
    ShiftAndReduce:
      COMMENT_GROUPS -> [floating_comment]
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      RETURN -> [jump_op]
      BREAK -> [jump_op]
      CONTINUE -> [jump_op]
      FALLTHROUGH -> [jump_stmt]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      directives_declaration -> [statement]
      statement -> [proper_statement_list]
      floating_comment -> [statement]
      branch_stmt -> [statement]
      unsafe_stmt -> [statement]
      jump_stmt -> [statement]
      assign_stmt -> [statement]
      import_stmt -> [statement]
      block_addr_decl_stmt -> [statement]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      type_def -> [statement]
      alias_def -> [statement]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 9
      DEFAULT -> State 10
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      IMPORT -> State 17
      UNSAFE -> State 26
      TYPE -> State 25
      ALIAS -> State 7
      FUNC -> State 13
      MAKE -> State 21
      POUND -> State 22
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      jump_op -> State 36
      var_type -> State 47
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 45
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 104:
    Kernel Items:
      properties_type_expr: properties_kind LPAREN.explicit_type_properties RPAREN
    Reduce:
      * -> [explicit_type_properties]
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      VAR -> [var_type]
      LET -> [var_type]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      type_property -> [proper_explicit_type_properties]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [type_property]
    Goto:
      IDENTIFIER -> State 132
      UNDERSCORE -> State 133
      DEFAULT -> State 131
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      var_type -> State 141
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 139
      proper_explicit_type_properties -> State 171
      explicit_type_properties -> State 170
      properties_kind -> State 44
      func_signature -> State 134

  State 105:
    Kernel Items:
      assign_stmt: returnable_expr ASSIGN.returnable_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      returnable_expr -> [assign_stmt]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 106:
    Kernel Items:
      send_expr: send_recv_expr ARROW.or_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 172
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 107:
    Kernel Items:
      binary_assign_op_expr: send_recv_expr binary_assign_op.send_recv_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      FUNC -> State 13
      MAKE -> State 21
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 173
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 108:
    Kernel Items:
      block_addr_decl_stmt: var_type DOLLAR.LPAREN block_addr_decl_list RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LPAREN -> State 174

  State 109:
    Kernel Items:
      addr_decl_pattern: var_type new_addressable., *
      addr_decl_pattern: var_type new_addressable.type_expr
    Reduce:
      * -> [addr_decl_pattern]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 175
      properties_kind -> State 44

  State 110:
    Kernel Items:
      generic_parameters: DOLLAR.LBRACKET generic_parameter_list RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LBRACKET -> State 176

  State 111:
    Kernel Items:
      alias_def: ALIAS IDENTIFIER generic_parameters.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 177
      properties_kind -> State 44

  State 112:
    Kernel Items:
      enum_pattern: DOT IDENTIFIER.implicit_struct_expr
      enum_pattern: DOT IDENTIFIER., *
    Reduce:
      * -> [enum_pattern]
    ShiftAndReduce:
      implicit_struct_expr -> [enum_pattern]
    Goto:
      LPAREN -> State 20

  State 113:
    Kernel Items:
      enum_pattern: DOT UNDERSCORE.implicit_struct_expr
      enum_pattern: DOT UNDERSCORE., *
    Reduce:
      * -> [enum_pattern]
    ShiftAndReduce:
      implicit_struct_expr -> [enum_pattern]
    Goto:
      LPAREN -> State 20

  State 114:
    Kernel Items:
      branch_stmt: CASE case_patterns COLON.optional_statement
    Reduce:
      * -> [optional_statement]
    ShiftAndReduce:
      COMMENT_GROUPS -> [floating_comment]
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      RETURN -> [jump_op]
      BREAK -> [jump_op]
      CONTINUE -> [jump_op]
      FALLTHROUGH -> [jump_stmt]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      directives_declaration -> [statement]
      statement -> [optional_statement]
      floating_comment -> [statement]
      branch_stmt -> [statement]
      optional_statement -> [branch_stmt]
      unsafe_stmt -> [statement]
      jump_stmt -> [statement]
      assign_stmt -> [statement]
      import_stmt -> [statement]
      block_addr_decl_stmt -> [statement]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      type_def -> [statement]
      alias_def -> [statement]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 9
      DEFAULT -> State 10
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      IMPORT -> State 17
      UNSAFE -> State 26
      TYPE -> State 25
      ALIAS -> State 7
      FUNC -> State 13
      MAKE -> State 21
      POUND -> State 22
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      jump_op -> State 36
      var_type -> State 47
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 45
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 115:
    Kernel Items:
      assign_selectable_pattern: switchable_case_patterns ASSIGN.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [assign_selectable_pattern]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 116:
    Kernel Items:
      switchable_case_patterns: switchable_case_patterns COMMA.switchable_case_pattern
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      switchable_case_pattern -> [switchable_case_patterns]
      enum_pattern -> [switchable_case_pattern]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [switchable_case_pattern]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      DOT -> State 50
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 117:
    Kernel Items:
      loop_expr_body: FOR expr SEMICOLON.returnable_expr loop_body
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      returnable_expr -> State 178
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 118:
    Kernel Items:
      loop_expr_body: FOR returnable_expr IN.expr loop_body
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 179
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 119:
    Kernel Items:
      func_signature: FUNC IDENTIFIER generic_parameters.parameters return_type
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LPAREN -> State 58
      parameters -> State 180

  State 120:
    Kernel Items:
      parameter: ELLIPSIS.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 181
      properties_kind -> State 44

  State 121:
    Kernel Items:
      parameter: GREATER.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 182
      properties_kind -> State 44

  State 122:
    Kernel Items:
      named_type_expr: IDENTIFIER.optional_generic_arguments
      named_type_expr: IDENTIFIER.DOT IDENTIFIER optional_generic_arguments
      parameter: IDENTIFIER.type_expr
      parameter: IDENTIFIER.GREATER type_expr
      parameter: IDENTIFIER.ELLIPSIS type_expr
    Reduce:
      * -> [optional_generic_arguments]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      generic_arguments -> [optional_generic_arguments]
      optional_generic_arguments -> [named_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      DOT -> State 130
      DOLLAR -> State 85
      ELLIPSIS -> State 183
      BIT_AND -> State 68
      GREATER -> State 184
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 185
      properties_kind -> State 44

  State 123:
    Kernel Items:
      inferred_type_expr: UNDERSCORE., *
      parameter: UNDERSCORE.type_expr
      parameter: UNDERSCORE.GREATER type_expr
      parameter: UNDERSCORE.ELLIPSIS type_expr
    Reduce:
      * -> [inferred_type_expr]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      ELLIPSIS -> State 186
      BIT_AND -> State 68
      GREATER -> State 187
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 188
      properties_kind -> State 44

  State 124:
    Kernel Items:
      parameters: LPAREN parameter_list.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [parameters]
    Goto:
      (nil)

  State 125:
    Kernel Items:
      proper_parameter_list: proper_parameter_list.COMMA parameter
      parameter_list: proper_parameter_list., *
      parameter_list: proper_parameter_list.NEWLINES
      parameter_list: proper_parameter_list.COMMA
    Reduce:
      * -> [parameter_list]
    ShiftAndReduce:
      NEWLINES -> [parameter_list]
    Goto:
      COMMA -> State 189

  State 126:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 127:
    Kernel Items:
      switchable_case_patterns: switchable_case_patterns.COMMA switchable_case_pattern
      case_pattern_expr: CASE switchable_case_patterns.ASSIGN expr
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      COMMA -> State 116
      ASSIGN -> State 190

  State 128:
    Kernel Items:
      import_stmt: IMPORT LPAREN import_clauses.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [import_stmt]
    Goto:
      (nil)

  State 129:
    Kernel Items:
      proper_import_clauses: proper_import_clauses.NEWLINES import_clause
      proper_import_clauses: proper_import_clauses.COMMA import_clause
      import_clauses: proper_import_clauses., *
      import_clauses: proper_import_clauses.NEWLINES
      import_clauses: proper_import_clauses.COMMA
    Reduce:
      * -> [import_clauses]
    ShiftAndReduce:
      (nil)
    Goto:
      NEWLINES -> State 192
      COMMA -> State 191

  State 130:
    Kernel Items:
      named_type_expr: IDENTIFIER DOT.IDENTIFIER optional_generic_arguments
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      IDENTIFIER -> State 193

  State 131:
    Kernel Items:
      type_property: DEFAULT.IDENTIFIER type_expr
      type_property: DEFAULT.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 194
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 195
      properties_kind -> State 44

  State 132:
    Kernel Items:
      named_type_expr: IDENTIFIER.optional_generic_arguments
      named_type_expr: IDENTIFIER.DOT IDENTIFIER optional_generic_arguments
      type_property: IDENTIFIER.type_expr
    Reduce:
      * -> [optional_generic_arguments]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      generic_arguments -> [optional_generic_arguments]
      optional_generic_arguments -> [named_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      DOT -> State 130
      DOLLAR -> State 85
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 196
      properties_kind -> State 44

  State 133:
    Kernel Items:
      inferred_type_expr: UNDERSCORE., *
      type_property: UNDERSCORE.type_expr
    Reduce:
      * -> [inferred_type_expr]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 197
      properties_kind -> State 44

  State 134:
    Kernel Items:
      atom_type_expr: func_signature., *
      func_def: func_signature.statements
    Reduce:
      * -> [atom_type_expr]
    ShiftAndReduce:
      statements -> [func_def]
    Goto:
      LBRACE -> State 18

  State 135:
    Kernel Items:
      implicit_enum_type_expr: LPAREN implicit_enum_type_properties.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [implicit_enum_type_expr]
    Goto:
      (nil)

  State 136:
    Kernel Items:
      implicit_struct_type_expr: LPAREN implicit_type_properties.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [implicit_struct_type_expr]
    Goto:
      (nil)

  State 137:
    Kernel Items:
      proper_implicit_enum_type_properties: proper_implicit_enum_type_properties.OR type_property
      implicit_enum_type_properties: proper_implicit_enum_type_properties., *
      implicit_enum_type_properties: proper_implicit_enum_type_properties.NEWLINES
    Reduce:
      * -> [implicit_enum_type_properties]
    ShiftAndReduce:
      NEWLINES -> [implicit_enum_type_properties]
    Goto:
      OR -> State 198

  State 138:
    Kernel Items:
      proper_implicit_type_properties: proper_implicit_type_properties.COMMA type_property
      implicit_type_properties: proper_implicit_type_properties., *
      implicit_type_properties: proper_implicit_type_properties.NEWLINES
      implicit_type_properties: proper_implicit_type_properties.COMMA
    Reduce:
      * -> [implicit_type_properties]
    ShiftAndReduce:
      NEWLINES -> [implicit_type_properties]
    Goto:
      COMMA -> State 199

  State 139:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_property: type_expr., *
    Reduce:
      * -> [type_property]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 140:
    Kernel Items:
      proper_implicit_type_properties: type_property., *
      proper_implicit_enum_type_properties: type_property.OR type_property
    Reduce:
      * -> [proper_implicit_type_properties]
    ShiftAndReduce:
      (nil)
    Goto:
      OR -> State 200

  State 141:
    Kernel Items:
      type_property: var_type.type_expr
      type_property: var_type.IDENTIFIER type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 201
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 202
      properties_kind -> State 44

  State 142:
    Kernel Items:
      map_type_expr: LBRACKET type_expr COLON.type_expr RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 203
      properties_kind -> State 44

  State 143:
    Kernel Items:
      array_type_expr: LBRACKET type_expr COMMA.INTEGER_LITERAL RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      INTEGER_LITERAL -> State 204

  State 144:
    Kernel Items:
      binary_trait_op_type_expr: type_expr binary_trait_op.returnable_type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [binary_trait_op_type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      properties_kind -> State 44

  State 145:
    Kernel Items:
      argument: IDENTIFIER ASSIGN.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [argument]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 146:
    Kernel Items:
      colon_expr: colon_expr COLON., *
      colon_expr: colon_expr COLON.expr
    Reduce:
      * -> [colon_expr]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [colon_expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 147:
    Kernel Items:
      colon_expr: expr COLON., *
      colon_expr: expr COLON.expr
    Reduce:
      * -> [colon_expr]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [colon_expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 148:
    Kernel Items:
      proper_arguments: proper_arguments COMMA.argument
      arguments: proper_arguments COMMA., *
    Reduce:
      * -> [arguments]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ELLIPSIS -> [argument]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      argument -> [proper_arguments]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 75
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      COLON -> State 74
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      colon_expr -> State 77
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 78
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 149:
    Kernel Items:
      slice_type_expr: LBRACKET.type_expr RBRACKET
      map_type_expr: LBRACKET.type_expr COLON type_expr RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 205
      properties_kind -> State 44

  State 150:
    Kernel Items:
      make_expr_head: MAKE LPAREN variable_sized_type_expr.COMMA
    Reduce:
      (nil)
    ShiftAndReduce:
      COMMA -> [make_expr_head]
    Goto:
      (nil)

  State 151:
    Kernel Items:
      directive: IDENTIFIER.directive_exprs
      directive: IDENTIFIER.COLON IDENTIFIER directive_exprs
    Reduce:
      * -> [directive_exprs]
    ShiftAndReduce:
      INTEGER_LITERAL -> [directive_value]
      FLOAT_LITERAL -> [directive_value]
      RUNE_LITERAL -> [directive_value]
      STRING_LITERAL -> [directive_value]
      IDENTIFIER -> [directive_value]
      UNDERSCORE -> [directive_value]
      TRUE -> [directive_value]
      FALSE -> [directive_value]
      proper_directive_exprs -> [directive_exprs]
      directive_not_expr -> [directive_and_expr]
      directive_atom_expr -> [directive_not_expr]
      directive_value_expr -> [directive_atom_expr]
      directive_value -> [directive_value_expr]
    Goto:
      NOT -> State 208
      LPAREN -> State 207
      COLON -> State 206
      directive_exprs -> State 211
      directive_expr -> State 210
      directive_and_expr -> State 209

  State 152:
    Kernel Items:
      directives_declaration: POUND LBRACKET directives.RBRACKET
      directives: directives.SEMICOLON directive
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACKET -> [directives_declaration]
    Goto:
      SEMICOLON -> State 212

  State 153:
    Kernel Items:
      type_def: TYPE IDENTIFIER generic_parameters.type_expr
      type_def: TYPE IDENTIFIER generic_parameters.type_expr IMPLEMENTS type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 213
      properties_kind -> State 44

  State 154:
    Kernel Items:
      unsafe_stmt: UNSAFE LESS IDENTIFIER.GREATER STRING_LITERAL
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      GREATER -> State 214

  State 155:
    Kernel Items:
      generic_arguments: DOLLAR LBRACKET.generic_argument_list RBRACKET
    Reduce:
      * -> [generic_argument_list]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 217
      proper_generic_argument_list -> State 216
      generic_argument_list -> State 215
      properties_kind -> State 44

  State 156:
    Kernel Items:
      as_expr: accessible_expr DOT AS.LPAREN type_expr RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      LPAREN -> State 218

  State 157:
    Kernel Items:
      index: colon_expr., *
      colon_expr: colon_expr.COLON
      colon_expr: colon_expr.COLON expr
    Reduce:
      * -> [index]
    ShiftAndReduce:
      (nil)
    Goto:
      COLON -> State 146

  State 158:
    Kernel Items:
      index: expr., *
      colon_expr: expr.COLON
      colon_expr: expr.COLON expr
    Reduce:
      * -> [index]
    ShiftAndReduce:
      (nil)
    Goto:
      COLON -> State 147

  State 159:
    Kernel Items:
      index_expr: accessible_expr LBRACKET index.RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACKET -> [index_expr]
    Goto:
      (nil)

  State 160:
    Kernel Items:
      call_expr: accessible_expr LPAREN arguments.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [call_expr]
    Goto:
      (nil)

  State 161:
    Kernel Items:
      binary_mul_expr: mul_expr.mul_op prefixable_expr
      binary_add_expr: add_expr add_op mul_expr., *
    Reduce:
      * -> [binary_add_expr]
    ShiftAndReduce:
      MUL -> [mul_op]
      DIV -> [mul_op]
      MOD -> [mul_op]
      BIT_AND -> [mul_op]
      BIT_LSHIFT -> [mul_op]
      BIT_RSHIFT -> [mul_op]
    Goto:
      mul_op -> State 100

  State 162:
    Kernel Items:
      binary_cmp_expr: cmp_expr.cmp_op add_expr
      binary_and_expr: and_expr AND cmp_expr., *
    Reduce:
      * -> [binary_and_expr]
    ShiftAndReduce:
      EQUAL -> [cmp_op]
      NOT_EQUAL -> [cmp_op]
      LESS -> [cmp_op]
      LESS_OR_EQUAL -> [cmp_op]
      GREATER -> [cmp_op]
      GREATER_OR_EQUAL -> [cmp_op]
    Goto:
      cmp_op -> State 91

  State 163:
    Kernel Items:
      binary_add_expr: add_expr.add_op mul_expr
      binary_cmp_expr: cmp_expr cmp_op add_expr., *
    Reduce:
      * -> [binary_cmp_expr]
    ShiftAndReduce:
      ADD -> [add_op]
      SUB -> [add_op]
      BIT_XOR -> [add_op]
      BIT_OR -> [add_op]
    Goto:
      add_op -> State 89

  State 164:
    Kernel Items:
      if_elif_expr: if_elif_expr ELSE IF.condition statements
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [condition]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      case_pattern_expr -> [condition]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      CASE -> State 61
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      condition -> State 219
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 165:
    Kernel Items:
      initialize_expr: initializable_type_expr LPAREN arguments.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [initialize_expr]
    Goto:
      (nil)

  State 166:
    Kernel Items:
      jump_stmt: jump_op AT IDENTIFIER., *
      jump_stmt: jump_op AT IDENTIFIER.returnable_expr
    Reduce:
      * -> [jump_stmt]
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      returnable_expr -> [jump_stmt]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      expr -> State 31
      if_elif_expr -> State 33
      loop_body -> State 37
      improper_expr_struct -> State 34
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 167:
    Kernel Items:
      make_expr_size: make_expr_head expr COLON.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [make_expr_size]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 168:
    Kernel Items:
      make_expr: make_expr_size COMMA expr.RPAREN
      make_expr: make_expr_size COMMA expr.COMMA RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [make_expr]
    Goto:
      COMMA -> State 220

  State 169:
    Kernel Items:
      binary_and_expr: and_expr.AND cmp_expr
      binary_or_expr: or_expr OR and_expr., *
    Reduce:
      * -> [binary_or_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      AND -> State 90

  State 170:
    Kernel Items:
      properties_type_expr: properties_kind LPAREN explicit_type_properties.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [properties_type_expr]
    Goto:
      (nil)

  State 171:
    Kernel Items:
      proper_explicit_type_properties: proper_explicit_type_properties.NEWLINES type_property
      proper_explicit_type_properties: proper_explicit_type_properties.COMMA type_property
      explicit_type_properties: proper_explicit_type_properties., *
      explicit_type_properties: proper_explicit_type_properties.NEWLINES
      explicit_type_properties: proper_explicit_type_properties.COMMA
    Reduce:
      * -> [explicit_type_properties]
    ShiftAndReduce:
      (nil)
    Goto:
      NEWLINES -> State 222
      COMMA -> State 221

  State 172:
    Kernel Items:
      binary_or_expr: or_expr.OR and_expr
      send_expr: send_recv_expr ARROW or_expr., *
    Reduce:
      * -> [send_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      OR -> State 101

  State 173:
    Kernel Items:
      send_expr: send_recv_expr.ARROW or_expr
      binary_assign_op_expr: send_recv_expr binary_assign_op send_recv_expr., *
    Reduce:
      * -> [binary_assign_op_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      ARROW -> State 106

  State 174:
    Kernel Items:
      block_addr_decl_stmt: var_type DOLLAR LPAREN.block_addr_decl_list RPAREN
    Reduce:
      * -> [block_addr_decl_list]
    ShiftAndReduce:
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      block_addr_decl_item -> [proper_block_addr_decl_list]
      named_expr -> [new_addressable]
      implicit_struct_expr -> [new_addressable]
    Goto:
      LPAREN -> State 20
      block_addr_decl_list -> State 223
      proper_block_addr_decl_list -> State 225
      new_addressable -> State 224

  State 175:
    Kernel Items:
      addr_decl_pattern: var_type new_addressable type_expr., *
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
    Reduce:
      * -> [addr_decl_pattern]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 176:
    Kernel Items:
      generic_parameters: DOLLAR LBRACKET.generic_parameter_list RBRACKET
    Reduce:
      * -> [generic_parameter_list]
    ShiftAndReduce:
      generic_parameter -> [proper_generic_parameter_list]
    Goto:
      IDENTIFIER -> State 226
      proper_generic_parameter_list -> State 228
      generic_parameter_list -> State 227

  State 177:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      alias_def: ALIAS IDENTIFIER generic_parameters type_expr., *
    Reduce:
      * -> [alias_def]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 178:
    Kernel Items:
      loop_expr_body: FOR expr SEMICOLON returnable_expr.loop_body
    Reduce:
      (nil)
    ShiftAndReduce:
      loop_body -> [loop_expr_body]
    Goto:
      DO -> State 11

  State 179:
    Kernel Items:
      loop_expr_body: FOR returnable_expr IN expr.loop_body
    Reduce:
      (nil)
    ShiftAndReduce:
      loop_body -> [loop_expr_body]
    Goto:
      DO -> State 11

  State 180:
    Kernel Items:
      func_signature: FUNC IDENTIFIER generic_parameters parameters.return_type
    Reduce:
      * -> [return_type]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [return_type]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      return_type -> [func_signature]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      properties_kind -> State 44

  State 181:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: ELLIPSIS type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 182:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: GREATER type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 183:
    Kernel Items:
      parameter: IDENTIFIER ELLIPSIS.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 229
      properties_kind -> State 44

  State 184:
    Kernel Items:
      parameter: IDENTIFIER GREATER.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 230
      properties_kind -> State 44

  State 185:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: IDENTIFIER type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 186:
    Kernel Items:
      parameter: UNDERSCORE ELLIPSIS.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 231
      properties_kind -> State 44

  State 187:
    Kernel Items:
      parameter: UNDERSCORE GREATER.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 232
      properties_kind -> State 44

  State 188:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: UNDERSCORE type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 189:
    Kernel Items:
      proper_parameter_list: proper_parameter_list COMMA.parameter
      parameter_list: proper_parameter_list COMMA., *
    Reduce:
      * -> [parameter_list]
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      parameter -> [proper_parameter_list]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 122
      UNDERSCORE -> State 123
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      ELLIPSIS -> State 120
      BIT_AND -> State 68
      GREATER -> State 121
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 126
      properties_kind -> State 44

  State 190:
    Kernel Items:
      case_pattern_expr: CASE switchable_case_patterns ASSIGN.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [case_pattern_expr]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 191:
    Kernel Items:
      proper_import_clauses: proper_import_clauses COMMA.import_clause
      import_clauses: proper_import_clauses COMMA., *
    Reduce:
      * -> [import_clauses]
    ShiftAndReduce:
      STRING_LITERAL -> [import_clause]
      import_clause -> [proper_import_clauses]
    Goto:
      IDENTIFIER -> State 64
      UNDERSCORE -> State 66
      DOT -> State 63

  State 192:
    Kernel Items:
      proper_import_clauses: proper_import_clauses NEWLINES.import_clause
      import_clauses: proper_import_clauses NEWLINES., *
    Reduce:
      * -> [import_clauses]
    ShiftAndReduce:
      STRING_LITERAL -> [import_clause]
      import_clause -> [proper_import_clauses]
    Goto:
      IDENTIFIER -> State 64
      UNDERSCORE -> State 66
      DOT -> State 63

  State 193:
    Kernel Items:
      named_type_expr: IDENTIFIER DOT IDENTIFIER.optional_generic_arguments
    Reduce:
      * -> [optional_generic_arguments]
    ShiftAndReduce:
      generic_arguments -> [optional_generic_arguments]
      optional_generic_arguments -> [named_type_expr]
    Goto:
      DOLLAR -> State 85

  State 194:
    Kernel Items:
      named_type_expr: IDENTIFIER.optional_generic_arguments
      named_type_expr: IDENTIFIER.DOT IDENTIFIER optional_generic_arguments
      type_property: DEFAULT IDENTIFIER.type_expr
    Reduce:
      * -> [optional_generic_arguments]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      generic_arguments -> [optional_generic_arguments]
      optional_generic_arguments -> [named_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      DOT -> State 130
      DOLLAR -> State 85
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 233
      properties_kind -> State 44

  State 195:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_property: DEFAULT type_expr., *
    Reduce:
      * -> [type_property]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 196:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_property: IDENTIFIER type_expr., *
    Reduce:
      * -> [type_property]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 197:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_property: UNDERSCORE type_expr., *
    Reduce:
      * -> [type_property]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 198:
    Kernel Items:
      proper_implicit_enum_type_properties: proper_implicit_enum_type_properties OR.type_property
    Reduce:
      (nil)
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      VAR -> [var_type]
      LET -> [var_type]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      type_property -> [proper_implicit_enum_type_properties]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [type_property]
    Goto:
      IDENTIFIER -> State 132
      UNDERSCORE -> State 133
      DEFAULT -> State 131
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      var_type -> State 141
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 139
      properties_kind -> State 44
      func_signature -> State 134

  State 199:
    Kernel Items:
      proper_implicit_type_properties: proper_implicit_type_properties COMMA.type_property
      implicit_type_properties: proper_implicit_type_properties COMMA., *
    Reduce:
      * -> [implicit_type_properties]
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      VAR -> [var_type]
      LET -> [var_type]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      type_property -> [proper_implicit_type_properties]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [type_property]
    Goto:
      IDENTIFIER -> State 132
      UNDERSCORE -> State 133
      DEFAULT -> State 131
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      var_type -> State 141
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 139
      properties_kind -> State 44
      func_signature -> State 134

  State 200:
    Kernel Items:
      proper_implicit_enum_type_properties: type_property OR.type_property
    Reduce:
      (nil)
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      VAR -> [var_type]
      LET -> [var_type]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      type_property -> [proper_implicit_enum_type_properties]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [type_property]
    Goto:
      IDENTIFIER -> State 132
      UNDERSCORE -> State 133
      DEFAULT -> State 131
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      var_type -> State 141
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 139
      properties_kind -> State 44
      func_signature -> State 134

  State 201:
    Kernel Items:
      named_type_expr: IDENTIFIER.optional_generic_arguments
      named_type_expr: IDENTIFIER.DOT IDENTIFIER optional_generic_arguments
      type_property: var_type IDENTIFIER.type_expr
    Reduce:
      * -> [optional_generic_arguments]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      generic_arguments -> [optional_generic_arguments]
      optional_generic_arguments -> [named_type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      DOT -> State 130
      DOLLAR -> State 85
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 234
      properties_kind -> State 44

  State 202:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_property: var_type type_expr., *
    Reduce:
      * -> [type_property]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 203:
    Kernel Items:
      map_type_expr: LBRACKET type_expr COLON type_expr.RBRACKET
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACKET -> [map_type_expr]
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 204:
    Kernel Items:
      array_type_expr: LBRACKET type_expr COMMA INTEGER_LITERAL.RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACKET -> [array_type_expr]
    Goto:
      (nil)

  State 205:
    Kernel Items:
      slice_type_expr: LBRACKET type_expr.RBRACKET
      map_type_expr: LBRACKET type_expr.COLON type_expr RBRACKET
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACKET -> [slice_type_expr]
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      COLON -> State 142
      binary_trait_op -> State 144

  State 206:
    Kernel Items:
      directive: IDENTIFIER COLON.IDENTIFIER directive_exprs
    Reduce:
      (nil)
    ShiftAndReduce:
      (nil)
    Goto:
      IDENTIFIER -> State 235

  State 207:
    Kernel Items:
      directive_atom_expr: LPAREN.directive_expr RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [directive_value]
      FLOAT_LITERAL -> [directive_value]
      RUNE_LITERAL -> [directive_value]
      STRING_LITERAL -> [directive_value]
      IDENTIFIER -> [directive_value]
      UNDERSCORE -> [directive_value]
      TRUE -> [directive_value]
      FALSE -> [directive_value]
      directive_not_expr -> [directive_and_expr]
      directive_atom_expr -> [directive_not_expr]
      directive_value_expr -> [directive_atom_expr]
      directive_value -> [directive_value_expr]
    Goto:
      NOT -> State 208
      LPAREN -> State 207
      directive_expr -> State 236
      directive_and_expr -> State 209

  State 208:
    Kernel Items:
      directive_not_expr: NOT.directive_atom_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [directive_value]
      FLOAT_LITERAL -> [directive_value]
      RUNE_LITERAL -> [directive_value]
      STRING_LITERAL -> [directive_value]
      IDENTIFIER -> [directive_value]
      UNDERSCORE -> [directive_value]
      TRUE -> [directive_value]
      FALSE -> [directive_value]
      directive_atom_expr -> [directive_not_expr]
      directive_value_expr -> [directive_atom_expr]
      directive_value -> [directive_value_expr]
    Goto:
      LPAREN -> State 207

  State 209:
    Kernel Items:
      directive_expr: directive_and_expr., *
      directive_and_expr: directive_and_expr.AND directive_not_expr
    Reduce:
      * -> [directive_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      AND -> State 237

  State 210:
    Kernel Items:
      proper_directive_exprs: directive_expr., *
      directive_expr: directive_expr.OR directive_and_expr
    Reduce:
      * -> [proper_directive_exprs]
    ShiftAndReduce:
      (nil)
    Goto:
      OR -> State 238

  State 211:
    Kernel Items:
      directive: IDENTIFIER directive_exprs., *
      proper_directive_exprs: directive_exprs.COMMA directive_expr
    Reduce:
      * -> [directive]
    ShiftAndReduce:
      (nil)
    Goto:
      COMMA -> State 239

  State 212:
    Kernel Items:
      directives: directives SEMICOLON.directive
    Reduce:
      (nil)
    ShiftAndReduce:
      directive -> [directives]
    Goto:
      IDENTIFIER -> State 151

  State 213:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_def: TYPE IDENTIFIER generic_parameters type_expr., *
      type_def: TYPE IDENTIFIER generic_parameters type_expr.IMPLEMENTS type_expr
    Reduce:
      * -> [type_def]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      IMPLEMENTS -> State 240
      binary_trait_op -> State 144

  State 214:
    Kernel Items:
      unsafe_stmt: UNSAFE LESS IDENTIFIER GREATER.STRING_LITERAL
    Reduce:
      (nil)
    ShiftAndReduce:
      STRING_LITERAL -> [unsafe_stmt]
    Goto:
      (nil)

  State 215:
    Kernel Items:
      generic_arguments: DOLLAR LBRACKET generic_argument_list.RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACKET -> [generic_arguments]
    Goto:
      (nil)

  State 216:
    Kernel Items:
      proper_generic_argument_list: proper_generic_argument_list.COMMA type_expr
      generic_argument_list: proper_generic_argument_list., *
      generic_argument_list: proper_generic_argument_list.NEWLINES
      generic_argument_list: proper_generic_argument_list.COMMA
    Reduce:
      * -> [generic_argument_list]
    ShiftAndReduce:
      NEWLINES -> [generic_argument_list]
    Goto:
      COMMA -> State 241

  State 217:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      proper_generic_argument_list: type_expr., *
    Reduce:
      * -> [proper_generic_argument_list]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 218:
    Kernel Items:
      as_expr: accessible_expr DOT AS LPAREN.type_expr RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 242
      properties_kind -> State 44

  State 219:
    Kernel Items:
      if_elif_expr: if_elif_expr ELSE IF condition.statements
    Reduce:
      (nil)
    ShiftAndReduce:
      statements -> [if_elif_expr]
    Goto:
      LBRACE -> State 18

  State 220:
    Kernel Items:
      make_expr: make_expr_size COMMA expr COMMA.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [make_expr]
    Goto:
      (nil)

  State 221:
    Kernel Items:
      proper_explicit_type_properties: proper_explicit_type_properties COMMA.type_property
      explicit_type_properties: proper_explicit_type_properties COMMA., *
    Reduce:
      * -> [explicit_type_properties]
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      VAR -> [var_type]
      LET -> [var_type]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      type_property -> [proper_explicit_type_properties]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [type_property]
    Goto:
      IDENTIFIER -> State 132
      UNDERSCORE -> State 133
      DEFAULT -> State 131
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      var_type -> State 141
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 139
      properties_kind -> State 44
      func_signature -> State 134

  State 222:
    Kernel Items:
      proper_explicit_type_properties: proper_explicit_type_properties NEWLINES.type_property
      explicit_type_properties: proper_explicit_type_properties NEWLINES., *
    Reduce:
      * -> [explicit_type_properties]
    ShiftAndReduce:
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      VAR -> [var_type]
      LET -> [var_type]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      type_property -> [proper_explicit_type_properties]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [type_property]
    Goto:
      IDENTIFIER -> State 132
      UNDERSCORE -> State 133
      DEFAULT -> State 131
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      var_type -> State 141
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 139
      properties_kind -> State 44
      func_signature -> State 134

  State 223:
    Kernel Items:
      block_addr_decl_stmt: var_type DOLLAR LPAREN block_addr_decl_list.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [block_addr_decl_stmt]
    Goto:
      (nil)

  State 224:
    Kernel Items:
      block_addr_decl_item: new_addressable.type_expr
      block_addr_decl_item: new_addressable.ASSIGN expr
      block_addr_decl_item: new_addressable.type_expr ASSIGN expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      ASSIGN -> State 243
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 244
      properties_kind -> State 44

  State 225:
    Kernel Items:
      block_addr_decl_list: proper_block_addr_decl_list., *
      block_addr_decl_list: proper_block_addr_decl_list.NEWLINES
      block_addr_decl_list: proper_block_addr_decl_list.COMMA
      proper_block_addr_decl_list: proper_block_addr_decl_list.NEWLINES block_addr_decl_item
      proper_block_addr_decl_list: proper_block_addr_decl_list.COMMA block_addr_decl_item
    Reduce:
      * -> [block_addr_decl_list]
    ShiftAndReduce:
      (nil)
    Goto:
      NEWLINES -> State 246
      COMMA -> State 245

  State 226:
    Kernel Items:
      generic_parameter: IDENTIFIER., *
      generic_parameter: IDENTIFIER.type_expr
    Reduce:
      * -> [generic_parameter]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 247
      properties_kind -> State 44

  State 227:
    Kernel Items:
      generic_parameters: DOLLAR LBRACKET generic_parameter_list.RBRACKET
    Reduce:
      (nil)
    ShiftAndReduce:
      RBRACKET -> [generic_parameters]
    Goto:
      (nil)

  State 228:
    Kernel Items:
      proper_generic_parameter_list: proper_generic_parameter_list.COMMA generic_parameter
      generic_parameter_list: proper_generic_parameter_list., *
      generic_parameter_list: proper_generic_parameter_list.NEWLINES
      generic_parameter_list: proper_generic_parameter_list.COMMA
    Reduce:
      * -> [generic_parameter_list]
    ShiftAndReduce:
      NEWLINES -> [generic_parameter_list]
    Goto:
      COMMA -> State 248

  State 229:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: IDENTIFIER ELLIPSIS type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 230:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: IDENTIFIER GREATER type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 231:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: UNDERSCORE ELLIPSIS type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 232:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      parameter: UNDERSCORE GREATER type_expr., *
    Reduce:
      * -> [parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 233:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_property: DEFAULT IDENTIFIER type_expr., *
    Reduce:
      * -> [type_property]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 234:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_property: var_type IDENTIFIER type_expr., *
    Reduce:
      * -> [type_property]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 235:
    Kernel Items:
      directive: IDENTIFIER COLON IDENTIFIER.directive_exprs
    Reduce:
      * -> [directive_exprs]
    ShiftAndReduce:
      INTEGER_LITERAL -> [directive_value]
      FLOAT_LITERAL -> [directive_value]
      RUNE_LITERAL -> [directive_value]
      STRING_LITERAL -> [directive_value]
      IDENTIFIER -> [directive_value]
      UNDERSCORE -> [directive_value]
      TRUE -> [directive_value]
      FALSE -> [directive_value]
      proper_directive_exprs -> [directive_exprs]
      directive_not_expr -> [directive_and_expr]
      directive_atom_expr -> [directive_not_expr]
      directive_value_expr -> [directive_atom_expr]
      directive_value -> [directive_value_expr]
    Goto:
      NOT -> State 208
      LPAREN -> State 207
      directive_exprs -> State 249
      directive_expr -> State 210
      directive_and_expr -> State 209

  State 236:
    Kernel Items:
      directive_expr: directive_expr.OR directive_and_expr
      directive_atom_expr: LPAREN directive_expr.RPAREN
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [directive_atom_expr]
    Goto:
      OR -> State 238

  State 237:
    Kernel Items:
      directive_and_expr: directive_and_expr AND.directive_not_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [directive_value]
      FLOAT_LITERAL -> [directive_value]
      RUNE_LITERAL -> [directive_value]
      STRING_LITERAL -> [directive_value]
      IDENTIFIER -> [directive_value]
      UNDERSCORE -> [directive_value]
      TRUE -> [directive_value]
      FALSE -> [directive_value]
      directive_not_expr -> [directive_and_expr]
      directive_atom_expr -> [directive_not_expr]
      directive_value_expr -> [directive_atom_expr]
      directive_value -> [directive_value_expr]
    Goto:
      NOT -> State 208
      LPAREN -> State 207

  State 238:
    Kernel Items:
      directive_expr: directive_expr OR.directive_and_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [directive_value]
      FLOAT_LITERAL -> [directive_value]
      RUNE_LITERAL -> [directive_value]
      STRING_LITERAL -> [directive_value]
      IDENTIFIER -> [directive_value]
      UNDERSCORE -> [directive_value]
      TRUE -> [directive_value]
      FALSE -> [directive_value]
      directive_not_expr -> [directive_and_expr]
      directive_atom_expr -> [directive_not_expr]
      directive_value_expr -> [directive_atom_expr]
      directive_value -> [directive_value_expr]
    Goto:
      NOT -> State 208
      LPAREN -> State 207
      directive_and_expr -> State 250

  State 239:
    Kernel Items:
      proper_directive_exprs: directive_exprs COMMA.directive_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [directive_value]
      FLOAT_LITERAL -> [directive_value]
      RUNE_LITERAL -> [directive_value]
      STRING_LITERAL -> [directive_value]
      IDENTIFIER -> [directive_value]
      UNDERSCORE -> [directive_value]
      TRUE -> [directive_value]
      FALSE -> [directive_value]
      directive_not_expr -> [directive_and_expr]
      directive_atom_expr -> [directive_not_expr]
      directive_value_expr -> [directive_atom_expr]
      directive_value -> [directive_value_expr]
    Goto:
      NOT -> State 208
      LPAREN -> State 207
      directive_expr -> State 251
      directive_and_expr -> State 209

  State 240:
    Kernel Items:
      type_def: TYPE IDENTIFIER generic_parameters type_expr IMPLEMENTS.type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 252
      properties_kind -> State 44

  State 241:
    Kernel Items:
      proper_generic_argument_list: proper_generic_argument_list COMMA.type_expr
      generic_argument_list: proper_generic_argument_list COMMA., *
    Reduce:
      * -> [generic_argument_list]
    ShiftAndReduce:
      UNDERSCORE -> [inferred_type_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      QUESTION -> [default_enum_op]
      EXCLAIM -> [default_enum_op]
      TILDE -> [unary_trait_op]
      TILDE_TILDE -> [unary_trait_op]
      variable_sized_type_expr -> [initializable_type_expr]
      initializable_type_expr -> [atom_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      atom_type_expr -> [returnable_type_expr]
      named_type_expr -> [atom_type_expr]
      inferred_type_expr -> [atom_type_expr]
      returnable_type_expr -> [type_expr]
      ref_type_expr -> [returnable_type_expr]
      default_enum_op_type_expr -> [returnable_type_expr]
      unary_trait_op_type_expr -> [returnable_type_expr]
      binary_trait_op_type_expr -> [type_expr]
      implicit_struct_type_expr -> [atom_type_expr]
      implicit_enum_type_expr -> [atom_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_signature -> [atom_type_expr]
    Goto:
      IDENTIFIER -> State 69
      FUNC -> State 13
      LPAREN -> State 70
      LBRACKET -> State 19
      BIT_AND -> State 68
      default_enum_op -> State 71
      unary_trait_op -> State 73
      type_expr -> State 253
      properties_kind -> State 44

  State 242:
    Kernel Items:
      as_expr: accessible_expr DOT AS LPAREN type_expr.RPAREN
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
    Reduce:
      (nil)
    ShiftAndReduce:
      RPAREN -> [as_expr]
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 243:
    Kernel Items:
      block_addr_decl_item: new_addressable ASSIGN.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [block_addr_decl_item]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

  State 244:
    Kernel Items:
      block_addr_decl_item: new_addressable type_expr., *
      block_addr_decl_item: new_addressable type_expr.ASSIGN expr
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
    Reduce:
      * -> [block_addr_decl_item]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      ASSIGN -> State 254
      binary_trait_op -> State 144

  State 245:
    Kernel Items:
      block_addr_decl_list: proper_block_addr_decl_list COMMA., *
      proper_block_addr_decl_list: proper_block_addr_decl_list COMMA.block_addr_decl_item
    Reduce:
      * -> [block_addr_decl_list]
    ShiftAndReduce:
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      block_addr_decl_item -> [proper_block_addr_decl_list]
      named_expr -> [new_addressable]
      implicit_struct_expr -> [new_addressable]
    Goto:
      LPAREN -> State 20
      new_addressable -> State 224

  State 246:
    Kernel Items:
      block_addr_decl_list: proper_block_addr_decl_list NEWLINES., *
      proper_block_addr_decl_list: proper_block_addr_decl_list NEWLINES.block_addr_decl_item
    Reduce:
      * -> [block_addr_decl_list]
    ShiftAndReduce:
      IDENTIFIER -> [named_expr]
      UNDERSCORE -> [named_expr]
      block_addr_decl_item -> [proper_block_addr_decl_list]
      named_expr -> [new_addressable]
      implicit_struct_expr -> [new_addressable]
    Goto:
      LPAREN -> State 20
      new_addressable -> State 224

  State 247:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      generic_parameter: IDENTIFIER type_expr., *
    Reduce:
      * -> [generic_parameter]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 248:
    Kernel Items:
      proper_generic_parameter_list: proper_generic_parameter_list COMMA.generic_parameter
      generic_parameter_list: proper_generic_parameter_list COMMA., *
    Reduce:
      * -> [generic_parameter_list]
    ShiftAndReduce:
      generic_parameter -> [proper_generic_parameter_list]
    Goto:
      IDENTIFIER -> State 226

  State 249:
    Kernel Items:
      directive: IDENTIFIER COLON IDENTIFIER directive_exprs., *
      proper_directive_exprs: directive_exprs.COMMA directive_expr
    Reduce:
      * -> [directive]
    ShiftAndReduce:
      (nil)
    Goto:
      COMMA -> State 239

  State 250:
    Kernel Items:
      directive_expr: directive_expr OR directive_and_expr., *
      directive_and_expr: directive_and_expr.AND directive_not_expr
    Reduce:
      * -> [directive_expr]
    ShiftAndReduce:
      (nil)
    Goto:
      AND -> State 237

  State 251:
    Kernel Items:
      proper_directive_exprs: directive_exprs COMMA directive_expr., *
      directive_expr: directive_expr.OR directive_and_expr
    Reduce:
      * -> [proper_directive_exprs]
    ShiftAndReduce:
      (nil)
    Goto:
      OR -> State 238

  State 252:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      type_def: TYPE IDENTIFIER generic_parameters type_expr IMPLEMENTS type_expr., *
    Reduce:
      * -> [type_def]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 253:
    Kernel Items:
      binary_trait_op_type_expr: type_expr.binary_trait_op returnable_type_expr
      proper_generic_argument_list: proper_generic_argument_list COMMA type_expr., *
    Reduce:
      * -> [proper_generic_argument_list]
    ShiftAndReduce:
      ADD -> [binary_trait_op]
      SUB -> [binary_trait_op]
      MUL -> [binary_trait_op]
    Goto:
      binary_trait_op -> State 144

  State 254:
    Kernel Items:
      block_addr_decl_item: new_addressable type_expr ASSIGN.expr
    Reduce:
      (nil)
    ShiftAndReduce:
      INTEGER_LITERAL -> [literal_expr]
      FLOAT_LITERAL -> [literal_expr]
      RUNE_LITERAL -> [literal_expr]
      STRING_LITERAL -> [literal_expr]
      UNDERSCORE -> [named_expr]
      TRUE -> [literal_expr]
      FALSE -> [literal_expr]
      STRUCT -> [properties_kind]
      ENUM -> [properties_kind]
      TRAIT -> [properties_kind]
      ASYNC -> [prefix_unary_op]
      DEFER -> [prefix_unary_op]
      VAR -> [var_type]
      LET -> [var_type]
      NOT -> [prefix_unary_op]
      ADD -> [prefix_unary_op]
      SUB -> [prefix_unary_op]
      MUL -> [prefix_unary_op]
      BIT_AND -> [prefix_unary_op]
      BIT_XOR -> [prefix_unary_op]
      PARSE_ERROR -> [parse_error_expr]
      addr_decl_pattern -> [expr]
      assign_to_addr_pattern -> [expr]
      atom_expr -> [accessible_expr]
      parse_error_expr -> [atom_expr]
      literal_expr -> [atom_expr]
      named_expr -> [atom_expr]
      initialize_expr -> [atom_expr]
      implicit_struct_expr -> [atom_expr]
      access_expr -> [accessible_expr]
      index_expr -> [accessible_expr]
      as_expr -> [accessible_expr]
      parameterized_expr -> [accessible_expr]
      call_expr -> [accessible_expr]
      make_expr -> [accessible_expr]
      postfixable_expr -> [prefixable_expr]
      postfix_unary_expr -> [postfixable_expr]
      prefixable_expr -> [mul_expr]
      prefix_unary_expr -> [prefixable_expr]
      binary_mul_expr -> [mul_expr]
      binary_add_expr -> [add_expr]
      binary_cmp_expr -> [cmp_expr]
      binary_and_expr -> [and_expr]
      binary_or_expr -> [or_expr]
      send_expr -> [send_recv_expr]
      recv_expr -> [send_recv_expr]
      assign_op_expr -> [expr]
      binary_assign_op_expr -> [assign_op_expr]
      unlabelled_control_flow_expr -> [control_flow_expr]
      control_flow_expr -> [expr]
      expr -> [block_addr_decl_item]
      statements -> [unlabelled_control_flow_expr]
      if_else_expr -> [unlabelled_control_flow_expr]
      if_only_expr -> [if_elif_expr]
      switch_expr_body -> [unlabelled_control_flow_expr]
      select_expr_body -> [unlabelled_control_flow_expr]
      loop_expr_body -> [unlabelled_control_flow_expr]
      variable_sized_type_expr -> [initializable_type_expr]
      slice_type_expr -> [variable_sized_type_expr]
      array_type_expr -> [initializable_type_expr]
      map_type_expr -> [variable_sized_type_expr]
      properties_type_expr -> [initializable_type_expr]
      func_def -> [atom_expr]
    Goto:
      IDENTIFIER -> State 15
      IF -> State 16
      SWITCH -> State 24
      FOR -> State 12
      DO -> State 11
      SELECT -> State 23
      FUNC -> State 13
      MAKE -> State 21
      LBRACE -> State 18
      LPAREN -> State 20
      LBRACKET -> State 19
      ARROW -> State 8
      GREATER -> State 14
      var_type -> State 53
      accessible_expr -> State 27
      make_expr_size -> State 39
      make_expr_head -> State 38
      prefix_unary_op -> State 42
      mul_expr -> State 40
      add_expr -> State 28
      cmp_expr -> State 30
      and_expr -> State 29
      or_expr -> State 41
      send_recv_expr -> State 46
      if_elif_expr -> State 33
      loop_body -> State 37
      initializable_type_expr -> State 35
      properties_kind -> State 44
      func_signature -> State 32

Number of states: 254
Number of shift actions: 2028
Number of reduce actions: 123
Number of shift-and-reduce actions: 4333
Number of shift/reduce conflicts: 0
Number of reduce/reduce conflicts: 0
Number of unoptimized states: 8288
Number of unoptimized shift actions: 101516
Number of unoptimized reduce actions: 89613
*/
