%token<Count> NEWLINES // (\n|\r\n)+

%token<CommentGroups> COMMENT_GROUPS

%token<Value> INTEGER_LITERAL FLOAT_LITERAL RUNE_LITERAL STRING_LITERAL

// Identifiers with prefix "_" are private to the package (Note that "_" is a
// keyword, not an identifier). Nameing convention is lower camelcase for
// variables, upper camelcase for types.
%token<Value> IDENTIFIER

// "_" is a keyword that has different meanings in different context:
//  1. As an expression, it's an assignable, but inaccessible, variable
//     placeholder that can be used anywhere without val/let declaration.
//  2. As an type expression, it is an inferred mutable reference type.
%token<Value> UNDERSCORE

%token<Value> TRUE FALSE

%token<Value> IF ELSE SWITCH CASE DEFAULT REPEAT FOR DO IN SELECT
%token<Value> RETURN BREAK CONTINUE FALLTHROUGH

%token<Value> IMPORT

%token<Value> UNSAFE

%token<Value> TYPE IMPLEMENTS ALIAS
%token<Value> STRUCT ENUM TRAIT
%token<Value> FUNC ASYNC DEFER
%token<Value> VAR LET AS MAKE

%token<Value> NOT AND OR

%token<Value> POUND
%token<Value> AT

%token<Value> LBRACE RBRACE LPAREN RPAREN LBRACKET RBRACKET
%token<Value> DOT COMMA QUESTION SEMICOLON COLON EXCLAIM
%token<Value> DOLLAR
%token<Value> ELLIPSIS // ...
%token<Value> TILDE TILDE_TILDE

%token<Value> ASSIGN ARROW

%token<Value> ADD_ASSIGN SUB_ASSIGN MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN
%token<Value> ADD_ONE_ASSIGN SUB_ONE_ASSIGN
%token<Value> BIT_AND_ASSIGN BIT_OR_ASSIGN BIT_XOR_ASSIGN
%token<Value> BIT_LSHIFT_ASSIGN BIT_RSHIFT_ASSIGN

%token<Value> ADD SUB MUL DIV MOD
%token<Value> BIT_AND BIT_XOR BIT_OR BIT_LSHIFT BIT_RSHIFT
%token<Value> EQUAL NOT_EQUAL LESS LESS_OR_EQUAL GREATER GREATER_OR_EQUAL

%token<ParseError> PARSE_ERROR

%start source statement statements directives_declaration

// NOTE: the package name is taken from the directory name.  The compiler must
// ensure the directory name is a valid IDENTIFIER.  The name cannot be
// "internal" since that's special cased by go.  As an alternative to go's
// internal, if the package name is a private, it can only be accessed by its
// parent directory package.

source<StatementList> ->
  = statement_list

//
// Compiler directives ========================================================
//

// XXX: maybe reuse directives_declaration for field tagging.  e.g.,
//  type MyStruct struct(
//    X Int #[tag:json "x" ; tag:xml "x"]
//  )
//
// NOTE: only build constraint should make use of complex directive expr, all
// other directives should only use basic value expr (unless otherwise
// documented)
directives_declaration<DirectivesDecl> -> POUND LBRACKET directives RBRACKET

directives<DirectiveList> ->
  directive |
  add: directives SEMICOLON directive

directive<Directive> ->
  named: IDENTIFIER directive_exprs |
  compound_named: IDENTIFIER COLON IDENTIFIER directive_exprs

directive_exprs<DirectiveExprList> ->
  = proper_directive_exprs |
  nil:

proper_directive_exprs<DirectiveExprList> ->
  directive_expr |
  add: directive_exprs COMMA directive_expr

directive_expr<DirectiveExpr> ->
  = directive_and_expr |
  or: directive_expr OR directive_and_expr

directive_and_expr<DirectiveExpr> ->
  = directive_not_expr |
  and: directive_and_expr AND directive_not_expr

directive_not_expr<DirectiveExpr> ->
  = directive_atom_expr |
  not: NOT directive_atom_expr

directive_atom_expr<DirectiveExpr> ->
  = directive_value_expr |
  group: LPAREN directive_expr RPAREN

directive_value_expr<DirectiveExpr> -> directive_value

directive_value<Value> ->
  = IDENTIFIER |
  = UNDERSCORE |
  = TRUE |
  = FALSE |
  = INTEGER_LITERAL |
  = FLOAT_LITERAL |
  = RUNE_LITERAL |
  = STRING_LITERAL

//
// Statement ==================================================================
//

statement<Statement> ->
  = unsafe_stmt |

  = directives_declaration |

  // NOTE: The following are only applicable to top-level source definitions

  = import_stmt |
  = floating_comment |
  = type_def |
  = alias_def |

  // Note: Only applicable to switch / select body
  = branch_stmt |

  // NOTE: The following are only applicable in expression blocks

  = returnable_expr |
  = jump_stmt |

  // NOTE: assignment can only operate on proper address values.  Additional
  // checks are applied during post analysis.
  = assign_stmt |

  = block_addr_decl_stmt

// Free floating comment is not part of any other symbol. This can happen if
// the source file only has comments, or if there are comments at the end of
// the source.
floating_comment<Statement> -> COMMENT_GROUPS

//
// Branch statement
//

branch_stmt<Statement> ->
  // NOTE: case_branch and default_branch are applicable only to switch and
  // select expression blocks. select_assign_recv_branch and
  // select_assign_send_bracnh are only applicable to select expression.
  // Post analysis is needed to associate statements to cases (move trailing
  // non-case statements into case's data structure).
  case_branch: CASE case_patterns COLON optional_statement |
  default_branch: DEFAULT COLON optional_statement

//
// Unsafe statement
//

// escape hatch to get a basic compiler/transpiler running.
// unsafe<go> "emit verbatim go source"
unsafe_stmt<UnsafeStmt> ->
  UNSAFE LESS IDENTIFIER GREATER STRING_LITERAL

//
// Jump / fallthrough statements
//

jump_stmt<Statement> ->
  unlabeled_no_value: jump_op |
  unlabeled_valued: jump_op returnable_expr |
  labeled_no_value: jump_op AT IDENTIFIER |
  labeled_valued: jump_op AT IDENTIFIER returnable_expr |
  // Only applicable to switch case block (must be the last statement in the
  // case branch)
  FALLTHROUGH

jump_op<Value> ->
  = RETURN |
  = BREAK |
  = CONTINUE

//
// Assignment statements
//

// NOTE: expr captures identifier and tuple vars, as well as fully evaluated
// expressions.  Additional post analysis checks are needed to reject
// invalid usage, depending on the context (e.g., assignment should only
// operate on proper address values)
assign_stmt<Statement> -> returnable_expr ASSIGN returnable_expr

//
// Import statement
//

import_stmt<Statement> ->
  single: IMPORT import_clause |
  multiple: IMPORT LPAREN import_clauses RPAREN

proper_import_clauses<ImportClauseList> ->
  add_implicit: proper_import_clauses NEWLINES import_clause |
  add_explicit: proper_import_clauses COMMA import_clause |
  import_clause

import_clauses<ImportClauseList> ->
  = proper_import_clauses |
  implicit: proper_import_clauses NEWLINES |
  explicit: proper_import_clauses COMMA

import_clause<ImportClause> ->
  STRING_LITERAL |
  alias: IDENTIFIER STRING_LITERAL |
  unusable_import: UNDERSCORE STRING_LITERAL |
  import_to_local: DOT STRING_LITERAL

//
// Variable declaration pattern (Pseudo expression / statement) ===============
//

block_addr_decl_stmt<Statement> ->
  var_type DOLLAR LPAREN block_addr_decl_list RPAREN

block_addr_decl_list<ExpressionList> ->
  = proper_block_addr_decl_list |
  improper_implicit: proper_block_addr_decl_list NEWLINES |
  improper_explicit: proper_block_addr_decl_list COMMA |
  nil:

proper_block_addr_decl_list<ExpressionList> ->
  block_addr_decl_item |
  add_implicit: proper_block_addr_decl_list NEWLINES block_addr_decl_item |
  add_explicit: proper_block_addr_decl_list COMMA block_addr_decl_item

block_addr_decl_item<Expression> ->
  decl: new_addressable type_expr |
  inferred_assign: new_addressable ASSIGN expr |
  typed_assign: new_addressable type_expr ASSIGN expr

// VAR declares a reassignable variable. LET declares a non-reassignable
// variable.  A "constant" is a LET variable associated with a type with no
// public access to fields, and no mutation methods.
addr_decl_pattern<Expression> ->
  new_inferred: var_type new_addressable |
  new_typed: var_type new_addressable type_expr

assign_to_addr_pattern<Expression> -> GREATER expr

var_type<Value> ->
  = VAR |
  = LET

new_addressable<Expression> ->
  = named_expr |
  = implicit_struct_expr

case_patterns<ExpressionList> ->
  // In select expr, must verify the list has exactly one recv/send expression.
  = switchable_case_patterns |
  assign_selectable_pattern

// switchable_case_patterns must be a valid assign_pattern (enum_pattern
// in switchable_case_patterns are rejected by post analysis).
// expr must be either a send_expr or an recv_expr
assign_selectable_pattern<Expression> ->
  switchable_case_patterns ASSIGN expr

switchable_case_patterns<ExpressionList> ->
  switchable_case_pattern |
  add: switchable_case_patterns COMMA switchable_case_pattern

// REMINDER TO SELF: allow top level address_pattern to conditionally
// type match rather than type check error. e.g.,
//
// type Expression trait {...}
//
// var expr Expression = ...
//
// select expr {
// case var unary UnaryExpr:
//   // expr is a UnaryExpr.  Since the specified type is UnaryExpr instead of
//   // &UnaryExpr, make a copy of the expr and assign the copy to variable
//   // unary
// case var (Left=leftExpr, Right=rightExpr, ...) BinaryExpr:
//   // expr is a BinaryExpr.  Since the specified type is BinaryExpr instead
//   // of &BinaryExpr, make a copy of the expr and assign the copy's Left and
//   // Right fields to variables leftExpr and rightExpr.
// case var ifExprRef &IfExpr:
//   // expr is an IfExpr.  Since the specified type is &IfExpr, expr and
//   // ifExprRef refers to the same object.
// }
switchable_case_pattern<Expression> ->
  = expr |
  = enum_pattern

enum_pattern<Expression> ->
  // Note: parsing VAR <pkg>.<enum type>.<enum value>(...) is painful using
  // context free grammar (e.g, need to make VAR a prefix op expression instead
  // of address_pattern), hence we won't support this form. (the expression
  // actually parses explicit enum match pattern, where VARs are inside the
  // data list, but we should reject this form for consistency)
  match_any_data: DOT UNDERSCORE implicit_struct_expr |
  named: DOT IDENTIFIER implicit_struct_expr |
  match_any_unit: DOT UNDERSCORE |
  named_unit: DOT IDENTIFIER |
  unnamed_struct: DOT implicit_struct_expr

//
// Expressions (in decrasing order precedence) ================================
//

//
// Atom expressions
//

atom_expr<Expression> ->
  = parse_error_expr |
  = literal_expr |
  = named_expr |
  = func_def |
  = initialize_expr |
  = implicit_struct_expr

parse_error_expr<Expression> -> PARSE_ERROR

literal_expr<Expression> ->
  TRUE |
  FALSE |
  INTEGER_LITERAL |
  FLOAT_LITERAL |
  RUNE_LITERAL |
  STRING_LITERAL

named_expr<Expression> ->
  IDENTIFIER |
  UNDERSCORE

initialize_expr<Expression> -> initializable_type_expr LPAREN arguments RPAREN

implicit_struct_expr<Expression> -> LPAREN arguments RPAREN

//
// Accessible expressions
//

accessible_expr<Expression> ->
  = atom_expr |
  = access_expr |
  = parameterized_expr |
  = call_expr |
  = index_expr |
  = as_expr |
  = make_expr

access_expr<Expression> -> accessible_expr DOT IDENTIFIER

// Note: post analysis need to check to ensure argument either a positional
// or colon expressions argument.
index_expr<Expression> -> accessible_expr LBRACKET index RBRACKET

index<Expression> ->
  = expr |
  = colon_expr

// eqv to golang's "s, ok := expr.(SomeType)".
as_expr<Expression> -> accessible_expr DOT AS LPAREN type_expr RPAREN

// NOTE: parameterized_expr captures parameterized type as well.  The compiler
// will need to resolve the name and convert parameterized_expr to
// named_type_expr.
//
// NOTE: the compiler in reality only accept either "IDENTIFIER" or
// "IDENTIFIER DOT IDENTIFIER" as accessible_expr.  The reducer will reject
// all other forms.
parameterized_expr<Expression> -> accessible_expr generic_arguments

// NOTE: call_expr captures certain initialize_expr as well. The compiler will
// need to resolve the name and convert call_expr to initialize_expr
call_expr<Expression> -> accessible_expr LPAREN arguments RPAREN

// NOTE: arguments is a list of either 1 or 2 positional elements.  The first
// argument is either <size>, or <size>:<capacity>.  The second argument is an
// optional initial value.  both capacity and initial value are only
// applicable to slices.
make_expr<MakeExpr> ->
  size_proper: make_expr_size RPAREN |
  size_improper: make_expr_size COMMA RPAREN |
  value_proper: make_expr_size COMMA expr RPAREN |
  value_improper: make_expr_size COMMA expr COMMA RPAREN

make_expr_size<MakeExpr> ->
  size: make_expr_head expr |
  size_capacity: make_expr_head expr COLON expr

make_expr_head<MakeExpr> -> MAKE LPAREN variable_sized_type_expr COMMA

proper_arguments<ArgumentList> ->
  add: proper_arguments COMMA argument |
  argument

arguments<ArgumentList> ->
  = proper_arguments |
  improper_implicit: proper_arguments NEWLINES |
  improper_explicit: proper_arguments COMMA |
  nil:

argument<Argument> ->
  positional: expr |
  colon_expr |
  named_assignment: IDENTIFIER ASSIGN expr |
  // XXX: Under golang-style vararg assignment, the signature f(args ...int)
  // will not accept f(0, 1, x...) where x an int slice.  Maybe relax this into
  // vararg expansion instead?
  vararg_assignment: expr ELLIPSIS |
  // NOTE: ... is not a real expression, and is only used for pattern matching.
  // Unexpected usage in real expressions are rejected during type checking.
  skip_pattern: ELLIPSIS

// An (n >= 2)-tuple expression usable only as an argument
colon_expr<ImplicitStructExpr> ->
  unit_unit_pair: COLON |
  expr_unit_pair: expr COLON |
  unit_expr_pair: COLON expr |
  expr_expr_pair: expr COLON expr |
  colon_expr_unit_tuple: colon_expr COLON |
  colon_expr_expr_tuple: colon_expr COLON expr

//
// Postfixable expressions
//

postfixable_expr<Expression> ->
  = accessible_expr |
  = postfix_unary_expr

postfix_unary_expr<Expression> -> accessible_expr postfix_unary_op

postfix_unary_op<Value> ->
  = QUESTION |
  = EXCLAIM |
  // NOTE: expr++ and expr-- evaluates to unit and are not generally nestible.
  // NOTE: expr++ and expr-- can only operate on proper address values.
  // Additional checks are applied during post analysis.
  = ADD_ONE_ASSIGN |
  = SUB_ONE_ASSIGN

//
// Prefixable expressions
//

prefixable_expr<Expression> ->
  = postfixable_expr |
  = prefix_unary_expr

prefix_unary_expr<Expression> -> prefix_unary_op prefixable_expr

prefix_unary_op<Value> ->
  = NOT |
  = BIT_XOR |  // bitwise complement
  = ADD |
  = SUB |
  // "deref" copies an lvalue object.  The reference can be either mutable or
  // immutable.
  = MUL |
  // "ref" returns a mutable reference to the lvalue object.  ref-ing can be
  // applied on either mutable or immutable referenced location.
  = BIT_AND |
  // async eval to an await handler, whereas eval to returns unit.  The
  // prefixable_expr must be a callable expr.
  //
  // XXX: make defer's call_expr run on the nearest scope exit rather
  // than on function scope exit.  Transpiling this semantic using golang's
  // defer be annoying since golang's defer operate on function rather than
  // scope exit.  Maybe just code gen the defer call on every exit point
  // instead of relying on golang's defer?
  //
  // Need to ensure this an actual function call, not a struct initialization.
  // XXX: maybe allow async to use pseudo-call such as struct initialization?
  //
  // NOTE: compiler should optimize away the async await handler if it's not
  // used.
  //
  // NOTE: call_expr's accessible_expr and its arguments are evaluated
  // immediately. Only the call itself is applicable to the callback_op.
  = ASYNC |
  = DEFER

//
// Mul expressions
//

mul_expr<Expression> ->
  = prefixable_expr |
  = binary_mul_expr

binary_mul_expr<Expression> -> mul_expr mul_op prefixable_expr

mul_op<Value> ->
  = MUL |
  = DIV |
  = MOD |
  = BIT_AND |
  = BIT_LSHIFT |
  = BIT_RSHIFT

//
// Add expressions
//

add_expr<Expression> ->
  = mul_expr |
  = binary_add_expr

binary_add_expr<Expression> -> add_expr add_op mul_expr

add_op<Value> ->
  = ADD |
  = SUB |
  = BIT_OR |
  = BIT_XOR

//
// Cmp expressions
//

cmp_expr<Expression> ->
  = add_expr |
  = binary_cmp_expr

binary_cmp_expr<Expression> -> cmp_expr cmp_op add_expr

cmp_op<Value> ->
  = EQUAL |
  = NOT_EQUAL |
  = LESS |
  = LESS_OR_EQUAL |
  = GREATER |
  = GREATER_OR_EQUAL

//
// And expressions
//

and_expr<Expression> ->
  = cmp_expr |
  = binary_and_expr

binary_and_expr<Expression> -> and_expr AND cmp_expr

//
// Or expressions
//

or_expr<Expression> ->
  = and_expr |
  = binary_or_expr

binary_or_expr<Expression> -> or_expr OR and_expr

//
// Send/recv expressions
//

send_recv_expr<Expression> ->
  = or_expr |
  = send_expr |
  = recv_expr

send_expr<Expression> -> send_recv_expr ARROW or_expr

recv_expr<Expression> -> ARROW or_expr

//
// Assign op expressions
//

// NOTE: assignment can only operate on proper address values.  Additional
// checks are applied during post analysis.
assign_op_expr<Expression> ->
  = send_recv_expr |
  = binary_assign_op_expr

binary_assign_op_expr<Expression> ->
  send_recv_expr binary_assign_op send_recv_expr

binary_assign_op<Value> ->
  = ADD_ASSIGN |
  = SUB_ASSIGN |
  = MUL_ASSIGN |
  = DIV_ASSIGN |
  = MOD_ASSIGN |
  = BIT_AND_ASSIGN |
  = BIT_OR_ASSIGN |
  = BIT_XOR_ASSIGN |
  = BIT_LSHIFT_ASSIGN |
  = BIT_RSHIFT_ASSIGN

//
// Simple expressions
//

unlabelled_control_flow_expr<ControlFlowExpr> ->
  = statements |
  = if_else_expr |
  = switch_expr_body |
  = select_expr_body |
  = loop_expr_body

control_flow_expr<ControlFlowExpr> ->
  = unlabelled_control_flow_expr |
  labelled: IDENTIFIER AT unlabelled_control_flow_expr

expr<Expression> ->
  = assign_op_expr |
  = control_flow_expr |
  // NOTE: *_pattern are not a real expression.  Unexpected usage in real
  // expressions are rejected during type checking.
  = addr_decl_pattern |
  = assign_to_addr_pattern

// IMPORTANT NOTE!!!
//
// The grammar is specified in such a way that only the statements rule
// uses LBRACE and RBRACE.  Hence, we can unconditionally parse a
// statements when we encounters a LBRACE.
//
// This enables the parser to parse the source in piecemeal manner, which
// enables the parser to collect more parse errors on a single run.
//
// Post analysis is needed to ensure statements are valid for the specific
// context.
//
// Note: statements's value type can be either the statements's
// real value type, i.e., *StatementsExpr, or PARSE_ERROR's value type,
// i.e., *ParseErrorSymbol
statements<StatementsExpr> -> LBRACE statement_list RBRACE

proper_statement_list<StatementList> ->
  add_implicit: proper_statement_list NEWLINES statement |
  add_explicit: proper_statement_list SEMICOLON statement |
  statement

statement_list<StatementList> ->
  = proper_statement_list |
  improper_implicit: proper_statement_list NEWLINES |
  improper_explicit: proper_statement_list SEMICOLON |
  nil:

if_else_expr<IfExpr> ->
  = if_elif_expr |
  else: if_elif_expr ELSE statements

if_elif_expr<IfExpr> ->
  = if_only_expr |
  elif: if_elif_expr ELSE IF condition statements

if_only_expr<IfExpr> ->
  IF condition statements

condition<Expression> ->
  = expr |
  = case_pattern_expr

case_pattern_expr<Expression> -> CASE switchable_case_patterns ASSIGN expr

// match patterns within the same case must all have identical variable binding
//
// Allow fallthrough iff the next case have identical (and fewer) variable
// bindings.
//
// e.g., OK.  y is binded to the same value
// switch val {
// case var (x, y): fallthrough
// case (_, var y): // do something
// }
//
// e.g., Not ok.  y != z
// switch val {
// case var (x, y): fallthrough
// case (_, var z): // do something
// }

switch_expr_body<ControlFlowExpr> -> SWITCH expr statements

select_expr_body<ControlFlowExpr> -> SELECT statements

loop_expr_body<ControlFlowExpr> ->
  infinite: repeat_loop_body |
  do_while: repeat_loop_body FOR expr |
  while: FOR expr for_loop_body |
  iterator: FOR returnable_expr IN expr for_loop_body |
  for: FOR optional_statement SEMICOLON optional_expr SEMICOLON optional_statement for_loop_body

optional_statement<Statement> ->
  = statement |
  nil:

optional_expr<Expression> ->
  = expr |
  nil:

repeat_loop_body<StatementsExpr> -> REPEAT statements

for_loop_body<StatementsExpr> -> DO statements

//
// Returnable expressions (This is purely syntactic sugar)
//

returnable_expr<Expression> ->
  = expr |
  = improper_expr_struct

// improper in the sense that the expression list is not bounded by '(' and ')'
improper_expr_struct<ImplicitStructExpr> ->
  pair: expr COMMA expr |
  add: improper_expr_struct COMMA expr

//
// Types ======================================================================
//

variable_sized_type_expr<TypeExpression> ->
  = slice_type_expr |
  = map_type_expr

// Note: named type initializations are parsed as call_expr instead of
// initialize_expr
initializable_type_expr<TypeExpression> ->
  = properties_type_expr |
  = array_type_expr |
  = variable_sized_type_expr

// shorthand for Slice$[ <type_expr> ]
slice_type_expr<TypeExpression> -> LBRACKET type_expr RBRACKET

array_type_expr<TypeExpression> ->
  LBRACKET type_expr COMMA INTEGER_LITERAL RBRACKET

// shorthand for Map$[ <type_expr> , <type_expr> ]
map_type_expr<TypeExpression> -> LBRACKET type_expr COLON type_expr RBRACKET

atom_type_expr<TypeExpression> ->
  = initializable_type_expr |
  = named_type_expr |
  = inferred_type_expr |
  = implicit_struct_type_expr |
  = implicit_enum_type_expr |
  = func_signature

named_type_expr<TypeExpression> ->
  local: IDENTIFIER optional_generic_arguments |
  external: IDENTIFIER DOT IDENTIFIER optional_generic_arguments

inferred_type_expr<TypeExpression> -> UNDERSCORE

// NOTE: allowing return type to use trait algebra without explicitly wrapping
// inside a trait() would cause to ambiguity.  e.g.,
// "func() A + B" could mean func() returning "A + B" or "func() A" + "B"
returnable_type_expr<TypeExpression> ->
  = atom_type_expr |
  = prefix_unary_type_expr

prefix_unary_type_expr<TypeExpression> ->
  prefix_unary_type_op returnable_type_expr

prefix_unary_type_op<Value> ->
  = QUESTION | // shorthand for Optional$[ <atom_type_expr> ]
  = EXCLAIM | // shorthand for Result$[ <atom_type_expr> ]
  = BIT_AND | // reference type
  = TILDE | // type's public method signatures trait
  = TILDE_TILDE // type's public method signatures and fields trait

// NOTE: use explicit trait() to specify op precedence e.g.,
// trait( trait(A+B) * C)
type_expr<TypeExpression> ->
  = returnable_type_expr |
  = binary_type_expr

binary_type_expr<TypeExpression> ->
  type_expr binary_type_op returnable_type_expr

binary_type_op<Value> ->
  = MUL | // trait intersect
  = ADD | // trait union
  = SUB // trait difference

type_def<Statement> ->
  definition: TYPE IDENTIFIER generic_parameters type_expr |
  constrained_def: TYPE IDENTIFIER generic_parameters type_expr IMPLEMENTS type_expr

// NOTE: this also allows named function (and variable) aliasing.  The compiler
// will resolve names and converted type_expr to expr as needed.
alias_def<Statement> -> ALIAS IDENTIFIER generic_parameters type_expr

//
// Generic parameter definitions / arguments
//

// XXX: allow default generic parameter value?
generic_parameter<GenericParameter> ->
  unconstrained: IDENTIFIER |
  constrained: IDENTIFIER type_expr

generic_parameters<GenericParameterList> ->
  generic: DOLLAR LBRACKET generic_parameter_list RBRACKET |
  nil:

proper_generic_parameter_list<GenericParameterList> ->
  add: proper_generic_parameter_list COMMA generic_parameter |
  generic_parameter

generic_parameter_list<GenericParameterList> ->
  = proper_generic_parameter_list |
  improper_implicit: proper_generic_parameter_list NEWLINES |
  improper_explicit: proper_generic_parameter_list COMMA |
  nil:

generic_arguments<TypeExpressionList> ->
  DOLLAR LBRACKET generic_argument_list RBRACKET

optional_generic_arguments<TypeExpressionList> ->
  = generic_arguments |
  nil:

proper_generic_argument_list<TypeExpressionList> ->
  add: proper_generic_argument_list COMMA type_expr |
  type_expr

generic_argument_list<TypeExpressionList> ->
  = proper_generic_argument_list |
  improper_implicit: proper_generic_argument_list NEWLINES |
  improper_explicit: proper_generic_argument_list COMMA |
  nil:

//
// Explicit/Implicit struct/enum/trait definition
//

// NOTE: default_enum_field_def is only usable in enum. struct_padding is only
// usable in struct. These are checked post parsing.
//
// NOTE: In general, type_expr must be concrete (i.e., can't have any inferred
// type).
type_property<TypeProperty> ->
  // NOTE: unnamed_field also captures trait method signatures
  unnamed_field: type_expr |
  named_field: IDENTIFIER type_expr |
  padding_field: UNDERSCORE type_expr |
  var_type_unnamed_field: var_type type_expr |
  var_type_named_field: var_type IDENTIFIER type_expr |
  default_named_enum_field: DEFAULT IDENTIFIER type_expr |
  default_unnamed_enum_field: DEFAULT type_expr |
  = func_def

proper_implicit_type_properties<TypeProperties> ->
  add: proper_implicit_type_properties COMMA type_property |
  type_property

implicit_type_properties<TypeProperties> ->
  = proper_implicit_type_properties |
  improper_implicit: proper_implicit_type_properties NEWLINES |
  improper_explicit: proper_implicit_type_properties COMMA |
  nil:

implicit_struct_type_expr<TypeExpression> ->
  LPAREN implicit_type_properties RPAREN

// NOTE: inferred "<type_expr> OR ()" should be treated as
// Optional$[<type_expr>]
//
// NOTE: inferred "<type_expr> OR Error" should be treated as
// Result$[<type_expr>]
//
// NOTE: inferred types "<type_expr> OR Error or ()" (in any order) should be
// treated as Result$[ Optional$[ <type_expr> ] ]
proper_implicit_enum_type_properties<TypeProperties> ->
  pair: type_property OR type_property |
  add: proper_implicit_enum_type_properties OR type_property

implicit_enum_type_properties<TypeProperties> ->
  = proper_implicit_enum_type_properties |
  // allow ) on a different line
  improper: proper_implicit_enum_type_properties NEWLINES

implicit_enum_type_expr<TypeExpression> ->
  LPAREN implicit_enum_type_properties RPAREN

proper_explicit_type_properties<TypeProperties> ->
  add_implicit: proper_explicit_type_properties NEWLINES type_property |
  add_explicit: proper_explicit_type_properties COMMA type_property |
  type_property

explicit_type_properties<TypeProperties> ->
  = proper_explicit_type_properties |
  improper_implicit: proper_explicit_type_properties NEWLINES |
  improper_explicit: proper_explicit_type_properties COMMA |
  nil:

properties_type_expr<TypeExpression> ->
  properties_kind LPAREN explicit_type_properties RPAREN

properties_kind<Value> ->
  = STRUCT |
  = TRAIT |
  = ENUM

//
// Function type, definition, trait method signature
// and anonymous func expression
//

return_type<TypeExpression> ->
  = returnable_type_expr |
  nil:

// NOTE: inferred mutable reference type is declared "&_". copy-on-mutate
// reference is declared as "_"
parameter<Parameter> ->
  named_arg: IDENTIFIER type_expr |
  named_receiver: IDENTIFIER GREATER type_expr |
  named_vararg: IDENTIFIER ELLIPSIS type_expr |
  ignore_arg: UNDERSCORE type_expr |
  ignore_receiver: UNDERSCORE GREATER type_expr |
  ignore_vararg: UNDERSCORE ELLIPSIS type_expr |
  unnamed_arg: type_expr |
  unnamed_receiver: GREATER type_expr |
  unnamed_vararg: ELLIPSIS type_expr

proper_parameter_list<Parameters> ->
  add: proper_parameter_list COMMA parameter |
  parameter

parameter_list<Parameters> ->
  = proper_parameter_list |
  improper_implicit: proper_parameter_list NEWLINES |
  improper_explicit: proper_parameter_list COMMA |
  nil:

parameters<Parameters> -> LPAREN parameter_list RPAREN

// NOTE: FUNC is needed to disambiguate method signature from field def.
// e.g., Foo (int, int) could mean a field named Foo with type
// struct(int, int), or a method called Foo that takes two argument if func
// is not present.
func_signature<FuncSignature> ->
  anonymous: FUNC parameters return_type |
  named: FUNC IDENTIFIER generic_parameters parameters return_type

func_def<FuncDefinition> -> func_signature statements

%%lang_specs{
go:
  package: lr
  value_types:
    ParseError: "*ParseErrorSymbol"
    Count: "TokenCount"
    Value: "*TokenValue"
    Expression: "github.com/pattyshack/pl/ast.Expression"
    ExpressionList: "*github.com/pattyshack/pl/ast.ExpressionList"
    ControlFlowExpr: "github.com/pattyshack/pl/ast.ControlFlowExpr"
    IfExpr: "*github.com/pattyshack/pl/ast.IfExpr"
    ImplicitStructExpr: "*github.com/pattyshack/pl/ast.ImplicitStructExpr"
    StatementsExpr: "*github.com/pattyshack/pl/ast.StatementsExpr"
    MakeExpr: "*github.com/pattyshack/pl/ast.MakeExpr"
    Parameter: "*github.com/pattyshack/pl/ast.Parameter"
    Parameters: "*github.com/pattyshack/pl/ast.ParameterList"
    Argument: "*github.com/pattyshack/pl/ast.Argument"
    ArgumentList: "*github.com/pattyshack/pl/ast.ArgumentList"
    TypeExpression: "github.com/pattyshack/pl/ast.TypeExpression"
    FuncSignature: "*github.com/pattyshack/pl/ast.FuncSignature"
    FuncDefinition: "*github.com/pattyshack/pl/ast.FuncDefinition"
    GenericParameter: "*github.com/pattyshack/pl/ast.GenericParameter"
    GenericParameterList: "*github.com/pattyshack/pl/ast.GenericParameterList"
    TypeExpressionList: "*github.com/pattyshack/pl/ast.TypeExpressionList"
    Statement: "github.com/pattyshack/pl/ast.Statement"
    StatementList: "*github.com/pattyshack/pl/ast.StatementList"
    TypeProperty: "github.com/pattyshack/pl/ast.TypeProperty"
    TypeProperties: "*github.com/pattyshack/pl/ast.TypePropertyList"
    ImportClause: "*github.com/pattyshack/pl/ast.ImportClause"
    ImportClauseList: "*github.com/pattyshack/pl/ast.ImportClauseList"
    UnsafeStmt: "*github.com/pattyshack/pl/ast.UnsafeStmt"
    CommentGroups: "CommentGroupsTok"
    DirectivesDecl: "*github.com/pattyshack/pl/ast.DirectivesDecl"
    Directive: "*github.com/pattyshack/pl/ast.Directive"
    DirectiveList: "*github.com/pattyshack/pl/ast.DirectiveList"
    DirectiveExpr: "github.com/pattyshack/pl/ast.DirectiveExpression"
    DirectiveExprList: "*github.com/pattyshack/pl/ast.DirectiveExpressionList"
  generate_end_pos: True
}%%
